// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mpmsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mpmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mpcomm {

namespace {

const ::google::protobuf::Descriptor* TestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCallbackIPReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCallbackIPReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCallbackIPResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCallbackIPResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuButton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuButton_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuMatchRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuMatchRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Menu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Menu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMenuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMenuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMenuResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMenuResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMenuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMenuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMenuResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMenuResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteMenuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteMenuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteMenuResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteMenuResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddConditionalMenuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddConditionalMenuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddConditionalMenuResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddConditionalMenuResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelConditionalMenuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelConditionalMenuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelConditionalMenuResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelConditionalMenuResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TryMatchMenuReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TryMatchMenuReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TryMatchMenuResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TryMatchMenuResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurrentSelfMenuInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurrentSelfMenuInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespNews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespNews_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespNewsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespNewsList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentSelfMenuButton_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentSelfMenuButton_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentSelfMenuButtonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentSelfMenuButtonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentSelfMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentSelfMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurrentSelfMenuInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurrentSelfMenuInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyWordItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyWordItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoReplyRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoReplyRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoReplyRuleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoReplyRuleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurrentAutoReplyInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurrentAutoReplyInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetCurrentAutoReplyInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCurrentAutoReplyInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Image_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Image_reflection_ = NULL;
const ::google::protobuf::Descriptor* Voice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Voice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Video_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Video_reflection_ = NULL;
const ::google::protobuf::Descriptor* Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Link_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArticlesItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArticlesItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Music_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Music_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpNewsMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpNewsMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WxCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WxCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomServiceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomServiceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendCustomMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendCustomMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendCustomMessageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendCustomMessageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendFilter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassSendAllReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassSendAllReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassSendAllResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassSendAllResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassSendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassSendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassSendResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassSendResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassDeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassDeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassDeleteResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassDeleteResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassPreviewReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassPreviewReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassPreviewResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassPreviewResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MassGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MassGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetIndustryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetIndustryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetIndustryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetIndustryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIndustryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIndustryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Industry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Industry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIndustryResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIndustryResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTemplateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTemplateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTemplateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTemplateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllPrivateTemplateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllPrivateTemplateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllPrivateTemplateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllPrivateTemplateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPrivateTemplateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPrivateTemplateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelPrivateTemplateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelPrivateTemplateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Json_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Json_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendTemplateMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendTemplateMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendTemplateMessageResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendTemplateMessageResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewsItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadImgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadImgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadImgResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadImgResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadNewsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadNewsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadNewsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadNewsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadMediaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadMediaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadMediaResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadMediaResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMediaReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMediaReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMediaResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMediaResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialVideoDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialVideoDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewsMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewsMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewsMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewsMaterialResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMaterialResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMaterialResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelMaterialResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateNewsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateNewsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateNewsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateNewsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMaterialCountReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMaterialCountReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetMaterialCountResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetMaterialCountResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetMaterialReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetMaterialReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaterialItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaterialItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetMaterialResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetMaterialResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTagsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTagsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTagsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTagsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTagsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTagsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTagsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTagsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTagsMembersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTagsMembersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTagsMembersResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTagsMembersResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchUpdateTagsMembersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchUpdateTagsMembersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchUpdateTagsMembersResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchUpdateTagsMembersResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTagsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTagsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteTagsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteTagsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TagUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TagUserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagUserResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagUserResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchTaggingMembersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchTaggingMembersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchTaggingMembersResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchTaggingMembersResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchUnTaggingMembersReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchUnTaggingMembersReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchUnTaggingMembersResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchUnTaggingMembersResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagsIdListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagsIdListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTagsIdListResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTagsIdListResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfoRemarkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfoRemarkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserInfoRemarkResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserInfoRemarkResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetUserItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetUserItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetUserInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetUserInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserResp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mpmsg_2eproto() {
  protobuf_AddDesc_mpmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mpmsg.proto");
  GOOGLE_CHECK(file != NULL);
  TestMessage_descriptor_ = file->message_type(0);
  static const int TestMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, field1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, field2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, field3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, field4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, field5_),
  };
  TestMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestMessage_descriptor_,
      TestMessage::default_instance_,
      TestMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestMessage));
  TokenReq_descriptor_ = file->message_type(1);
  static const int TokenReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenReq, grant_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenReq, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenReq, secret_),
  };
  TokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenReq_descriptor_,
      TokenReq::default_instance_,
      TokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenReq));
  TokenResp_descriptor_ = file->message_type(2);
  static const int TokenResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResp, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResp, expires_in_),
  };
  TokenResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenResp_descriptor_,
      TokenResp::default_instance_,
      TokenResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenResp));
  GetCallbackIPReq_descriptor_ = file->message_type(3);
  static const int GetCallbackIPReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPReq, access_token_),
  };
  GetCallbackIPReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCallbackIPReq_descriptor_,
      GetCallbackIPReq::default_instance_,
      GetCallbackIPReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCallbackIPReq));
  GetCallbackIPResp_descriptor_ = file->message_type(4);
  static const int GetCallbackIPResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPResp, ip_list_),
  };
  GetCallbackIPResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCallbackIPResp_descriptor_,
      GetCallbackIPResp::default_instance_,
      GetCallbackIPResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCallbackIPResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCallbackIPResp));
  MenuButton_descriptor_ = file->message_type(5);
  static const int MenuButton_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, sub_button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, media_id_),
  };
  MenuButton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuButton_descriptor_,
      MenuButton::default_instance_,
      MenuButton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuButton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuButton));
  MenuMatchRule_descriptor_ = file->message_type(6);
  static const int MenuMatchRule_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, tag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, client_platform_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, language_),
  };
  MenuMatchRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuMatchRule_descriptor_,
      MenuMatchRule::default_instance_,
      MenuMatchRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuMatchRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuMatchRule));
  Menu_descriptor_ = file->message_type(7);
  static const int Menu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, matchrule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, menuid_),
  };
  Menu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Menu_descriptor_,
      Menu::default_instance_,
      Menu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Menu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Menu));
  CreateMenuReq_descriptor_ = file->message_type(8);
  static const int CreateMenuReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuReq, button_),
  };
  CreateMenuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMenuReq_descriptor_,
      CreateMenuReq::default_instance_,
      CreateMenuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMenuReq));
  CreateMenuResp_descriptor_ = file->message_type(9);
  static const int CreateMenuResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuResp, errmsg_),
  };
  CreateMenuResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMenuResp_descriptor_,
      CreateMenuResp::default_instance_,
      CreateMenuResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMenuResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMenuResp));
  GetMenuReq_descriptor_ = file->message_type(10);
  static const int GetMenuReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuReq, access_token_),
  };
  GetMenuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMenuReq_descriptor_,
      GetMenuReq::default_instance_,
      GetMenuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMenuReq));
  GetMenuResp_descriptor_ = file->message_type(11);
  static const int GetMenuResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuResp, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuResp, conditionalmenu_),
  };
  GetMenuResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMenuResp_descriptor_,
      GetMenuResp::default_instance_,
      GetMenuResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMenuResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMenuResp));
  DeleteMenuReq_descriptor_ = file->message_type(12);
  static const int DeleteMenuReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuReq, access_token_),
  };
  DeleteMenuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteMenuReq_descriptor_,
      DeleteMenuReq::default_instance_,
      DeleteMenuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteMenuReq));
  DeleteMenuResp_descriptor_ = file->message_type(13);
  static const int DeleteMenuResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuResp, errmsg_),
  };
  DeleteMenuResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteMenuResp_descriptor_,
      DeleteMenuResp::default_instance_,
      DeleteMenuResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMenuResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteMenuResp));
  AddConditionalMenuReq_descriptor_ = file->message_type(14);
  static const int AddConditionalMenuReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuReq, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuReq, matchrule_),
  };
  AddConditionalMenuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddConditionalMenuReq_descriptor_,
      AddConditionalMenuReq::default_instance_,
      AddConditionalMenuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddConditionalMenuReq));
  AddConditionalMenuResp_descriptor_ = file->message_type(15);
  static const int AddConditionalMenuResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuResp, menuid_),
  };
  AddConditionalMenuResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddConditionalMenuResp_descriptor_,
      AddConditionalMenuResp::default_instance_,
      AddConditionalMenuResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddConditionalMenuResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddConditionalMenuResp));
  DelConditionalMenuReq_descriptor_ = file->message_type(16);
  static const int DelConditionalMenuReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuReq, menuid_),
  };
  DelConditionalMenuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelConditionalMenuReq_descriptor_,
      DelConditionalMenuReq::default_instance_,
      DelConditionalMenuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelConditionalMenuReq));
  DelConditionalMenuResp_descriptor_ = file->message_type(17);
  static const int DelConditionalMenuResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuResp, errmsg_),
  };
  DelConditionalMenuResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelConditionalMenuResp_descriptor_,
      DelConditionalMenuResp::default_instance_,
      DelConditionalMenuResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelConditionalMenuResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelConditionalMenuResp));
  TryMatchMenuReq_descriptor_ = file->message_type(18);
  static const int TryMatchMenuReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuReq, user_id_),
  };
  TryMatchMenuReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TryMatchMenuReq_descriptor_,
      TryMatchMenuReq::default_instance_,
      TryMatchMenuReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TryMatchMenuReq));
  TryMatchMenuResp_descriptor_ = file->message_type(19);
  static const int TryMatchMenuResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuResp, button_),
  };
  TryMatchMenuResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TryMatchMenuResp_descriptor_,
      TryMatchMenuResp::default_instance_,
      TryMatchMenuResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryMatchMenuResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TryMatchMenuResp));
  GetCurrentSelfMenuInfoReq_descriptor_ = file->message_type(20);
  static const int GetCurrentSelfMenuInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoReq, access_token_),
  };
  GetCurrentSelfMenuInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurrentSelfMenuInfoReq_descriptor_,
      GetCurrentSelfMenuInfoReq::default_instance_,
      GetCurrentSelfMenuInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurrentSelfMenuInfoReq));
  RespNews_descriptor_ = file->message_type(21);
  static const int RespNews_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, show_cover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, cover_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, content_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, source_url_),
  };
  RespNews_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespNews_descriptor_,
      RespNews::default_instance_,
      RespNews_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNews, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespNews));
  RespNewsList_descriptor_ = file->message_type(22);
  static const int RespNewsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNewsList, list_),
  };
  RespNewsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespNewsList_descriptor_,
      RespNewsList::default_instance_,
      RespNewsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNewsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespNewsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespNewsList));
  CurrentSelfMenuButton_descriptor_ = file->message_type(23);
  static const int CurrentSelfMenuButton_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, news_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, sub_button_),
  };
  CurrentSelfMenuButton_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentSelfMenuButton_descriptor_,
      CurrentSelfMenuButton::default_instance_,
      CurrentSelfMenuButton_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButton, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentSelfMenuButton));
  CurrentSelfMenuButtonList_descriptor_ = file->message_type(24);
  static const int CurrentSelfMenuButtonList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButtonList, list_),
  };
  CurrentSelfMenuButtonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentSelfMenuButtonList_descriptor_,
      CurrentSelfMenuButtonList::default_instance_,
      CurrentSelfMenuButtonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButtonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenuButtonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentSelfMenuButtonList));
  CurrentSelfMenu_descriptor_ = file->message_type(25);
  static const int CurrentSelfMenu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenu, button_),
  };
  CurrentSelfMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentSelfMenu_descriptor_,
      CurrentSelfMenu::default_instance_,
      CurrentSelfMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentSelfMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentSelfMenu));
  GetCurrentSelfMenuInfoResp_descriptor_ = file->message_type(26);
  static const int GetCurrentSelfMenuInfoResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoResp, is_menu_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoResp, selfmenu_info_),
  };
  GetCurrentSelfMenuInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurrentSelfMenuInfoResp_descriptor_,
      GetCurrentSelfMenuInfoResp::default_instance_,
      GetCurrentSelfMenuInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentSelfMenuInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurrentSelfMenuInfoResp));
  ReplyItem_descriptor_ = file->message_type(27);
  static const int ReplyItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyItem, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyItem, news_info_),
  };
  ReplyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyItem_descriptor_,
      ReplyItem::default_instance_,
      ReplyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyItem));
  KeyWordItem_descriptor_ = file->message_type(28);
  static const int KeyWordItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyWordItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyWordItem, match_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyWordItem, content_),
  };
  KeyWordItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyWordItem_descriptor_,
      KeyWordItem::default_instance_,
      KeyWordItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyWordItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyWordItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyWordItem));
  AutoReplyRule_descriptor_ = file->message_type(29);
  static const int AutoReplyRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, rule_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, reply_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, keyword_list_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, reply_list_info_),
  };
  AutoReplyRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoReplyRule_descriptor_,
      AutoReplyRule::default_instance_,
      AutoReplyRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoReplyRule));
  AutoReplyRuleList_descriptor_ = file->message_type(30);
  static const int AutoReplyRuleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRuleList, list_),
  };
  AutoReplyRuleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoReplyRuleList_descriptor_,
      AutoReplyRuleList::default_instance_,
      AutoReplyRuleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRuleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoReplyRuleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoReplyRuleList));
  GetCurrentAutoReplyInfoReq_descriptor_ = file->message_type(31);
  static const int GetCurrentAutoReplyInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoReq, access_token_),
  };
  GetCurrentAutoReplyInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurrentAutoReplyInfoReq_descriptor_,
      GetCurrentAutoReplyInfoReq::default_instance_,
      GetCurrentAutoReplyInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurrentAutoReplyInfoReq));
  GetCurrentAutoReplyInfoResp_descriptor_ = file->message_type(32);
  static const int GetCurrentAutoReplyInfoResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, is_add_friend_reply_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, is_autoreply_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, add_friend_autoreply_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, message_default_autoreply_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, keyword_autoreply_info_),
  };
  GetCurrentAutoReplyInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCurrentAutoReplyInfoResp_descriptor_,
      GetCurrentAutoReplyInfoResp::default_instance_,
      GetCurrentAutoReplyInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCurrentAutoReplyInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCurrentAutoReplyInfoResp));
  Text_descriptor_ = file->message_type(33);
  static const int Text_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, content_),
  };
  Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Text_descriptor_,
      Text::default_instance_,
      Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Text));
  Image_descriptor_ = file->message_type(34);
  static const int Image_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, media_id_),
  };
  Image_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Image_descriptor_,
      Image::default_instance_,
      Image_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Image));
  Voice_descriptor_ = file->message_type(35);
  static const int Voice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voice, media_id_),
  };
  Voice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Voice_descriptor_,
      Voice::default_instance_,
      Voice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Voice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Voice));
  Video_descriptor_ = file->message_type(36);
  static const int Video_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, thumb_media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, description_),
  };
  Video_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Video_descriptor_,
      Video::default_instance_,
      Video_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Video, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Video));
  Link_descriptor_ = file->message_type(37);
  static const int Link_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, thumb_media_id_),
  };
  Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Link_descriptor_,
      Link::default_instance_,
      Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Link));
  Card_descriptor_ = file->message_type(38);
  static const int Card_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, weixin_id_),
  };
  Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Card));
  ArticlesItem_descriptor_ = file->message_type(39);
  static const int ArticlesItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArticlesItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArticlesItem, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArticlesItem, picurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArticlesItem, url_),
  };
  ArticlesItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArticlesItem_descriptor_,
      ArticlesItem::default_instance_,
      ArticlesItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArticlesItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArticlesItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArticlesItem));
  NewsMsg_descriptor_ = file->message_type(40);
  static const int NewsMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsMsg, articles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsMsg, thumb_media_id_),
  };
  NewsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewsMsg_descriptor_,
      NewsMsg::default_instance_,
      NewsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewsMsg));
  Music_descriptor_ = file->message_type(41);
  static const int Music_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, musicurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, hqmusicurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, thumb_media_id_),
  };
  Music_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Music_descriptor_,
      Music::default_instance_,
      Music_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Music, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Music));
  MpNewsMsg_descriptor_ = file->message_type(42);
  static const int MpNewsMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpNewsMsg, media_id_),
  };
  MpNewsMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpNewsMsg_descriptor_,
      MpNewsMsg::default_instance_,
      MpNewsMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpNewsMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpNewsMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpNewsMsg));
  MpVideo_descriptor_ = file->message_type(43);
  static const int MpVideo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpVideo, media_id_),
  };
  MpVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpVideo_descriptor_,
      MpVideo::default_instance_,
      MpVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpVideo));
  WxCard_descriptor_ = file->message_type(44);
  static const int WxCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxCard, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxCard, card_ext_),
  };
  WxCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WxCard_descriptor_,
      WxCard::default_instance_,
      WxCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WxCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WxCard));
  CustomServiceInfo_descriptor_ = file->message_type(45);
  static const int CustomServiceInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomServiceInfo, kf_account_),
  };
  CustomServiceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomServiceInfo_descriptor_,
      CustomServiceInfo::default_instance_,
      CustomServiceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomServiceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomServiceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomServiceInfo));
  SendCustomMessageReq_descriptor_ = file->message_type(46);
  static const int SendCustomMessageReq_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, music_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, news_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, mpnews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, wxcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, customservice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, mpvideo_),
  };
  SendCustomMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendCustomMessageReq_descriptor_,
      SendCustomMessageReq::default_instance_,
      SendCustomMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendCustomMessageReq));
  SendCustomMessageResp_descriptor_ = file->message_type(47);
  static const int SendCustomMessageResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageResp, errmsg_),
  };
  SendCustomMessageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendCustomMessageResp_descriptor_,
      SendCustomMessageResp::default_instance_,
      SendCustomMessageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCustomMessageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendCustomMessageResp));
  SendFilter_descriptor_ = file->message_type(48);
  static const int SendFilter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFilter, is_to_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFilter, tag_id_),
  };
  SendFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendFilter_descriptor_,
      SendFilter::default_instance_,
      SendFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendFilter));
  MassSendAllReq_descriptor_ = file->message_type(49);
  static const int MassSendAllReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, mpvideo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, mpnews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, wxcard_),
  };
  MassSendAllReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassSendAllReq_descriptor_,
      MassSendAllReq::default_instance_,
      MassSendAllReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassSendAllReq));
  MassSendAllResp_descriptor_ = file->message_type(50);
  static const int MassSendAllResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllResp, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllResp, msg_data_id_),
  };
  MassSendAllResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassSendAllResp_descriptor_,
      MassSendAllResp::default_instance_,
      MassSendAllResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendAllResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassSendAllResp));
  MassSendReq_descriptor_ = file->message_type(51);
  static const int MassSendReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, mpnews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, wxcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, mpvideo_),
  };
  MassSendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassSendReq_descriptor_,
      MassSendReq::default_instance_,
      MassSendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassSendReq));
  MassSendResp_descriptor_ = file->message_type(52);
  static const int MassSendResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendResp, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendResp, msg_data_id_),
  };
  MassSendResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassSendResp_descriptor_,
      MassSendResp::default_instance_,
      MassSendResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassSendResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassSendResp));
  MassDeleteReq_descriptor_ = file->message_type(53);
  static const int MassDeleteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteReq, msg_id_),
  };
  MassDeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassDeleteReq_descriptor_,
      MassDeleteReq::default_instance_,
      MassDeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassDeleteReq));
  MassDeleteResp_descriptor_ = file->message_type(54);
  static const int MassDeleteResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteResp, msg_id_),
  };
  MassDeleteResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassDeleteResp_descriptor_,
      MassDeleteResp::default_instance_,
      MassDeleteResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassDeleteResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassDeleteResp));
  MassPreviewReq_descriptor_ = file->message_type(55);
  static const int MassPreviewReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, towxname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, voice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, mpnews_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, wxcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, mpvideo_),
  };
  MassPreviewReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassPreviewReq_descriptor_,
      MassPreviewReq::default_instance_,
      MassPreviewReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassPreviewReq));
  MassPreviewResp_descriptor_ = file->message_type(56);
  static const int MassPreviewResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewResp, errmsg_),
  };
  MassPreviewResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassPreviewResp_descriptor_,
      MassPreviewResp::default_instance_,
      MassPreviewResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassPreviewResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassPreviewResp));
  MassGetReq_descriptor_ = file->message_type(57);
  static const int MassGetReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetReq, msg_id_),
  };
  MassGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassGetReq_descriptor_,
      MassGetReq::default_instance_,
      MassGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassGetReq));
  MassGetResp_descriptor_ = file->message_type(58);
  static const int MassGetResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetResp, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetResp, msg_status_),
  };
  MassGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MassGetResp_descriptor_,
      MassGetResp::default_instance_,
      MassGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MassGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MassGetResp));
  SetIndustryReq_descriptor_ = file->message_type(59);
  static const int SetIndustryReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryReq, industry_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryReq, industry_id2_),
  };
  SetIndustryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetIndustryReq_descriptor_,
      SetIndustryReq::default_instance_,
      SetIndustryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetIndustryReq));
  SetIndustryResp_descriptor_ = file->message_type(60);
  static const int SetIndustryResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryResp, errmsg_),
  };
  SetIndustryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetIndustryResp_descriptor_,
      SetIndustryResp::default_instance_,
      SetIndustryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetIndustryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetIndustryResp));
  GetIndustryReq_descriptor_ = file->message_type(61);
  static const int GetIndustryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryReq, access_token_),
  };
  GetIndustryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIndustryReq_descriptor_,
      GetIndustryReq::default_instance_,
      GetIndustryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIndustryReq));
  Industry_descriptor_ = file->message_type(62);
  static const int Industry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Industry, first_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Industry, second_class_),
  };
  Industry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Industry_descriptor_,
      Industry::default_instance_,
      Industry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Industry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Industry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Industry));
  GetIndustryResp_descriptor_ = file->message_type(63);
  static const int GetIndustryResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryResp, primary_industry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryResp, secondary_industry_),
  };
  GetIndustryResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIndustryResp_descriptor_,
      GetIndustryResp::default_instance_,
      GetIndustryResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIndustryResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIndustryResp));
  AddTemplateReq_descriptor_ = file->message_type(64);
  static const int AddTemplateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateReq, template_id_short_),
  };
  AddTemplateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTemplateReq_descriptor_,
      AddTemplateReq::default_instance_,
      AddTemplateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTemplateReq));
  AddTemplateResp_descriptor_ = file->message_type(65);
  static const int AddTemplateResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateResp, template_id_),
  };
  AddTemplateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTemplateResp_descriptor_,
      AddTemplateResp::default_instance_,
      AddTemplateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTemplateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTemplateResp));
  GetAllPrivateTemplateReq_descriptor_ = file->message_type(66);
  static const int GetAllPrivateTemplateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateReq, access_token_),
  };
  GetAllPrivateTemplateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllPrivateTemplateReq_descriptor_,
      GetAllPrivateTemplateReq::default_instance_,
      GetAllPrivateTemplateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllPrivateTemplateReq));
  PrivateTemplate_descriptor_ = file->message_type(67);
  static const int PrivateTemplate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, primary_industry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, deputy_industry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, example_),
  };
  PrivateTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateTemplate_descriptor_,
      PrivateTemplate::default_instance_,
      PrivateTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateTemplate));
  GetAllPrivateTemplateResp_descriptor_ = file->message_type(68);
  static const int GetAllPrivateTemplateResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateResp, template_list_),
  };
  GetAllPrivateTemplateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllPrivateTemplateResp_descriptor_,
      GetAllPrivateTemplateResp::default_instance_,
      GetAllPrivateTemplateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllPrivateTemplateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllPrivateTemplateResp));
  DelPrivateTemplateReq_descriptor_ = file->message_type(69);
  static const int DelPrivateTemplateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateReq, template_id_),
  };
  DelPrivateTemplateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelPrivateTemplateReq_descriptor_,
      DelPrivateTemplateReq::default_instance_,
      DelPrivateTemplateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelPrivateTemplateReq));
  DelPrivateTemplateResp_descriptor_ = file->message_type(70);
  static const int DelPrivateTemplateResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateResp, errmsg_),
  };
  DelPrivateTemplateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelPrivateTemplateResp_descriptor_,
      DelPrivateTemplateResp::default_instance_,
      DelPrivateTemplateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelPrivateTemplateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelPrivateTemplateResp));
  Json_descriptor_ = file->message_type(71);
  static const int Json_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Json, content_),
  };
  Json_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Json_descriptor_,
      Json::default_instance_,
      Json_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Json, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Json, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Json));
  SendTemplateMessageReq_descriptor_ = file->message_type(72);
  static const int SendTemplateMessageReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, touser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, data_),
  };
  SendTemplateMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendTemplateMessageReq_descriptor_,
      SendTemplateMessageReq::default_instance_,
      SendTemplateMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendTemplateMessageReq));
  SendTemplateMessageResp_descriptor_ = file->message_type(73);
  static const int SendTemplateMessageResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageResp, msgid_),
  };
  SendTemplateMessageResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendTemplateMessageResp_descriptor_,
      SendTemplateMessageResp::default_instance_,
      SendTemplateMessageResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTemplateMessageResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendTemplateMessageResp));
  MediaFile_descriptor_ = file->message_type(74);
  static const int MediaFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFile, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFile, buffer_),
  };
  MediaFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MediaFile_descriptor_,
      MediaFile::default_instance_,
      MediaFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MediaFile));
  NewsItem_descriptor_ = file->message_type(75);
  static const int NewsItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, author_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, content_source_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, thumb_media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, show_cover_pic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, thumb_url_),
  };
  NewsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewsItem_descriptor_,
      NewsItem::default_instance_,
      NewsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewsItem));
  NewsInfo_descriptor_ = file->message_type(76);
  static const int NewsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, news_item_),
  };
  NewsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewsInfo_descriptor_,
      NewsInfo::default_instance_,
      NewsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewsInfo));
  UploadImgReq_descriptor_ = file->message_type(77);
  static const int UploadImgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgReq, media_),
  };
  UploadImgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadImgReq_descriptor_,
      UploadImgReq::default_instance_,
      UploadImgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadImgReq));
  UploadImgResp_descriptor_ = file->message_type(78);
  static const int UploadImgResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgResp, url_),
  };
  UploadImgResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadImgResp_descriptor_,
      UploadImgResp::default_instance_,
      UploadImgResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadImgResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadImgResp));
  UploadNewsReq_descriptor_ = file->message_type(79);
  static const int UploadNewsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsReq, articles_),
  };
  UploadNewsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadNewsReq_descriptor_,
      UploadNewsReq::default_instance_,
      UploadNewsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadNewsReq));
  UploadNewsResp_descriptor_ = file->message_type(80);
  static const int UploadNewsResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, created_at_),
  };
  UploadNewsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadNewsResp_descriptor_,
      UploadNewsResp::default_instance_,
      UploadNewsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadNewsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadNewsResp));
  UploadMediaReq_descriptor_ = file->message_type(81);
  static const int UploadMediaReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaReq, media_),
  };
  UploadMediaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadMediaReq_descriptor_,
      UploadMediaReq::default_instance_,
      UploadMediaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadMediaReq));
  UploadMediaResp_descriptor_ = file->message_type(82);
  static const int UploadMediaResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, created_at_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, thumb_media_id_),
  };
  UploadMediaResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadMediaResp_descriptor_,
      UploadMediaResp::default_instance_,
      UploadMediaResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadMediaResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadMediaResp));
  GetMediaReq_descriptor_ = file->message_type(83);
  static const int GetMediaReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaReq, media_id_),
  };
  GetMediaReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMediaReq_descriptor_,
      GetMediaReq::default_instance_,
      GetMediaReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMediaReq));
  GetMediaResp_descriptor_ = file->message_type(84);
  static const int GetMediaResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaResp, media_),
  };
  GetMediaResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMediaResp_descriptor_,
      GetMediaResp::default_instance_,
      GetMediaResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMediaResp));
  MaterialVideoDescription_descriptor_ = file->message_type(85);
  static const int MaterialVideoDescription_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialVideoDescription, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialVideoDescription, introduction_),
  };
  MaterialVideoDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialVideoDescription_descriptor_,
      MaterialVideoDescription::default_instance_,
      MaterialVideoDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialVideoDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialVideoDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialVideoDescription));
  AddNewsMaterialReq_descriptor_ = file->message_type(86);
  static const int AddNewsMaterialReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialReq, articles_),
  };
  AddNewsMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewsMaterialReq_descriptor_,
      AddNewsMaterialReq::default_instance_,
      AddNewsMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewsMaterialReq));
  AddNewsMaterialResp_descriptor_ = file->message_type(87);
  static const int AddNewsMaterialResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialResp, media_id_),
  };
  AddNewsMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewsMaterialResp_descriptor_,
      AddNewsMaterialResp::default_instance_,
      AddNewsMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewsMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewsMaterialResp));
  AddMaterialReq_descriptor_ = file->message_type(88);
  static const int AddMaterialReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialReq, media_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialReq, description_),
  };
  AddMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMaterialReq_descriptor_,
      AddMaterialReq::default_instance_,
      AddMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMaterialReq));
  AddMaterialResp_descriptor_ = file->message_type(89);
  static const int AddMaterialResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialResp, media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialResp, url_),
  };
  AddMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMaterialResp_descriptor_,
      AddMaterialResp::default_instance_,
      AddMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMaterialResp));
  GetMaterialReq_descriptor_ = file->message_type(90);
  static const int GetMaterialReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialReq, media_id_),
  };
  GetMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMaterialReq_descriptor_,
      GetMaterialReq::default_instance_,
      GetMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMaterialReq));
  GetMaterialResp_descriptor_ = file->message_type(91);
  static const int GetMaterialResp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, news_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, down_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, media_),
  };
  GetMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMaterialResp_descriptor_,
      GetMaterialResp::default_instance_,
      GetMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMaterialResp));
  DelMaterialReq_descriptor_ = file->message_type(92);
  static const int DelMaterialReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialReq, media_id_),
  };
  DelMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelMaterialReq_descriptor_,
      DelMaterialReq::default_instance_,
      DelMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelMaterialReq));
  DelMaterialResp_descriptor_ = file->message_type(93);
  static const int DelMaterialResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialResp, errmsg_),
  };
  DelMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelMaterialResp_descriptor_,
      DelMaterialResp::default_instance_,
      DelMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelMaterialResp));
  UpdateNewsReq_descriptor_ = file->message_type(94);
  static const int UpdateNewsReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsReq, media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsReq, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsReq, articles_),
  };
  UpdateNewsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateNewsReq_descriptor_,
      UpdateNewsReq::default_instance_,
      UpdateNewsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateNewsReq));
  UpdateNewsResp_descriptor_ = file->message_type(95);
  static const int UpdateNewsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsResp, errmsg_),
  };
  UpdateNewsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateNewsResp_descriptor_,
      UpdateNewsResp::default_instance_,
      UpdateNewsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateNewsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateNewsResp));
  GetMaterialCountReq_descriptor_ = file->message_type(96);
  static const int GetMaterialCountReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountReq, access_token_),
  };
  GetMaterialCountReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMaterialCountReq_descriptor_,
      GetMaterialCountReq::default_instance_,
      GetMaterialCountReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMaterialCountReq));
  GetMaterialCountResp_descriptor_ = file->message_type(97);
  static const int GetMaterialCountResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, voice_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, video_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, image_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, news_count_),
  };
  GetMaterialCountResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetMaterialCountResp_descriptor_,
      GetMaterialCountResp::default_instance_,
      GetMaterialCountResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMaterialCountResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetMaterialCountResp));
  BatchGetMaterialReq_descriptor_ = file->message_type(98);
  static const int BatchGetMaterialReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialReq, count_),
  };
  BatchGetMaterialReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetMaterialReq_descriptor_,
      BatchGetMaterialReq::default_instance_,
      BatchGetMaterialReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetMaterialReq));
  MaterialItem_descriptor_ = file->message_type(99);
  static const int MaterialItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, media_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, bind_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, url_),
  };
  MaterialItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaterialItem_descriptor_,
      MaterialItem::default_instance_,
      MaterialItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaterialItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaterialItem));
  BatchGetMaterialResp_descriptor_ = file->message_type(100);
  static const int BatchGetMaterialResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, item_count_),
  };
  BatchGetMaterialResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetMaterialResp_descriptor_,
      BatchGetMaterialResp::default_instance_,
      BatchGetMaterialResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMaterialResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetMaterialResp));
  Tag_descriptor_ = file->message_type(101);
  static const int Tag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, count_),
  };
  Tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tag_descriptor_,
      Tag::default_instance_,
      Tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tag));
  CreateTagsReq_descriptor_ = file->message_type(102);
  static const int CreateTagsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsReq, tag_),
  };
  CreateTagsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTagsReq_descriptor_,
      CreateTagsReq::default_instance_,
      CreateTagsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTagsReq));
  CreateTagsResp_descriptor_ = file->message_type(103);
  static const int CreateTagsResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsResp, tag_),
  };
  CreateTagsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTagsResp_descriptor_,
      CreateTagsResp::default_instance_,
      CreateTagsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTagsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTagsResp));
  GetTagsReq_descriptor_ = file->message_type(104);
  static const int GetTagsReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsReq, access_token_),
  };
  GetTagsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagsReq_descriptor_,
      GetTagsReq::default_instance_,
      GetTagsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagsReq));
  GetTagsResp_descriptor_ = file->message_type(105);
  static const int GetTagsResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsResp, tags_),
  };
  GetTagsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagsResp_descriptor_,
      GetTagsResp::default_instance_,
      GetTagsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagsResp));
  UpdateTagsReq_descriptor_ = file->message_type(106);
  static const int UpdateTagsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsReq, tag_),
  };
  UpdateTagsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTagsReq_descriptor_,
      UpdateTagsReq::default_instance_,
      UpdateTagsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTagsReq));
  UpdateTagsResp_descriptor_ = file->message_type(107);
  static const int UpdateTagsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsResp, errmsg_),
  };
  UpdateTagsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTagsResp_descriptor_,
      UpdateTagsResp::default_instance_,
      UpdateTagsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTagsResp));
  UpdateTagsMembersReq_descriptor_ = file->message_type(108);
  static const int UpdateTagsMembersReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersReq, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersReq, to_tagid_),
  };
  UpdateTagsMembersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTagsMembersReq_descriptor_,
      UpdateTagsMembersReq::default_instance_,
      UpdateTagsMembersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTagsMembersReq));
  UpdateTagsMembersResp_descriptor_ = file->message_type(109);
  static const int UpdateTagsMembersResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersResp, errmsg_),
  };
  UpdateTagsMembersResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTagsMembersResp_descriptor_,
      UpdateTagsMembersResp::default_instance_,
      UpdateTagsMembersResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTagsMembersResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTagsMembersResp));
  BatchUpdateTagsMembersReq_descriptor_ = file->message_type(110);
  static const int BatchUpdateTagsMembersReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersReq, openid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersReq, to_tagid_),
  };
  BatchUpdateTagsMembersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchUpdateTagsMembersReq_descriptor_,
      BatchUpdateTagsMembersReq::default_instance_,
      BatchUpdateTagsMembersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchUpdateTagsMembersReq));
  BatchUpdateTagsMembersResp_descriptor_ = file->message_type(111);
  static const int BatchUpdateTagsMembersResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersResp, errmsg_),
  };
  BatchUpdateTagsMembersResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchUpdateTagsMembersResp_descriptor_,
      BatchUpdateTagsMembersResp::default_instance_,
      BatchUpdateTagsMembersResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUpdateTagsMembersResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchUpdateTagsMembersResp));
  DeleteTagsReq_descriptor_ = file->message_type(112);
  static const int DeleteTagsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsReq, tag_),
  };
  DeleteTagsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTagsReq_descriptor_,
      DeleteTagsReq::default_instance_,
      DeleteTagsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTagsReq));
  DeleteTagsResp_descriptor_ = file->message_type(113);
  static const int DeleteTagsResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsResp, errmsg_),
  };
  DeleteTagsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteTagsResp_descriptor_,
      DeleteTagsResp::default_instance_,
      DeleteTagsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteTagsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteTagsResp));
  TagUserData_descriptor_ = file->message_type(114);
  static const int TagUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagUserData, openid_),
  };
  TagUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TagUserData_descriptor_,
      TagUserData::default_instance_,
      TagUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TagUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TagUserData));
  GetTagUserReq_descriptor_ = file->message_type(115);
  static const int GetTagUserReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserReq, tagid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserReq, next_openid_),
  };
  GetTagUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagUserReq_descriptor_,
      GetTagUserReq::default_instance_,
      GetTagUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagUserReq));
  GetTagUserResp_descriptor_ = file->message_type(116);
  static const int GetTagUserResp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, next_openid_),
  };
  GetTagUserResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagUserResp_descriptor_,
      GetTagUserResp::default_instance_,
      GetTagUserResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagUserResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagUserResp));
  BatchTaggingMembersReq_descriptor_ = file->message_type(117);
  static const int BatchTaggingMembersReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersReq, openid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersReq, tagid_),
  };
  BatchTaggingMembersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchTaggingMembersReq_descriptor_,
      BatchTaggingMembersReq::default_instance_,
      BatchTaggingMembersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchTaggingMembersReq));
  BatchTaggingMembersResp_descriptor_ = file->message_type(118);
  static const int BatchTaggingMembersResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersResp, errmsg_),
  };
  BatchTaggingMembersResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchTaggingMembersResp_descriptor_,
      BatchTaggingMembersResp::default_instance_,
      BatchTaggingMembersResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchTaggingMembersResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchTaggingMembersResp));
  BatchUnTaggingMembersReq_descriptor_ = file->message_type(119);
  static const int BatchUnTaggingMembersReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersReq, openid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersReq, tagid_),
  };
  BatchUnTaggingMembersReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchUnTaggingMembersReq_descriptor_,
      BatchUnTaggingMembersReq::default_instance_,
      BatchUnTaggingMembersReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchUnTaggingMembersReq));
  BatchUnTaggingMembersResp_descriptor_ = file->message_type(120);
  static const int BatchUnTaggingMembersResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersResp, errmsg_),
  };
  BatchUnTaggingMembersResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchUnTaggingMembersResp_descriptor_,
      BatchUnTaggingMembersResp::default_instance_,
      BatchUnTaggingMembersResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchUnTaggingMembersResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchUnTaggingMembersResp));
  GetTagsIdListReq_descriptor_ = file->message_type(121);
  static const int GetTagsIdListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListReq, openid_),
  };
  GetTagsIdListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagsIdListReq_descriptor_,
      GetTagsIdListReq::default_instance_,
      GetTagsIdListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagsIdListReq));
  GetTagsIdListResp_descriptor_ = file->message_type(122);
  static const int GetTagsIdListResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListResp, tagid_list_),
  };
  GetTagsIdListResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTagsIdListResp_descriptor_,
      GetTagsIdListResp::default_instance_,
      GetTagsIdListResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTagsIdListResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTagsIdListResp));
  UpdateUserInfoRemarkReq_descriptor_ = file->message_type(123);
  static const int UpdateUserInfoRemarkReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkReq, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkReq, remark_),
  };
  UpdateUserInfoRemarkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfoRemarkReq_descriptor_,
      UpdateUserInfoRemarkReq::default_instance_,
      UpdateUserInfoRemarkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfoRemarkReq));
  UpdateUserInfoRemarkResp_descriptor_ = file->message_type(124);
  static const int UpdateUserInfoRemarkResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkResp, errmsg_),
  };
  UpdateUserInfoRemarkResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserInfoRemarkResp_descriptor_,
      UpdateUserInfoRemarkResp::default_instance_,
      UpdateUserInfoRemarkResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserInfoRemarkResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserInfoRemarkResp));
  UserInfoReq_descriptor_ = file->message_type(125);
  static const int UserInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, lang_),
  };
  UserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoReq_descriptor_,
      UserInfoReq::default_instance_,
      UserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoReq));
  UserInfoResp_descriptor_ = file->message_type(126);
  static const int UserInfoResp_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, headimgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, subscribe_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, tagid_list_),
  };
  UserInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoResp_descriptor_,
      UserInfoResp::default_instance_,
      UserInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoResp));
  BatchGetUserItem_descriptor_ = file->message_type(127);
  static const int BatchGetUserItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserItem, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserItem, lang_),
  };
  BatchGetUserItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetUserItem_descriptor_,
      BatchGetUserItem::default_instance_,
      BatchGetUserItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetUserItem));
  BatchGetUserInfoReq_descriptor_ = file->message_type(128);
  static const int BatchGetUserInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoReq, user_list_),
  };
  BatchGetUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetUserInfoReq_descriptor_,
      BatchGetUserInfoReq::default_instance_,
      BatchGetUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetUserInfoReq));
  UserInfoItem_descriptor_ = file->message_type(129);
  static const int UserInfoItem_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, headimgurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, subscribe_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, remark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, tagid_list_),
  };
  UserInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoItem_descriptor_,
      UserInfoItem::default_instance_,
      UserInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoItem));
  BatchGetUserInfoResp_descriptor_ = file->message_type(130);
  static const int BatchGetUserInfoResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoResp, user_info_list_),
  };
  BatchGetUserInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetUserInfoResp_descriptor_,
      BatchGetUserInfoResp::default_instance_,
      BatchGetUserInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetUserInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetUserInfoResp));
  GetUserReq_descriptor_ = file->message_type(131);
  static const int GetUserReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserReq, access_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserReq, next_openid_),
  };
  GetUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserReq_descriptor_,
      GetUserReq::default_instance_,
      GetUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserReq));
  UserList_descriptor_ = file->message_type(132);
  static const int UserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, openid_),
  };
  UserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserList_descriptor_,
      UserList::default_instance_,
      UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserList));
  GetUserResp_descriptor_ = file->message_type(133);
  static const int GetUserResp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, next_openid_),
  };
  GetUserResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserResp_descriptor_,
      GetUserResp::default_instance_,
      GetUserResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserResp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mpmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestMessage_descriptor_, &TestMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenReq_descriptor_, &TokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenResp_descriptor_, &TokenResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCallbackIPReq_descriptor_, &GetCallbackIPReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCallbackIPResp_descriptor_, &GetCallbackIPResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuButton_descriptor_, &MenuButton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuMatchRule_descriptor_, &MenuMatchRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Menu_descriptor_, &Menu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMenuReq_descriptor_, &CreateMenuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMenuResp_descriptor_, &CreateMenuResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMenuReq_descriptor_, &GetMenuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMenuResp_descriptor_, &GetMenuResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteMenuReq_descriptor_, &DeleteMenuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteMenuResp_descriptor_, &DeleteMenuResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddConditionalMenuReq_descriptor_, &AddConditionalMenuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddConditionalMenuResp_descriptor_, &AddConditionalMenuResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelConditionalMenuReq_descriptor_, &DelConditionalMenuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelConditionalMenuResp_descriptor_, &DelConditionalMenuResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TryMatchMenuReq_descriptor_, &TryMatchMenuReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TryMatchMenuResp_descriptor_, &TryMatchMenuResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurrentSelfMenuInfoReq_descriptor_, &GetCurrentSelfMenuInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespNews_descriptor_, &RespNews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespNewsList_descriptor_, &RespNewsList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentSelfMenuButton_descriptor_, &CurrentSelfMenuButton::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentSelfMenuButtonList_descriptor_, &CurrentSelfMenuButtonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentSelfMenu_descriptor_, &CurrentSelfMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurrentSelfMenuInfoResp_descriptor_, &GetCurrentSelfMenuInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyItem_descriptor_, &ReplyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyWordItem_descriptor_, &KeyWordItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoReplyRule_descriptor_, &AutoReplyRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoReplyRuleList_descriptor_, &AutoReplyRuleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurrentAutoReplyInfoReq_descriptor_, &GetCurrentAutoReplyInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCurrentAutoReplyInfoResp_descriptor_, &GetCurrentAutoReplyInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Text_descriptor_, &Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Image_descriptor_, &Image::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Voice_descriptor_, &Voice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Video_descriptor_, &Video::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Link_descriptor_, &Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArticlesItem_descriptor_, &ArticlesItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewsMsg_descriptor_, &NewsMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Music_descriptor_, &Music::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpNewsMsg_descriptor_, &MpNewsMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpVideo_descriptor_, &MpVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WxCard_descriptor_, &WxCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomServiceInfo_descriptor_, &CustomServiceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendCustomMessageReq_descriptor_, &SendCustomMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendCustomMessageResp_descriptor_, &SendCustomMessageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendFilter_descriptor_, &SendFilter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassSendAllReq_descriptor_, &MassSendAllReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassSendAllResp_descriptor_, &MassSendAllResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassSendReq_descriptor_, &MassSendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassSendResp_descriptor_, &MassSendResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassDeleteReq_descriptor_, &MassDeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassDeleteResp_descriptor_, &MassDeleteResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassPreviewReq_descriptor_, &MassPreviewReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassPreviewResp_descriptor_, &MassPreviewResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassGetReq_descriptor_, &MassGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MassGetResp_descriptor_, &MassGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetIndustryReq_descriptor_, &SetIndustryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetIndustryResp_descriptor_, &SetIndustryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIndustryReq_descriptor_, &GetIndustryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Industry_descriptor_, &Industry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIndustryResp_descriptor_, &GetIndustryResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTemplateReq_descriptor_, &AddTemplateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTemplateResp_descriptor_, &AddTemplateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllPrivateTemplateReq_descriptor_, &GetAllPrivateTemplateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateTemplate_descriptor_, &PrivateTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllPrivateTemplateResp_descriptor_, &GetAllPrivateTemplateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelPrivateTemplateReq_descriptor_, &DelPrivateTemplateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelPrivateTemplateResp_descriptor_, &DelPrivateTemplateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Json_descriptor_, &Json::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendTemplateMessageReq_descriptor_, &SendTemplateMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendTemplateMessageResp_descriptor_, &SendTemplateMessageResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MediaFile_descriptor_, &MediaFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewsItem_descriptor_, &NewsItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewsInfo_descriptor_, &NewsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadImgReq_descriptor_, &UploadImgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadImgResp_descriptor_, &UploadImgResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadNewsReq_descriptor_, &UploadNewsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadNewsResp_descriptor_, &UploadNewsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadMediaReq_descriptor_, &UploadMediaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadMediaResp_descriptor_, &UploadMediaResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMediaReq_descriptor_, &GetMediaReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMediaResp_descriptor_, &GetMediaResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialVideoDescription_descriptor_, &MaterialVideoDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewsMaterialReq_descriptor_, &AddNewsMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewsMaterialResp_descriptor_, &AddNewsMaterialResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMaterialReq_descriptor_, &AddMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMaterialResp_descriptor_, &AddMaterialResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMaterialReq_descriptor_, &GetMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMaterialResp_descriptor_, &GetMaterialResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelMaterialReq_descriptor_, &DelMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelMaterialResp_descriptor_, &DelMaterialResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateNewsReq_descriptor_, &UpdateNewsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateNewsResp_descriptor_, &UpdateNewsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMaterialCountReq_descriptor_, &GetMaterialCountReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetMaterialCountResp_descriptor_, &GetMaterialCountResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetMaterialReq_descriptor_, &BatchGetMaterialReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaterialItem_descriptor_, &MaterialItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetMaterialResp_descriptor_, &BatchGetMaterialResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tag_descriptor_, &Tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTagsReq_descriptor_, &CreateTagsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTagsResp_descriptor_, &CreateTagsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagsReq_descriptor_, &GetTagsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagsResp_descriptor_, &GetTagsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTagsReq_descriptor_, &UpdateTagsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTagsResp_descriptor_, &UpdateTagsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTagsMembersReq_descriptor_, &UpdateTagsMembersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTagsMembersResp_descriptor_, &UpdateTagsMembersResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchUpdateTagsMembersReq_descriptor_, &BatchUpdateTagsMembersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchUpdateTagsMembersResp_descriptor_, &BatchUpdateTagsMembersResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTagsReq_descriptor_, &DeleteTagsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteTagsResp_descriptor_, &DeleteTagsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TagUserData_descriptor_, &TagUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagUserReq_descriptor_, &GetTagUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagUserResp_descriptor_, &GetTagUserResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchTaggingMembersReq_descriptor_, &BatchTaggingMembersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchTaggingMembersResp_descriptor_, &BatchTaggingMembersResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchUnTaggingMembersReq_descriptor_, &BatchUnTaggingMembersReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchUnTaggingMembersResp_descriptor_, &BatchUnTaggingMembersResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagsIdListReq_descriptor_, &GetTagsIdListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTagsIdListResp_descriptor_, &GetTagsIdListResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfoRemarkReq_descriptor_, &UpdateUserInfoRemarkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserInfoRemarkResp_descriptor_, &UpdateUserInfoRemarkResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoReq_descriptor_, &UserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoResp_descriptor_, &UserInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetUserItem_descriptor_, &BatchGetUserItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetUserInfoReq_descriptor_, &BatchGetUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoItem_descriptor_, &UserInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetUserInfoResp_descriptor_, &BatchGetUserInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserReq_descriptor_, &GetUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserList_descriptor_, &UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserResp_descriptor_, &GetUserResp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mpmsg_2eproto() {
  delete TestMessage::default_instance_;
  delete TestMessage_reflection_;
  delete TokenReq::default_instance_;
  delete TokenReq_reflection_;
  delete TokenReq::_default_grant_type_;
  delete TokenResp::default_instance_;
  delete TokenResp_reflection_;
  delete GetCallbackIPReq::default_instance_;
  delete GetCallbackIPReq_reflection_;
  delete GetCallbackIPResp::default_instance_;
  delete GetCallbackIPResp_reflection_;
  delete MenuButton::default_instance_;
  delete MenuButton_reflection_;
  delete MenuMatchRule::default_instance_;
  delete MenuMatchRule_reflection_;
  delete Menu::default_instance_;
  delete Menu_reflection_;
  delete CreateMenuReq::default_instance_;
  delete CreateMenuReq_reflection_;
  delete CreateMenuResp::default_instance_;
  delete CreateMenuResp_reflection_;
  delete GetMenuReq::default_instance_;
  delete GetMenuReq_reflection_;
  delete GetMenuResp::default_instance_;
  delete GetMenuResp_reflection_;
  delete DeleteMenuReq::default_instance_;
  delete DeleteMenuReq_reflection_;
  delete DeleteMenuResp::default_instance_;
  delete DeleteMenuResp_reflection_;
  delete AddConditionalMenuReq::default_instance_;
  delete AddConditionalMenuReq_reflection_;
  delete AddConditionalMenuResp::default_instance_;
  delete AddConditionalMenuResp_reflection_;
  delete DelConditionalMenuReq::default_instance_;
  delete DelConditionalMenuReq_reflection_;
  delete DelConditionalMenuResp::default_instance_;
  delete DelConditionalMenuResp_reflection_;
  delete TryMatchMenuReq::default_instance_;
  delete TryMatchMenuReq_reflection_;
  delete TryMatchMenuResp::default_instance_;
  delete TryMatchMenuResp_reflection_;
  delete GetCurrentSelfMenuInfoReq::default_instance_;
  delete GetCurrentSelfMenuInfoReq_reflection_;
  delete RespNews::default_instance_;
  delete RespNews_reflection_;
  delete RespNewsList::default_instance_;
  delete RespNewsList_reflection_;
  delete CurrentSelfMenuButton::default_instance_;
  delete CurrentSelfMenuButton_reflection_;
  delete CurrentSelfMenuButtonList::default_instance_;
  delete CurrentSelfMenuButtonList_reflection_;
  delete CurrentSelfMenu::default_instance_;
  delete CurrentSelfMenu_reflection_;
  delete GetCurrentSelfMenuInfoResp::default_instance_;
  delete GetCurrentSelfMenuInfoResp_reflection_;
  delete ReplyItem::default_instance_;
  delete ReplyItem_reflection_;
  delete KeyWordItem::default_instance_;
  delete KeyWordItem_reflection_;
  delete AutoReplyRule::default_instance_;
  delete AutoReplyRule_reflection_;
  delete AutoReplyRuleList::default_instance_;
  delete AutoReplyRuleList_reflection_;
  delete GetCurrentAutoReplyInfoReq::default_instance_;
  delete GetCurrentAutoReplyInfoReq_reflection_;
  delete GetCurrentAutoReplyInfoResp::default_instance_;
  delete GetCurrentAutoReplyInfoResp_reflection_;
  delete Text::default_instance_;
  delete Text_reflection_;
  delete Image::default_instance_;
  delete Image_reflection_;
  delete Voice::default_instance_;
  delete Voice_reflection_;
  delete Video::default_instance_;
  delete Video_reflection_;
  delete Link::default_instance_;
  delete Link_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete ArticlesItem::default_instance_;
  delete ArticlesItem_reflection_;
  delete NewsMsg::default_instance_;
  delete NewsMsg_reflection_;
  delete Music::default_instance_;
  delete Music_reflection_;
  delete MpNewsMsg::default_instance_;
  delete MpNewsMsg_reflection_;
  delete MpVideo::default_instance_;
  delete MpVideo_reflection_;
  delete WxCard::default_instance_;
  delete WxCard_reflection_;
  delete CustomServiceInfo::default_instance_;
  delete CustomServiceInfo_reflection_;
  delete SendCustomMessageReq::default_instance_;
  delete SendCustomMessageReq_reflection_;
  delete SendCustomMessageResp::default_instance_;
  delete SendCustomMessageResp_reflection_;
  delete SendFilter::default_instance_;
  delete SendFilter_reflection_;
  delete MassSendAllReq::default_instance_;
  delete MassSendAllReq_reflection_;
  delete MassSendAllResp::default_instance_;
  delete MassSendAllResp_reflection_;
  delete MassSendReq::default_instance_;
  delete MassSendReq_reflection_;
  delete MassSendResp::default_instance_;
  delete MassSendResp_reflection_;
  delete MassDeleteReq::default_instance_;
  delete MassDeleteReq_reflection_;
  delete MassDeleteResp::default_instance_;
  delete MassDeleteResp_reflection_;
  delete MassPreviewReq::default_instance_;
  delete MassPreviewReq_reflection_;
  delete MassPreviewResp::default_instance_;
  delete MassPreviewResp_reflection_;
  delete MassGetReq::default_instance_;
  delete MassGetReq_reflection_;
  delete MassGetResp::default_instance_;
  delete MassGetResp_reflection_;
  delete SetIndustryReq::default_instance_;
  delete SetIndustryReq_reflection_;
  delete SetIndustryResp::default_instance_;
  delete SetIndustryResp_reflection_;
  delete GetIndustryReq::default_instance_;
  delete GetIndustryReq_reflection_;
  delete Industry::default_instance_;
  delete Industry_reflection_;
  delete GetIndustryResp::default_instance_;
  delete GetIndustryResp_reflection_;
  delete AddTemplateReq::default_instance_;
  delete AddTemplateReq_reflection_;
  delete AddTemplateResp::default_instance_;
  delete AddTemplateResp_reflection_;
  delete GetAllPrivateTemplateReq::default_instance_;
  delete GetAllPrivateTemplateReq_reflection_;
  delete PrivateTemplate::default_instance_;
  delete PrivateTemplate_reflection_;
  delete GetAllPrivateTemplateResp::default_instance_;
  delete GetAllPrivateTemplateResp_reflection_;
  delete DelPrivateTemplateReq::default_instance_;
  delete DelPrivateTemplateReq_reflection_;
  delete DelPrivateTemplateResp::default_instance_;
  delete DelPrivateTemplateResp_reflection_;
  delete Json::default_instance_;
  delete Json_reflection_;
  delete SendTemplateMessageReq::default_instance_;
  delete SendTemplateMessageReq_reflection_;
  delete SendTemplateMessageResp::default_instance_;
  delete SendTemplateMessageResp_reflection_;
  delete MediaFile::default_instance_;
  delete MediaFile_reflection_;
  delete NewsItem::default_instance_;
  delete NewsItem_reflection_;
  delete NewsInfo::default_instance_;
  delete NewsInfo_reflection_;
  delete UploadImgReq::default_instance_;
  delete UploadImgReq_reflection_;
  delete UploadImgResp::default_instance_;
  delete UploadImgResp_reflection_;
  delete UploadNewsReq::default_instance_;
  delete UploadNewsReq_reflection_;
  delete UploadNewsResp::default_instance_;
  delete UploadNewsResp_reflection_;
  delete UploadMediaReq::default_instance_;
  delete UploadMediaReq_reflection_;
  delete UploadMediaResp::default_instance_;
  delete UploadMediaResp_reflection_;
  delete GetMediaReq::default_instance_;
  delete GetMediaReq_reflection_;
  delete GetMediaResp::default_instance_;
  delete GetMediaResp_reflection_;
  delete MaterialVideoDescription::default_instance_;
  delete MaterialVideoDescription_reflection_;
  delete AddNewsMaterialReq::default_instance_;
  delete AddNewsMaterialReq_reflection_;
  delete AddNewsMaterialResp::default_instance_;
  delete AddNewsMaterialResp_reflection_;
  delete AddMaterialReq::default_instance_;
  delete AddMaterialReq_reflection_;
  delete AddMaterialResp::default_instance_;
  delete AddMaterialResp_reflection_;
  delete GetMaterialReq::default_instance_;
  delete GetMaterialReq_reflection_;
  delete GetMaterialResp::default_instance_;
  delete GetMaterialResp_reflection_;
  delete DelMaterialReq::default_instance_;
  delete DelMaterialReq_reflection_;
  delete DelMaterialResp::default_instance_;
  delete DelMaterialResp_reflection_;
  delete UpdateNewsReq::default_instance_;
  delete UpdateNewsReq_reflection_;
  delete UpdateNewsResp::default_instance_;
  delete UpdateNewsResp_reflection_;
  delete GetMaterialCountReq::default_instance_;
  delete GetMaterialCountReq_reflection_;
  delete GetMaterialCountResp::default_instance_;
  delete GetMaterialCountResp_reflection_;
  delete BatchGetMaterialReq::default_instance_;
  delete BatchGetMaterialReq_reflection_;
  delete MaterialItem::default_instance_;
  delete MaterialItem_reflection_;
  delete BatchGetMaterialResp::default_instance_;
  delete BatchGetMaterialResp_reflection_;
  delete Tag::default_instance_;
  delete Tag_reflection_;
  delete CreateTagsReq::default_instance_;
  delete CreateTagsReq_reflection_;
  delete CreateTagsResp::default_instance_;
  delete CreateTagsResp_reflection_;
  delete GetTagsReq::default_instance_;
  delete GetTagsReq_reflection_;
  delete GetTagsResp::default_instance_;
  delete GetTagsResp_reflection_;
  delete UpdateTagsReq::default_instance_;
  delete UpdateTagsReq_reflection_;
  delete UpdateTagsResp::default_instance_;
  delete UpdateTagsResp_reflection_;
  delete UpdateTagsMembersReq::default_instance_;
  delete UpdateTagsMembersReq_reflection_;
  delete UpdateTagsMembersResp::default_instance_;
  delete UpdateTagsMembersResp_reflection_;
  delete BatchUpdateTagsMembersReq::default_instance_;
  delete BatchUpdateTagsMembersReq_reflection_;
  delete BatchUpdateTagsMembersResp::default_instance_;
  delete BatchUpdateTagsMembersResp_reflection_;
  delete DeleteTagsReq::default_instance_;
  delete DeleteTagsReq_reflection_;
  delete DeleteTagsResp::default_instance_;
  delete DeleteTagsResp_reflection_;
  delete TagUserData::default_instance_;
  delete TagUserData_reflection_;
  delete GetTagUserReq::default_instance_;
  delete GetTagUserReq_reflection_;
  delete GetTagUserResp::default_instance_;
  delete GetTagUserResp_reflection_;
  delete BatchTaggingMembersReq::default_instance_;
  delete BatchTaggingMembersReq_reflection_;
  delete BatchTaggingMembersResp::default_instance_;
  delete BatchTaggingMembersResp_reflection_;
  delete BatchUnTaggingMembersReq::default_instance_;
  delete BatchUnTaggingMembersReq_reflection_;
  delete BatchUnTaggingMembersResp::default_instance_;
  delete BatchUnTaggingMembersResp_reflection_;
  delete GetTagsIdListReq::default_instance_;
  delete GetTagsIdListReq_reflection_;
  delete GetTagsIdListResp::default_instance_;
  delete GetTagsIdListResp_reflection_;
  delete UpdateUserInfoRemarkReq::default_instance_;
  delete UpdateUserInfoRemarkReq_reflection_;
  delete UpdateUserInfoRemarkResp::default_instance_;
  delete UpdateUserInfoRemarkResp_reflection_;
  delete UserInfoReq::default_instance_;
  delete UserInfoReq_reflection_;
  delete UserInfoResp::default_instance_;
  delete UserInfoResp_reflection_;
  delete BatchGetUserItem::default_instance_;
  delete BatchGetUserItem_reflection_;
  delete BatchGetUserInfoReq::default_instance_;
  delete BatchGetUserInfoReq_reflection_;
  delete UserInfoItem::default_instance_;
  delete UserInfoItem_reflection_;
  delete BatchGetUserInfoResp::default_instance_;
  delete BatchGetUserInfoResp_reflection_;
  delete GetUserReq::default_instance_;
  delete GetUserReq_reflection_;
  delete UserList::default_instance_;
  delete UserList_reflection_;
  delete GetUserResp::default_instance_;
  delete GetUserResp_reflection_;
}

void protobuf_AddDesc_mpmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mpmsg.proto\022\006mpcomm\"r\n\013TestMessage\022\016\n\006"
    "field1\030\001 \001(\003\022\016\n\006field2\030\002 \001(\004\022\016\n\006field3\030\003"
    " \001(\t\022\016\n\006field4\030\004 \001(\t\022#\n\006field5\030\005 \001(\0132\023.m"
    "pcomm.TestMessage\"P\n\010TokenReq\022%\n\ngrant_t"
    "ype\030\001 \001(\t:\021client_credential\022\r\n\005appid\030\002 "
    "\001(\t\022\016\n\006secret\030\003 \001(\t\"V\n\tTokenResp\022\017\n\007errc"
    "ode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\024\n\014access_toke"
    "n\030\003 \001(\t\022\022\n\nexpires_in\030\004 \001(\004\"(\n\020GetCallba"
    "ckIPReq\022\024\n\014access_token\030\001 \001(\t\"E\n\021GetCall"
    "backIPResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 "
    "\001(\t\022\017\n\007ip_list\030\003 \003(\t\"|\n\nMenuButton\022\014\n\004ty"
    "pe\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003key\030\003 \001(\t\022\013\n\003u"
    "rl\030\004 \001(\t\022&\n\nsub_button\030\005 \003(\0132\022.mpcomm.Me"
    "nuButton\022\020\n\010media_id\030\006 \001(\t\"\237\001\n\rMenuMatch"
    "Rule\022\016\n\006tag_id\030\001 \001(\t\022\020\n\010group_id\030\010 \001(\t\022\013"
    "\n\003sex\030\002 \001(\t\022\034\n\024client_platform_type\030\003 \001("
    "\t\022\017\n\007country\030\004 \001(\t\022\020\n\010province\030\005 \001(\t\022\014\n\004"
    "city\030\006 \001(\t\022\020\n\010language\030\007 \001(\t\"d\n\004Menu\022\"\n\006"
    "button\030\001 \003(\0132\022.mpcomm.MenuButton\022(\n\tmatc"
    "hrule\030\002 \001(\0132\025.mpcomm.MenuMatchRule\022\016\n\006me"
    "nuid\030\003 \001(\004\"I\n\rCreateMenuReq\022\024\n\014access_to"
    "ken\030\001 \001(\t\022\"\n\006button\030\002 \003(\0132\022.mpcomm.MenuB"
    "utton\"1\n\016CreateMenuResp\022\017\n\007errcode\030\001 \001(\003"
    "\022\016\n\006errmsg\030\002 \001(\t\"\"\n\nGetMenuReq\022\024\n\014access"
    "_token\030\001 \001(\t\"q\n\013GetMenuResp\022\017\n\007errcode\030\001"
    " \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\032\n\004menu\030\003 \001(\0132\014.mpc"
    "omm.Menu\022%\n\017conditionalmenu\030\004 \003(\0132\014.mpco"
    "mm.Menu\"%\n\rDeleteMenuReq\022\024\n\014access_token"
    "\030\001 \001(\t\"1\n\016DeleteMenuResp\022\017\n\007errcode\030\001 \001("
    "\003\022\016\n\006errmsg\030\002 \001(\t\"{\n\025AddConditionalMenuR"
    "eq\022\024\n\014access_token\030\001 \001(\t\022\"\n\006button\030\002 \003(\013"
    "2\022.mpcomm.MenuButton\022(\n\tmatchrule\030\003 \001(\0132"
    "\025.mpcomm.MenuMatchRule\"I\n\026AddConditional"
    "MenuResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001("
    "\t\022\016\n\006menuid\030\003 \001(\004\"=\n\025DelConditionalMenuR"
    "eq\022\024\n\014access_token\030\001 \001(\t\022\016\n\006menuid\030\002 \001(\004"
    "\"9\n\026DelConditionalMenuResp\022\017\n\007errcode\030\001 "
    "\001(\003\022\016\n\006errmsg\030\002 \001(\t\"8\n\017TryMatchMenuReq\022\024"
    "\n\014access_token\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\"W\n"
    "\020TryMatchMenuResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006er"
    "rmsg\030\002 \001(\t\022\"\n\006button\030\003 \003(\0132\022.mpcomm.Menu"
    "Button\"1\n\031GetCurrentSelfMenuInfoReq\022\024\n\014a"
    "ccess_token\030\001 \001(\t\"\211\001\n\010RespNews\022\r\n\005title\030"
    "\001 \001(\t\022\016\n\006author\030\002 \001(\t\022\016\n\006digest\030\003 \001(\t\022\022\n"
    "\nshow_cover\030\004 \001(\004\022\021\n\tcover_url\030\005 \001(\t\022\023\n\013"
    "content_url\030\006 \001(\t\022\022\n\nsource_url\030\007 \001(\t\".\n"
    "\014RespNewsList\022\036\n\004list\030\001 \003(\0132\020.mpcomm.Res"
    "pNews\"\274\001\n\025CurrentSelfMenuButton\022\014\n\004type\030"
    "\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\013\n\003key\030\003 \001(\t\022\013\n\003url\030"
    "\004 \001(\t\022\r\n\005value\030\005 \001(\t\022\'\n\tnews_info\030\006 \001(\0132"
    "\024.mpcomm.RespNewsList\0225\n\nsub_button\030\007 \001("
    "\0132!.mpcomm.CurrentSelfMenuButtonList\"H\n\031"
    "CurrentSelfMenuButtonList\022+\n\004list\030\001 \003(\0132"
    "\035.mpcomm.CurrentSelfMenuButton\"@\n\017Curren"
    "tSelfMenu\022-\n\006button\030\001 \003(\0132\035.mpcomm.Curre"
    "ntSelfMenuButton\"\203\001\n\032GetCurrentSelfMenuI"
    "nfoResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t"
    "\022\024\n\014is_menu_open\030\003 \001(\004\022.\n\rselfmenu_info\030"
    "\004 \001(\0132\027.mpcomm.CurrentSelfMenu\"S\n\tReplyI"
    "tem\022\014\n\004type\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022\'\n\tne"
    "ws_info\030\003 \001(\0132\024.mpcomm.RespNewsList\"@\n\013K"
    "eyWordItem\022\014\n\004type\030\001 \001(\t\022\022\n\nmatch_mode\030\002"
    " \001(\t\022\017\n\007content\030\003 \001(\t\"\247\001\n\rAutoReplyRule\022"
    "\021\n\trule_name\030\001 \001(\t\022\023\n\013create_time\030\002 \001(\004\022"
    "\022\n\nreply_mode\030\003 \001(\t\022.\n\021keyword_list_info"
    "\030\004 \003(\0132\023.mpcomm.KeyWordItem\022*\n\017reply_lis"
    "t_info\030\005 \003(\0132\021.mpcomm.ReplyItem\"8\n\021AutoR"
    "eplyRuleList\022#\n\004list\030\001 \003(\0132\025.mpcomm.Auto"
    "ReplyRule\"2\n\032GetCurrentAutoReplyInfoReq\022"
    "\024\n\014access_token\030\001 \001(\t\"\247\002\n\033GetCurrentAuto"
    "ReplyInfoResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg"
    "\030\002 \001(\t\022 \n\030is_add_friend_reply_open\030\003 \001(\004"
    "\022\031\n\021is_autoreply_open\030\004 \001(\004\0224\n\031add_frien"
    "d_autoreply_info\030\005 \001(\0132\021.mpcomm.ReplyIte"
    "m\0229\n\036message_default_autoreply_info\030\006 \001("
    "\0132\021.mpcomm.ReplyItem\0229\n\026keyword_autorepl"
    "y_info\030\007 \001(\0132\031.mpcomm.AutoReplyRuleList\""
    "\027\n\004Text\022\017\n\007content\030\001 \001(\t\"\031\n\005Image\022\020\n\010med"
    "ia_id\030\001 \001(\t\"\031\n\005Voice\022\020\n\010media_id\030\001 \001(\t\"U"
    "\n\005Video\022\020\n\010media_id\030\001 \001(\t\022\026\n\016thumb_media"
    "_id\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\023\n\013description\030"
    "\004 \001(\t\"O\n\004Link\022\r\n\005title\030\001 \001(\t\022\023\n\013descript"
    "ion\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\026\n\016thumb_media_id"
    "\030\004 \001(\t\"\031\n\004Card\022\021\n\tweixin_id\030\001 \001(\t\"O\n\014Art"
    "iclesItem\022\r\n\005title\030\001 \001(\t\022\023\n\013description\030"
    "\002 \001(\t\022\016\n\006picurl\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\"I\n\007Ne"
    "wsMsg\022&\n\010articles\030\001 \003(\0132\024.mpcomm.Article"
    "sItem\022\026\n\016thumb_media_id\030\004 \001(\t\"i\n\005Music\022\r"
    "\n\005title\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\020\n\010mu"
    "sicurl\030\003 \001(\t\022\022\n\nhqmusicurl\030\004 \001(\t\022\026\n\016thum"
    "b_media_id\030\005 \001(\t\"\035\n\tMpNewsMsg\022\020\n\010media_i"
    "d\030\001 \001(\t\"\033\n\007MpVideo\022\020\n\010media_id\030\001 \001(\t\"+\n\006"
    "WxCard\022\017\n\007card_id\030\001 \001(\t\022\020\n\010card_ext\030\002 \001("
    "\t\"\'\n\021CustomServiceInfo\022\022\n\nkf_account\030\001 \001"
    "(\t\"\227\003\n\024SendCustomMessageReq\022\024\n\014access_to"
    "ken\030\001 \001(\t\022\017\n\007msgtype\030\002 \001(\t\022\016\n\006touser\030\003 \001"
    "(\t\022\032\n\004text\030\004 \001(\0132\014.mpcomm.Text\022\034\n\005image\030"
    "\005 \001(\0132\r.mpcomm.Image\022\034\n\005voice\030\006 \001(\0132\r.mp"
    "comm.Voice\022\034\n\005video\030\007 \001(\0132\r.mpcomm.Video"
    "\022\034\n\005music\030\010 \001(\0132\r.mpcomm.Music\022\035\n\004news\030\t"
    " \001(\0132\017.mpcomm.NewsMsg\022!\n\006mpnews\030\n \001(\0132\021."
    "mpcomm.MpNewsMsg\022\036\n\006wxcard\030\013 \001(\0132\016.mpcom"
    "m.WxCard\0220\n\rcustomservice\030\014 \001(\0132\031.mpcomm"
    ".CustomServiceInfo\022 \n\007mpvideo\030\r \001(\0132\017.mp"
    "comm.MpVideo\"8\n\025SendCustomMessageResp\022\017\n"
    "\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\"/\n\nSendFi"
    "lter\022\021\n\tis_to_all\030\001 \001(\010\022\016\n\006tag_id\030\002 \001(\004\""
    "\230\002\n\016MassSendAllReq\022\024\n\014access_token\030\001 \001(\t"
    "\022\"\n\006filter\030\002 \001(\0132\022.mpcomm.SendFilter\022\017\n\007"
    "msgtype\030\003 \001(\t\022\032\n\004text\030\004 \001(\0132\014.mpcomm.Tex"
    "t\022\034\n\005image\030\005 \001(\0132\r.mpcomm.Image\022\034\n\005voice"
    "\030\006 \001(\0132\r.mpcomm.Voice\022 \n\007mpvideo\030\007 \001(\0132\017"
    ".mpcomm.MpVideo\022!\n\006mpnews\030\010 \001(\0132\021.mpcomm"
    ".MpNewsMsg\022\036\n\006wxcard\030\t \001(\0132\016.mpcomm.WxCa"
    "rd\"W\n\017MassSendAllResp\022\017\n\007errcode\030\001 \001(\003\022\016"
    "\n\006errmsg\030\002 \001(\t\022\016\n\006msg_id\030\003 \001(\004\022\023\n\013msg_da"
    "ta_id\030\004 \001(\004\"\201\002\n\013MassSendReq\022\024\n\014access_to"
    "ken\030\001 \001(\t\022\016\n\006touser\030\002 \003(\t\022\017\n\007msgtype\030\003 \001"
    "(\t\022\032\n\004text\030\004 \001(\0132\014.mpcomm.Text\022\034\n\005image\030"
    "\005 \001(\0132\r.mpcomm.Image\022\034\n\005voice\030\006 \001(\0132\r.mp"
    "comm.Voice\022!\n\006mpnews\030\010 \001(\0132\021.mpcomm.MpNe"
    "wsMsg\022\036\n\006wxcard\030\t \001(\0132\016.mpcomm.WxCard\022 \n"
    "\007mpvideo\030\n \001(\0132\017.mpcomm.MpVideo\"T\n\014MassS"
    "endResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t"
    "\022\016\n\006msg_id\030\003 \001(\004\022\023\n\013msg_data_id\030\004 \001(\004\"5\n"
    "\rMassDeleteReq\022\024\n\014access_token\030\001 \001(\t\022\016\n\006"
    "msg_id\030\002 \001(\004\"A\n\016MassDeleteResp\022\017\n\007errcod"
    "e\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\016\n\006msg_id\030\003 \001(\004\""
    "\226\002\n\016MassPreviewReq\022\024\n\014access_token\030\001 \001(\t"
    "\022\016\n\006touser\030\002 \001(\t\022\020\n\010towxname\030\003 \001(\t\022\017\n\007ms"
    "gtype\030\004 \001(\t\022\032\n\004text\030\005 \001(\0132\014.mpcomm.Text\022"
    "\034\n\005image\030\006 \001(\0132\r.mpcomm.Image\022\034\n\005voice\030\007"
    " \001(\0132\r.mpcomm.Voice\022!\n\006mpnews\030\010 \001(\0132\021.mp"
    "comm.MpNewsMsg\022\036\n\006wxcard\030\t \001(\0132\016.mpcomm."
    "WxCard\022 \n\007mpvideo\030\n \001(\0132\017.mpcomm.MpVideo"
    "\"2\n\017MassPreviewResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006"
    "errmsg\030\002 \001(\t\"2\n\nMassGetReq\022\024\n\014access_tok"
    "en\030\001 \001(\t\022\016\n\006msg_id\030\002 \001(\004\"R\n\013MassGetResp\022"
    "\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\016\n\006msg_"
    "id\030\003 \001(\004\022\022\n\nmsg_status\030\004 \001(\t\"R\n\016SetIndus"
    "tryReq\022\024\n\014access_token\030\001 \001(\t\022\024\n\014industry"
    "_id1\030\002 \001(\t\022\024\n\014industry_id2\030\003 \001(\t\"2\n\017SetI"
    "ndustryResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002"
    " \001(\t\"&\n\016GetIndustryReq\022\024\n\014access_token\030\001"
    " \001(\t\"5\n\010Industry\022\023\n\013first_class\030\001 \001(\t\022\024\n"
    "\014second_class\030\002 \001(\t\"\214\001\n\017GetIndustryResp\022"
    "\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022*\n\020prim"
    "ary_industry\030\003 \001(\0132\020.mpcomm.Industry\022,\n\022"
    "secondary_industry\030\004 \001(\0132\020.mpcomm.Indust"
    "ry\"A\n\016AddTemplateReq\022\024\n\014access_token\030\001 \001"
    "(\t\022\031\n\021template_id_short\030\002 \001(\t\"G\n\017AddTemp"
    "lateResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001("
    "\t\022\023\n\013template_id\030\003 \001(\t\"0\n\030GetAllPrivateT"
    "emplateReq\022\024\n\014access_token\030\001 \001(\t\"\212\001\n\017Pri"
    "vateTemplate\022\023\n\013template_id\030\001 \001(\t\022\r\n\005tit"
    "le\030\002 \001(\t\022\030\n\020primary_industry\030\003 \001(\t\022\027\n\017de"
    "puty_industry\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022\017\n\007"
    "example\030\006 \001(\t\"l\n\031GetAllPrivateTemplateRe"
    "sp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022.\n\rt"
    "emplate_list\030\003 \003(\0132\027.mpcomm.PrivateTempl"
    "ate\"B\n\025DelPrivateTemplateReq\022\024\n\014access_t"
    "oken\030\001 \001(\t\022\023\n\013template_id\030\002 \001(\t\"9\n\026DelPr"
    "ivateTemplateResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006er"
    "rmsg\030\002 \001(\t\"\027\n\004Json\022\017\n\007content\030\001 \001(\t\"|\n\026S"
    "endTemplateMessageReq\022\024\n\014access_token\030\001 "
    "\001(\t\022\016\n\006touser\030\002 \001(\t\022\023\n\013template_id\030\003 \001(\t"
    "\022\013\n\003url\030\004 \001(\t\022\032\n\004data\030\005 \001(\0132\014.mpcomm.Jso"
    "n\"I\n\027SendTemplateMessageResp\022\017\n\007errcode\030"
    "\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\r\n\005msgid\030\003 \001(\004\".\n\t"
    "MediaFile\022\021\n\tfile_name\030\001 \001(\t\022\016\n\006buffer\030\002"
    " \001(\t\"\266\001\n\010NewsItem\022\r\n\005title\030\001 \001(\t\022\016\n\006auth"
    "or\030\002 \001(\t\022\016\n\006digest\030\003 \001(\t\022\017\n\007content\030\004 \001("
    "\t\022\032\n\022content_source_url\030\005 \001(\t\022\026\n\016thumb_m"
    "edia_id\030\006 \001(\t\022\026\n\016show_cover_pic\030\007 \001(\003\022\013\n"
    "\003url\030\010 \001(\t\022\021\n\tthumb_url\030\t \001(\t\"/\n\010NewsInf"
    "o\022#\n\tnews_item\030\001 \003(\0132\020.mpcomm.NewsItem\"F"
    "\n\014UploadImgReq\022\024\n\014access_token\030\001 \001(\t\022 \n\005"
    "media\030\002 \001(\0132\021.mpcomm.MediaFile\"=\n\rUpload"
    "ImgResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t"
    "\022\013\n\003url\030\003 \001(\t\"I\n\rUploadNewsReq\022\024\n\014access"
    "_token\030\001 \001(\t\022\"\n\010articles\030\002 \003(\0132\020.mpcomm."
    "NewsItem\"e\n\016UploadNewsResp\022\017\n\007errcode\030\001 "
    "\001(\003\022\016\n\006errmsg\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\022\020\n\010med"
    "ia_id\030\004 \001(\t\022\022\n\ncreated_at\030\005 \001(\004\"V\n\016Uploa"
    "dMediaReq\022\024\n\014access_token\030\001 \001(\t\022\014\n\004type\030"
    "\002 \001(\t\022 \n\005media\030\003 \001(\0132\021.mpcomm.MediaFile\""
    "~\n\017UploadMediaResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006e"
    "rrmsg\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\022\020\n\010media_id\030\004 "
    "\001(\t\022\022\n\ncreated_at\030\005 \001(\004\022\026\n\016thumb_media_i"
    "d\030\006 \001(\t\"5\n\013GetMediaReq\022\024\n\014access_token\030\001"
    " \001(\t\022\020\n\010media_id\030\002 \001(\t\"Q\n\014GetMediaResp\022\017"
    "\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022 \n\005media"
    "\030\003 \001(\0132\021.mpcomm.MediaFile\"\?\n\030MaterialVid"
    "eoDescription\022\r\n\005title\030\001 \001(\t\022\024\n\014introduc"
    "tion\030\002 \001(\t\"N\n\022AddNewsMaterialReq\022\024\n\014acce"
    "ss_token\030\001 \001(\t\022\"\n\010articles\030\002 \003(\0132\020.mpcom"
    "m.NewsItem\"H\n\023AddNewsMaterialResp\022\017\n\007err"
    "code\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\020\n\010media_id\030\003"
    " \001(\t\"\215\001\n\016AddMaterialReq\022\024\n\014access_token\030"
    "\001 \001(\t\022\014\n\004type\030\002 \001(\t\022 \n\005media\030\003 \001(\0132\021.mpc"
    "omm.MediaFile\0225\n\013description\030\004 \001(\0132 .mpc"
    "omm.MaterialVideoDescription\"Q\n\017AddMater"
    "ialResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t"
    "\022\020\n\010media_id\030\003 \001(\t\022\013\n\003url\030\004 \001(\t\"8\n\016GetMa"
    "terialReq\022\024\n\014access_token\030\001 \001(\t\022\020\n\010media"
    "_id\030\002 \001(\t\"\257\001\n\017GetMaterialResp\022\017\n\007errcode"
    "\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022#\n\tnews_item\030\003 \003("
    "\0132\020.mpcomm.NewsItem\022\r\n\005title\030\004 \001(\t\022\023\n\013de"
    "scription\030\005 \001(\t\022\020\n\010down_url\030\006 \001(\t\022 \n\005med"
    "ia\030\007 \001(\0132\021.mpcomm.MediaFile\"8\n\016DelMateri"
    "alReq\022\024\n\014access_token\030\001 \001(\t\022\020\n\010media_id\030"
    "\002 \001(\t\"2\n\017DelMaterialResp\022\017\n\007errcode\030\001 \001("
    "\003\022\016\n\006errmsg\030\002 \001(\t\"j\n\rUpdateNewsReq\022\024\n\014ac"
    "cess_token\030\001 \001(\t\022\020\n\010media_id\030\002 \001(\t\022\r\n\005in"
    "dex\030\003 \001(\004\022\"\n\010articles\030\004 \001(\0132\020.mpcomm.New"
    "sItem\"1\n\016UpdateNewsResp\022\017\n\007errcode\030\001 \001(\003"
    "\022\016\n\006errmsg\030\002 \001(\t\"+\n\023GetMaterialCountReq\022"
    "\024\n\014access_token\030\001 \001(\t\"\212\001\n\024GetMaterialCou"
    "ntResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022"
    "\023\n\013voice_count\030\003 \001(\004\022\023\n\013video_count\030\004 \001("
    "\004\022\023\n\013image_count\030\005 \001(\004\022\022\n\nnews_count\030\006 \001"
    "(\004\"X\n\023BatchGetMaterialReq\022\024\n\014access_toke"
    "n\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\016\n\006offset\030\003 \001(\004\022\r\n"
    "\005count\030\004 \001(\004\"\215\001\n\014MaterialItem\022\020\n\010media_i"
    "d\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022!\n\007content\030\003 \001(\0132\020"
    ".mpcomm.NewsInfo\022\023\n\013update_time\030\004 \001(\004\022\030\n"
    "\020bind_template_id\030\005 \001(\t\022\013\n\003url\030\006 \001(\t\"\204\001\n"
    "\024BatchGetMaterialResp\022\017\n\007errcode\030\001 \001(\003\022\016"
    "\n\006errmsg\030\002 \001(\t\022\"\n\004item\030\003 \003(\0132\024.mpcomm.Ma"
    "terialItem\022\023\n\013total_count\030\004 \001(\004\022\022\n\nitem_"
    "count\030\005 \001(\004\".\n\003Tag\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002"
    " \001(\t\022\r\n\005count\030\003 \001(\004\"\?\n\rCreateTagsReq\022\024\n\014"
    "access_token\030\001 \001(\t\022\030\n\003tag\030\002 \001(\0132\013.mpcomm"
    ".Tag\"K\n\016CreateTagsResp\022\017\n\007errcode\030\001 \001(\003\022"
    "\016\n\006errmsg\030\002 \001(\t\022\030\n\003tag\030\003 \001(\0132\013.mpcomm.Ta"
    "g\"\"\n\nGetTagsReq\022\024\n\014access_token\030\001 \001(\t\"I\n"
    "\013GetTagsResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030"
    "\002 \001(\t\022\031\n\004tags\030\003 \003(\0132\013.mpcomm.Tag\"\?\n\rUpda"
    "teTagsReq\022\024\n\014access_token\030\001 \001(\t\022\030\n\003tag\030\002"
    " \001(\0132\013.mpcomm.Tag\"1\n\016UpdateTagsResp\022\017\n\007e"
    "rrcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\"N\n\024UpdateTa"
    "gsMembersReq\022\024\n\014access_token\030\001 \001(\t\022\016\n\006op"
    "enid\030\002 \001(\t\022\020\n\010to_tagid\030\003 \001(\t\"8\n\025UpdateTa"
    "gsMembersResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg"
    "\030\002 \001(\t\"X\n\031BatchUpdateTagsMembersReq\022\024\n\014a"
    "ccess_token\030\001 \001(\t\022\023\n\013openid_list\030\002 \003(\t\022\020"
    "\n\010to_tagid\030\003 \001(\t\"=\n\032BatchUpdateTagsMembe"
    "rsResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\""
    "\?\n\rDeleteTagsReq\022\024\n\014access_token\030\001 \001(\t\022\030"
    "\n\003tag\030\002 \001(\0132\013.mpcomm.Tag\"1\n\016DeleteTagsRe"
    "sp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\"\035\n\013T"
    "agUserData\022\016\n\006openid\030\001 \003(\t\"I\n\rGetTagUser"
    "Req\022\024\n\014access_token\030\001 \001(\t\022\r\n\005tagid\030\002 \001(\004"
    "\022\023\n\013next_openid\030\003 \001(\t\"x\n\016GetTagUserResp\022"
    "\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\r\n\005coun"
    "t\030\003 \001(\004\022!\n\004data\030\004 \001(\0132\023.mpcomm.TagUserDa"
    "ta\022\023\n\013next_openid\030\005 \001(\t\"R\n\026BatchTaggingM"
    "embersReq\022\024\n\014access_token\030\001 \001(\t\022\023\n\013openi"
    "d_list\030\002 \003(\t\022\r\n\005tagid\030\003 \001(\004\":\n\027BatchTagg"
    "ingMembersResp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errms"
    "g\030\002 \001(\t\"T\n\030BatchUnTaggingMembersReq\022\024\n\014a"
    "ccess_token\030\001 \001(\t\022\023\n\013openid_list\030\002 \003(\t\022\r"
    "\n\005tagid\030\003 \001(\004\"<\n\031BatchUnTaggingMembersRe"
    "sp\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\"8\n\020G"
    "etTagsIdListReq\022\024\n\014access_token\030\001 \001(\t\022\016\n"
    "\006openid\030\002 \001(\t\"H\n\021GetTagsIdListResp\022\017\n\007er"
    "rcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\022\n\ntagid_lis"
    "t\030\003 \003(\004\"O\n\027UpdateUserInfoRemarkReq\022\024\n\014ac"
    "cess_token\030\001 \001(\t\022\016\n\006openid\030\002 \001(\t\022\016\n\006rema"
    "rk\030\003 \001(\t\";\n\030UpdateUserInfoRemarkResp\022\017\n\007"
    "errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\"A\n\013UserInf"
    "oReq\022\024\n\014access_token\030\001 \001(\t\022\016\n\006openid\030\002 \001"
    "(\t\022\014\n\004lang\030\003 \001(\t\"\246\002\n\014UserInfoResp\022\017\n\007err"
    "code\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\021\n\tsubscribe\030"
    "\003 \001(\004\022\016\n\006openid\030\004 \001(\t\022\020\n\010nickname\030\005 \001(\t\022"
    "\013\n\003sex\030\006 \001(\004\022\020\n\010language\030\007 \001(\t\022\014\n\004city\030\010"
    " \001(\t\022\020\n\010province\030\t \001(\t\022\017\n\007country\030\n \001(\t\022"
    "\022\n\nheadimgurl\030\013 \001(\t\022\026\n\016subscribe_time\030\014 "
    "\001(\004\022\017\n\007unionid\030\r \001(\t\022\016\n\006remark\030\016 \001(\t\022\017\n\007"
    "groupid\030\017 \001(\004\022\022\n\ntagid_list\030\020 \003(\004\"0\n\020Bat"
    "chGetUserItem\022\016\n\006openid\030\001 \001(\t\022\014\n\004lang\030\002 "
    "\001(\t\"X\n\023BatchGetUserInfoReq\022\024\n\014access_tok"
    "en\030\001 \001(\t\022+\n\tuser_list\030\002 \003(\0132\030.mpcomm.Bat"
    "chGetUserItem\"\205\002\n\014UserInfoItem\022\021\n\tsubscr"
    "ibe\030\001 \001(\004\022\016\n\006openid\030\002 \001(\t\022\020\n\010nickname\030\003 "
    "\001(\t\022\013\n\003sex\030\004 \001(\004\022\020\n\010language\030\005 \001(\t\022\014\n\004ci"
    "ty\030\006 \001(\t\022\020\n\010province\030\007 \001(\t\022\017\n\007country\030\010 "
    "\001(\t\022\022\n\nheadimgurl\030\t \001(\t\022\026\n\016subscribe_tim"
    "e\030\n \001(\004\022\017\n\007unionid\030\013 \001(\t\022\016\n\006remark\030\014 \001(\t"
    "\022\017\n\007groupid\030\r \001(\004\022\022\n\ntagid_list\030\016 \003(\004\"e\n"
    "\024BatchGetUserInfoResp\022\017\n\007errcode\030\001 \001(\003\022\016"
    "\n\006errmsg\030\002 \001(\t\022,\n\016user_info_list\030\003 \003(\0132\024"
    ".mpcomm.UserInfoItem\"7\n\nGetUserReq\022\024\n\014ac"
    "cess_token\030\001 \001(\t\022\023\n\013next_openid\030\002 \001(\t\"\032\n"
    "\010UserList\022\016\n\006openid\030\001 \003(\t\"\201\001\n\013GetUserRes"
    "p\022\017\n\007errcode\030\001 \001(\003\022\016\n\006errmsg\030\002 \001(\t\022\r\n\005to"
    "tal\030\003 \001(\004\022\r\n\005count\030\004 \001(\004\022\036\n\004data\030\005 \001(\0132\020"
    ".mpcomm.UserList\022\023\n\013next_openid\030\006 \001(\t", 11917);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mpmsg.proto", &protobuf_RegisterTypes);
  TestMessage::default_instance_ = new TestMessage();
  TokenReq::_default_grant_type_ =
      new ::std::string("client_credential", 17);
  TokenReq::default_instance_ = new TokenReq();
  TokenResp::default_instance_ = new TokenResp();
  GetCallbackIPReq::default_instance_ = new GetCallbackIPReq();
  GetCallbackIPResp::default_instance_ = new GetCallbackIPResp();
  MenuButton::default_instance_ = new MenuButton();
  MenuMatchRule::default_instance_ = new MenuMatchRule();
  Menu::default_instance_ = new Menu();
  CreateMenuReq::default_instance_ = new CreateMenuReq();
  CreateMenuResp::default_instance_ = new CreateMenuResp();
  GetMenuReq::default_instance_ = new GetMenuReq();
  GetMenuResp::default_instance_ = new GetMenuResp();
  DeleteMenuReq::default_instance_ = new DeleteMenuReq();
  DeleteMenuResp::default_instance_ = new DeleteMenuResp();
  AddConditionalMenuReq::default_instance_ = new AddConditionalMenuReq();
  AddConditionalMenuResp::default_instance_ = new AddConditionalMenuResp();
  DelConditionalMenuReq::default_instance_ = new DelConditionalMenuReq();
  DelConditionalMenuResp::default_instance_ = new DelConditionalMenuResp();
  TryMatchMenuReq::default_instance_ = new TryMatchMenuReq();
  TryMatchMenuResp::default_instance_ = new TryMatchMenuResp();
  GetCurrentSelfMenuInfoReq::default_instance_ = new GetCurrentSelfMenuInfoReq();
  RespNews::default_instance_ = new RespNews();
  RespNewsList::default_instance_ = new RespNewsList();
  CurrentSelfMenuButton::default_instance_ = new CurrentSelfMenuButton();
  CurrentSelfMenuButtonList::default_instance_ = new CurrentSelfMenuButtonList();
  CurrentSelfMenu::default_instance_ = new CurrentSelfMenu();
  GetCurrentSelfMenuInfoResp::default_instance_ = new GetCurrentSelfMenuInfoResp();
  ReplyItem::default_instance_ = new ReplyItem();
  KeyWordItem::default_instance_ = new KeyWordItem();
  AutoReplyRule::default_instance_ = new AutoReplyRule();
  AutoReplyRuleList::default_instance_ = new AutoReplyRuleList();
  GetCurrentAutoReplyInfoReq::default_instance_ = new GetCurrentAutoReplyInfoReq();
  GetCurrentAutoReplyInfoResp::default_instance_ = new GetCurrentAutoReplyInfoResp();
  Text::default_instance_ = new Text();
  Image::default_instance_ = new Image();
  Voice::default_instance_ = new Voice();
  Video::default_instance_ = new Video();
  Link::default_instance_ = new Link();
  Card::default_instance_ = new Card();
  ArticlesItem::default_instance_ = new ArticlesItem();
  NewsMsg::default_instance_ = new NewsMsg();
  Music::default_instance_ = new Music();
  MpNewsMsg::default_instance_ = new MpNewsMsg();
  MpVideo::default_instance_ = new MpVideo();
  WxCard::default_instance_ = new WxCard();
  CustomServiceInfo::default_instance_ = new CustomServiceInfo();
  SendCustomMessageReq::default_instance_ = new SendCustomMessageReq();
  SendCustomMessageResp::default_instance_ = new SendCustomMessageResp();
  SendFilter::default_instance_ = new SendFilter();
  MassSendAllReq::default_instance_ = new MassSendAllReq();
  MassSendAllResp::default_instance_ = new MassSendAllResp();
  MassSendReq::default_instance_ = new MassSendReq();
  MassSendResp::default_instance_ = new MassSendResp();
  MassDeleteReq::default_instance_ = new MassDeleteReq();
  MassDeleteResp::default_instance_ = new MassDeleteResp();
  MassPreviewReq::default_instance_ = new MassPreviewReq();
  MassPreviewResp::default_instance_ = new MassPreviewResp();
  MassGetReq::default_instance_ = new MassGetReq();
  MassGetResp::default_instance_ = new MassGetResp();
  SetIndustryReq::default_instance_ = new SetIndustryReq();
  SetIndustryResp::default_instance_ = new SetIndustryResp();
  GetIndustryReq::default_instance_ = new GetIndustryReq();
  Industry::default_instance_ = new Industry();
  GetIndustryResp::default_instance_ = new GetIndustryResp();
  AddTemplateReq::default_instance_ = new AddTemplateReq();
  AddTemplateResp::default_instance_ = new AddTemplateResp();
  GetAllPrivateTemplateReq::default_instance_ = new GetAllPrivateTemplateReq();
  PrivateTemplate::default_instance_ = new PrivateTemplate();
  GetAllPrivateTemplateResp::default_instance_ = new GetAllPrivateTemplateResp();
  DelPrivateTemplateReq::default_instance_ = new DelPrivateTemplateReq();
  DelPrivateTemplateResp::default_instance_ = new DelPrivateTemplateResp();
  Json::default_instance_ = new Json();
  SendTemplateMessageReq::default_instance_ = new SendTemplateMessageReq();
  SendTemplateMessageResp::default_instance_ = new SendTemplateMessageResp();
  MediaFile::default_instance_ = new MediaFile();
  NewsItem::default_instance_ = new NewsItem();
  NewsInfo::default_instance_ = new NewsInfo();
  UploadImgReq::default_instance_ = new UploadImgReq();
  UploadImgResp::default_instance_ = new UploadImgResp();
  UploadNewsReq::default_instance_ = new UploadNewsReq();
  UploadNewsResp::default_instance_ = new UploadNewsResp();
  UploadMediaReq::default_instance_ = new UploadMediaReq();
  UploadMediaResp::default_instance_ = new UploadMediaResp();
  GetMediaReq::default_instance_ = new GetMediaReq();
  GetMediaResp::default_instance_ = new GetMediaResp();
  MaterialVideoDescription::default_instance_ = new MaterialVideoDescription();
  AddNewsMaterialReq::default_instance_ = new AddNewsMaterialReq();
  AddNewsMaterialResp::default_instance_ = new AddNewsMaterialResp();
  AddMaterialReq::default_instance_ = new AddMaterialReq();
  AddMaterialResp::default_instance_ = new AddMaterialResp();
  GetMaterialReq::default_instance_ = new GetMaterialReq();
  GetMaterialResp::default_instance_ = new GetMaterialResp();
  DelMaterialReq::default_instance_ = new DelMaterialReq();
  DelMaterialResp::default_instance_ = new DelMaterialResp();
  UpdateNewsReq::default_instance_ = new UpdateNewsReq();
  UpdateNewsResp::default_instance_ = new UpdateNewsResp();
  GetMaterialCountReq::default_instance_ = new GetMaterialCountReq();
  GetMaterialCountResp::default_instance_ = new GetMaterialCountResp();
  BatchGetMaterialReq::default_instance_ = new BatchGetMaterialReq();
  MaterialItem::default_instance_ = new MaterialItem();
  BatchGetMaterialResp::default_instance_ = new BatchGetMaterialResp();
  Tag::default_instance_ = new Tag();
  CreateTagsReq::default_instance_ = new CreateTagsReq();
  CreateTagsResp::default_instance_ = new CreateTagsResp();
  GetTagsReq::default_instance_ = new GetTagsReq();
  GetTagsResp::default_instance_ = new GetTagsResp();
  UpdateTagsReq::default_instance_ = new UpdateTagsReq();
  UpdateTagsResp::default_instance_ = new UpdateTagsResp();
  UpdateTagsMembersReq::default_instance_ = new UpdateTagsMembersReq();
  UpdateTagsMembersResp::default_instance_ = new UpdateTagsMembersResp();
  BatchUpdateTagsMembersReq::default_instance_ = new BatchUpdateTagsMembersReq();
  BatchUpdateTagsMembersResp::default_instance_ = new BatchUpdateTagsMembersResp();
  DeleteTagsReq::default_instance_ = new DeleteTagsReq();
  DeleteTagsResp::default_instance_ = new DeleteTagsResp();
  TagUserData::default_instance_ = new TagUserData();
  GetTagUserReq::default_instance_ = new GetTagUserReq();
  GetTagUserResp::default_instance_ = new GetTagUserResp();
  BatchTaggingMembersReq::default_instance_ = new BatchTaggingMembersReq();
  BatchTaggingMembersResp::default_instance_ = new BatchTaggingMembersResp();
  BatchUnTaggingMembersReq::default_instance_ = new BatchUnTaggingMembersReq();
  BatchUnTaggingMembersResp::default_instance_ = new BatchUnTaggingMembersResp();
  GetTagsIdListReq::default_instance_ = new GetTagsIdListReq();
  GetTagsIdListResp::default_instance_ = new GetTagsIdListResp();
  UpdateUserInfoRemarkReq::default_instance_ = new UpdateUserInfoRemarkReq();
  UpdateUserInfoRemarkResp::default_instance_ = new UpdateUserInfoRemarkResp();
  UserInfoReq::default_instance_ = new UserInfoReq();
  UserInfoResp::default_instance_ = new UserInfoResp();
  BatchGetUserItem::default_instance_ = new BatchGetUserItem();
  BatchGetUserInfoReq::default_instance_ = new BatchGetUserInfoReq();
  UserInfoItem::default_instance_ = new UserInfoItem();
  BatchGetUserInfoResp::default_instance_ = new BatchGetUserInfoResp();
  GetUserReq::default_instance_ = new GetUserReq();
  UserList::default_instance_ = new UserList();
  GetUserResp::default_instance_ = new GetUserResp();
  TestMessage::default_instance_->InitAsDefaultInstance();
  TokenReq::default_instance_->InitAsDefaultInstance();
  TokenResp::default_instance_->InitAsDefaultInstance();
  GetCallbackIPReq::default_instance_->InitAsDefaultInstance();
  GetCallbackIPResp::default_instance_->InitAsDefaultInstance();
  MenuButton::default_instance_->InitAsDefaultInstance();
  MenuMatchRule::default_instance_->InitAsDefaultInstance();
  Menu::default_instance_->InitAsDefaultInstance();
  CreateMenuReq::default_instance_->InitAsDefaultInstance();
  CreateMenuResp::default_instance_->InitAsDefaultInstance();
  GetMenuReq::default_instance_->InitAsDefaultInstance();
  GetMenuResp::default_instance_->InitAsDefaultInstance();
  DeleteMenuReq::default_instance_->InitAsDefaultInstance();
  DeleteMenuResp::default_instance_->InitAsDefaultInstance();
  AddConditionalMenuReq::default_instance_->InitAsDefaultInstance();
  AddConditionalMenuResp::default_instance_->InitAsDefaultInstance();
  DelConditionalMenuReq::default_instance_->InitAsDefaultInstance();
  DelConditionalMenuResp::default_instance_->InitAsDefaultInstance();
  TryMatchMenuReq::default_instance_->InitAsDefaultInstance();
  TryMatchMenuResp::default_instance_->InitAsDefaultInstance();
  GetCurrentSelfMenuInfoReq::default_instance_->InitAsDefaultInstance();
  RespNews::default_instance_->InitAsDefaultInstance();
  RespNewsList::default_instance_->InitAsDefaultInstance();
  CurrentSelfMenuButton::default_instance_->InitAsDefaultInstance();
  CurrentSelfMenuButtonList::default_instance_->InitAsDefaultInstance();
  CurrentSelfMenu::default_instance_->InitAsDefaultInstance();
  GetCurrentSelfMenuInfoResp::default_instance_->InitAsDefaultInstance();
  ReplyItem::default_instance_->InitAsDefaultInstance();
  KeyWordItem::default_instance_->InitAsDefaultInstance();
  AutoReplyRule::default_instance_->InitAsDefaultInstance();
  AutoReplyRuleList::default_instance_->InitAsDefaultInstance();
  GetCurrentAutoReplyInfoReq::default_instance_->InitAsDefaultInstance();
  GetCurrentAutoReplyInfoResp::default_instance_->InitAsDefaultInstance();
  Text::default_instance_->InitAsDefaultInstance();
  Image::default_instance_->InitAsDefaultInstance();
  Voice::default_instance_->InitAsDefaultInstance();
  Video::default_instance_->InitAsDefaultInstance();
  Link::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  ArticlesItem::default_instance_->InitAsDefaultInstance();
  NewsMsg::default_instance_->InitAsDefaultInstance();
  Music::default_instance_->InitAsDefaultInstance();
  MpNewsMsg::default_instance_->InitAsDefaultInstance();
  MpVideo::default_instance_->InitAsDefaultInstance();
  WxCard::default_instance_->InitAsDefaultInstance();
  CustomServiceInfo::default_instance_->InitAsDefaultInstance();
  SendCustomMessageReq::default_instance_->InitAsDefaultInstance();
  SendCustomMessageResp::default_instance_->InitAsDefaultInstance();
  SendFilter::default_instance_->InitAsDefaultInstance();
  MassSendAllReq::default_instance_->InitAsDefaultInstance();
  MassSendAllResp::default_instance_->InitAsDefaultInstance();
  MassSendReq::default_instance_->InitAsDefaultInstance();
  MassSendResp::default_instance_->InitAsDefaultInstance();
  MassDeleteReq::default_instance_->InitAsDefaultInstance();
  MassDeleteResp::default_instance_->InitAsDefaultInstance();
  MassPreviewReq::default_instance_->InitAsDefaultInstance();
  MassPreviewResp::default_instance_->InitAsDefaultInstance();
  MassGetReq::default_instance_->InitAsDefaultInstance();
  MassGetResp::default_instance_->InitAsDefaultInstance();
  SetIndustryReq::default_instance_->InitAsDefaultInstance();
  SetIndustryResp::default_instance_->InitAsDefaultInstance();
  GetIndustryReq::default_instance_->InitAsDefaultInstance();
  Industry::default_instance_->InitAsDefaultInstance();
  GetIndustryResp::default_instance_->InitAsDefaultInstance();
  AddTemplateReq::default_instance_->InitAsDefaultInstance();
  AddTemplateResp::default_instance_->InitAsDefaultInstance();
  GetAllPrivateTemplateReq::default_instance_->InitAsDefaultInstance();
  PrivateTemplate::default_instance_->InitAsDefaultInstance();
  GetAllPrivateTemplateResp::default_instance_->InitAsDefaultInstance();
  DelPrivateTemplateReq::default_instance_->InitAsDefaultInstance();
  DelPrivateTemplateResp::default_instance_->InitAsDefaultInstance();
  Json::default_instance_->InitAsDefaultInstance();
  SendTemplateMessageReq::default_instance_->InitAsDefaultInstance();
  SendTemplateMessageResp::default_instance_->InitAsDefaultInstance();
  MediaFile::default_instance_->InitAsDefaultInstance();
  NewsItem::default_instance_->InitAsDefaultInstance();
  NewsInfo::default_instance_->InitAsDefaultInstance();
  UploadImgReq::default_instance_->InitAsDefaultInstance();
  UploadImgResp::default_instance_->InitAsDefaultInstance();
  UploadNewsReq::default_instance_->InitAsDefaultInstance();
  UploadNewsResp::default_instance_->InitAsDefaultInstance();
  UploadMediaReq::default_instance_->InitAsDefaultInstance();
  UploadMediaResp::default_instance_->InitAsDefaultInstance();
  GetMediaReq::default_instance_->InitAsDefaultInstance();
  GetMediaResp::default_instance_->InitAsDefaultInstance();
  MaterialVideoDescription::default_instance_->InitAsDefaultInstance();
  AddNewsMaterialReq::default_instance_->InitAsDefaultInstance();
  AddNewsMaterialResp::default_instance_->InitAsDefaultInstance();
  AddMaterialReq::default_instance_->InitAsDefaultInstance();
  AddMaterialResp::default_instance_->InitAsDefaultInstance();
  GetMaterialReq::default_instance_->InitAsDefaultInstance();
  GetMaterialResp::default_instance_->InitAsDefaultInstance();
  DelMaterialReq::default_instance_->InitAsDefaultInstance();
  DelMaterialResp::default_instance_->InitAsDefaultInstance();
  UpdateNewsReq::default_instance_->InitAsDefaultInstance();
  UpdateNewsResp::default_instance_->InitAsDefaultInstance();
  GetMaterialCountReq::default_instance_->InitAsDefaultInstance();
  GetMaterialCountResp::default_instance_->InitAsDefaultInstance();
  BatchGetMaterialReq::default_instance_->InitAsDefaultInstance();
  MaterialItem::default_instance_->InitAsDefaultInstance();
  BatchGetMaterialResp::default_instance_->InitAsDefaultInstance();
  Tag::default_instance_->InitAsDefaultInstance();
  CreateTagsReq::default_instance_->InitAsDefaultInstance();
  CreateTagsResp::default_instance_->InitAsDefaultInstance();
  GetTagsReq::default_instance_->InitAsDefaultInstance();
  GetTagsResp::default_instance_->InitAsDefaultInstance();
  UpdateTagsReq::default_instance_->InitAsDefaultInstance();
  UpdateTagsResp::default_instance_->InitAsDefaultInstance();
  UpdateTagsMembersReq::default_instance_->InitAsDefaultInstance();
  UpdateTagsMembersResp::default_instance_->InitAsDefaultInstance();
  BatchUpdateTagsMembersReq::default_instance_->InitAsDefaultInstance();
  BatchUpdateTagsMembersResp::default_instance_->InitAsDefaultInstance();
  DeleteTagsReq::default_instance_->InitAsDefaultInstance();
  DeleteTagsResp::default_instance_->InitAsDefaultInstance();
  TagUserData::default_instance_->InitAsDefaultInstance();
  GetTagUserReq::default_instance_->InitAsDefaultInstance();
  GetTagUserResp::default_instance_->InitAsDefaultInstance();
  BatchTaggingMembersReq::default_instance_->InitAsDefaultInstance();
  BatchTaggingMembersResp::default_instance_->InitAsDefaultInstance();
  BatchUnTaggingMembersReq::default_instance_->InitAsDefaultInstance();
  BatchUnTaggingMembersResp::default_instance_->InitAsDefaultInstance();
  GetTagsIdListReq::default_instance_->InitAsDefaultInstance();
  GetTagsIdListResp::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoRemarkReq::default_instance_->InitAsDefaultInstance();
  UpdateUserInfoRemarkResp::default_instance_->InitAsDefaultInstance();
  UserInfoReq::default_instance_->InitAsDefaultInstance();
  UserInfoResp::default_instance_->InitAsDefaultInstance();
  BatchGetUserItem::default_instance_->InitAsDefaultInstance();
  BatchGetUserInfoReq::default_instance_->InitAsDefaultInstance();
  UserInfoItem::default_instance_->InitAsDefaultInstance();
  BatchGetUserInfoResp::default_instance_->InitAsDefaultInstance();
  GetUserReq::default_instance_->InitAsDefaultInstance();
  UserList::default_instance_->InitAsDefaultInstance();
  GetUserResp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mpmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mpmsg_2eproto {
  StaticDescriptorInitializer_mpmsg_2eproto() {
    protobuf_AddDesc_mpmsg_2eproto();
  }
} static_descriptor_initializer_mpmsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TestMessage::kField1FieldNumber;
const int TestMessage::kField2FieldNumber;
const int TestMessage::kField3FieldNumber;
const int TestMessage::kField4FieldNumber;
const int TestMessage::kField5FieldNumber;
#endif  // !_MSC_VER

TestMessage::TestMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.TestMessage)
}

void TestMessage::InitAsDefaultInstance() {
  field5_ = const_cast< ::mpcomm::TestMessage*>(&::mpcomm::TestMessage::default_instance());
}

TestMessage::TestMessage(const TestMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.TestMessage)
}

void TestMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  field1_ = GOOGLE_LONGLONG(0);
  field2_ = GOOGLE_ULONGLONG(0);
  field3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field5_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestMessage::~TestMessage() {
  // @@protoc_insertion_point(destructor:mpcomm.TestMessage)
  SharedDtor();
}

void TestMessage::SharedDtor() {
  if (field3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field3_;
  }
  if (field4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete field4_;
  }
  if (this != default_instance_) {
    delete field5_;
  }
}

void TestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestMessage_descriptor_;
}

const TestMessage& TestMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

TestMessage* TestMessage::default_instance_ = NULL;

TestMessage* TestMessage::New() const {
  return new TestMessage;
}

void TestMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TestMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(field1_, field2_);
    if (has_field3()) {
      if (field3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field3_->clear();
      }
    }
    if (has_field4()) {
      if (field4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        field4_->clear();
      }
    }
    if (has_field5()) {
      if (field5_ != NULL) field5_->::mpcomm::TestMessage::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.TestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &field1_)));
          set_has_field1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field2;
        break;
      }

      // optional uint64 field2 = 2;
      case 2: {
        if (tag == 16) {
         parse_field2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &field2_)));
          set_has_field2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_field3;
        break;
      }

      // optional string field3 = 3;
      case 3: {
        if (tag == 26) {
         parse_field3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field3().data(), this->field3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "field3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_field4;
        break;
      }

      // optional string field4 = 4;
      case 4: {
        if (tag == 34) {
         parse_field4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field4().data(), this->field4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "field4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_field5;
        break;
      }

      // optional .mpcomm.TestMessage field5 = 5;
      case 5: {
        if (tag == 42) {
         parse_field5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field5()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.TestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.TestMessage)
  return false;
#undef DO_
}

void TestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.TestMessage)
  // optional int64 field1 = 1;
  if (has_field1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->field1(), output);
  }

  // optional uint64 field2 = 2;
  if (has_field2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->field2(), output);
  }

  // optional string field3 = 3;
  if (has_field3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field3().data(), this->field3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "field3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->field3(), output);
  }

  // optional string field4 = 4;
  if (has_field4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field4().data(), this->field4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "field4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->field4(), output);
  }

  // optional .mpcomm.TestMessage field5 = 5;
  if (has_field5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->field5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.TestMessage)
}

::google::protobuf::uint8* TestMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.TestMessage)
  // optional int64 field1 = 1;
  if (has_field1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->field1(), target);
  }

  // optional uint64 field2 = 2;
  if (has_field2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->field2(), target);
  }

  // optional string field3 = 3;
  if (has_field3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field3().data(), this->field3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "field3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->field3(), target);
  }

  // optional string field4 = 4;
  if (has_field4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field4().data(), this->field4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "field4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->field4(), target);
  }

  // optional .mpcomm.TestMessage field5 = 5;
  if (has_field5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->field5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.TestMessage)
  return target;
}

int TestMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 field1 = 1;
    if (has_field1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->field1());
    }

    // optional uint64 field2 = 2;
    if (has_field2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->field2());
    }

    // optional string field3 = 3;
    if (has_field3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field3());
    }

    // optional string field4 = 4;
    if (has_field4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field4());
    }

    // optional .mpcomm.TestMessage field5 = 5;
    if (has_field5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestMessage::MergeFrom(const TestMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field1()) {
      set_field1(from.field1());
    }
    if (from.has_field2()) {
      set_field2(from.field2());
    }
    if (from.has_field3()) {
      set_field3(from.field3());
    }
    if (from.has_field4()) {
      set_field4(from.field4());
    }
    if (from.has_field5()) {
      mutable_field5()->::mpcomm::TestMessage::MergeFrom(from.field5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMessage::CopyFrom(const TestMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMessage::IsInitialized() const {

  return true;
}

void TestMessage::Swap(TestMessage* other) {
  if (other != this) {
    std::swap(field1_, other->field1_);
    std::swap(field2_, other->field2_);
    std::swap(field3_, other->field3_);
    std::swap(field4_, other->field4_);
    std::swap(field5_, other->field5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestMessage_descriptor_;
  metadata.reflection = TestMessage_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TokenReq::_default_grant_type_ = NULL;
#ifndef _MSC_VER
const int TokenReq::kGrantTypeFieldNumber;
const int TokenReq::kAppidFieldNumber;
const int TokenReq::kSecretFieldNumber;
#endif  // !_MSC_VER

TokenReq::TokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.TokenReq)
}

void TokenReq::InitAsDefaultInstance() {
}

TokenReq::TokenReq(const TokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.TokenReq)
}

void TokenReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  grant_type_ = const_cast< ::std::string*>(_default_grant_type_);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenReq::~TokenReq() {
  // @@protoc_insertion_point(destructor:mpcomm.TokenReq)
  SharedDtor();
}

void TokenReq::SharedDtor() {
  if (grant_type_ != _default_grant_type_) {
    delete grant_type_;
  }
  if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete appid_;
  }
  if (secret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secret_;
  }
  if (this != default_instance_) {
  }
}

void TokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenReq_descriptor_;
}

const TokenReq& TokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

TokenReq* TokenReq::default_instance_ = NULL;

TokenReq* TokenReq::New() const {
  return new TokenReq;
}

void TokenReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_grant_type()) {
      if (grant_type_ != _default_grant_type_) {
        grant_type_->assign(*_default_grant_type_);
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        appid_->clear();
      }
    }
    if (has_secret()) {
      if (secret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.TokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string grant_type = 1 [default = "client_credential"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grant_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grant_type().data(), this->grant_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grant_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_appid;
        break;
      }

      // optional string appid = 2;
      case 2: {
        if (tag == 18) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "appid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_secret;
        break;
      }

      // optional string secret = 3;
      case 3: {
        if (tag == 26) {
         parse_secret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secret().data(), this->secret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secret");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.TokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.TokenReq)
  return false;
#undef DO_
}

void TokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.TokenReq)
  // optional string grant_type = 1 [default = "client_credential"];
  if (has_grant_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grant_type().data(), this->grant_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grant_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->grant_type(), output);
  }

  // optional string appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->appid(), output);
  }

  // optional string secret = 3;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->secret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.TokenReq)
}

::google::protobuf::uint8* TokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.TokenReq)
  // optional string grant_type = 1 [default = "client_credential"];
  if (has_grant_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grant_type().data(), this->grant_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grant_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->grant_type(), target);
  }

  // optional string appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "appid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // optional string secret = 3;
  if (has_secret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secret().data(), this->secret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->secret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.TokenReq)
  return target;
}

int TokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string grant_type = 1 [default = "client_credential"];
    if (has_grant_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grant_type());
    }

    // optional string appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // optional string secret = 3;
    if (has_secret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenReq::MergeFrom(const TokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grant_type()) {
      set_grant_type(from.grant_type());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_secret()) {
      set_secret(from.secret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenReq::CopyFrom(const TokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenReq::IsInitialized() const {

  return true;
}

void TokenReq::Swap(TokenReq* other) {
  if (other != this) {
    std::swap(grant_type_, other->grant_type_);
    std::swap(appid_, other->appid_);
    std::swap(secret_, other->secret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenReq_descriptor_;
  metadata.reflection = TokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenResp::kErrcodeFieldNumber;
const int TokenResp::kErrmsgFieldNumber;
const int TokenResp::kAccessTokenFieldNumber;
const int TokenResp::kExpiresInFieldNumber;
#endif  // !_MSC_VER

TokenResp::TokenResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.TokenResp)
}

void TokenResp::InitAsDefaultInstance() {
}

TokenResp::TokenResp(const TokenResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.TokenResp)
}

void TokenResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expires_in_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenResp::~TokenResp() {
  // @@protoc_insertion_point(destructor:mpcomm.TokenResp)
  SharedDtor();
}

void TokenResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void TokenResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenResp_descriptor_;
}

const TokenResp& TokenResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

TokenResp* TokenResp::default_instance_ = NULL;

TokenResp* TokenResp::New() const {
  return new TokenResp;
}

void TokenResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    expires_in_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.TokenResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_access_token;
        break;
      }

      // optional string access_token = 3;
      case 3: {
        if (tag == 26) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expires_in;
        break;
      }

      // optional uint64 expires_in = 4;
      case 4: {
        if (tag == 32) {
         parse_expires_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expires_in_)));
          set_has_expires_in();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.TokenResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.TokenResp)
  return false;
#undef DO_
}

void TokenResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.TokenResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string access_token = 3;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->access_token(), output);
  }

  // optional uint64 expires_in = 4;
  if (has_expires_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->expires_in(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.TokenResp)
}

::google::protobuf::uint8* TokenResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.TokenResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string access_token = 3;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->access_token(), target);
  }

  // optional uint64 expires_in = 4;
  if (has_expires_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->expires_in(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.TokenResp)
  return target;
}

int TokenResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string access_token = 3;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 expires_in = 4;
    if (has_expires_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expires_in());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenResp::MergeFrom(const TokenResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_expires_in()) {
      set_expires_in(from.expires_in());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenResp::CopyFrom(const TokenResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenResp::IsInitialized() const {

  return true;
}

void TokenResp::Swap(TokenResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(access_token_, other->access_token_);
    std::swap(expires_in_, other->expires_in_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenResp_descriptor_;
  metadata.reflection = TokenResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCallbackIPReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetCallbackIPReq::GetCallbackIPReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetCallbackIPReq)
}

void GetCallbackIPReq::InitAsDefaultInstance() {
}

GetCallbackIPReq::GetCallbackIPReq(const GetCallbackIPReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetCallbackIPReq)
}

void GetCallbackIPReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCallbackIPReq::~GetCallbackIPReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetCallbackIPReq)
  SharedDtor();
}

void GetCallbackIPReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetCallbackIPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCallbackIPReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCallbackIPReq_descriptor_;
}

const GetCallbackIPReq& GetCallbackIPReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetCallbackIPReq* GetCallbackIPReq::default_instance_ = NULL;

GetCallbackIPReq* GetCallbackIPReq::New() const {
  return new GetCallbackIPReq;
}

void GetCallbackIPReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCallbackIPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetCallbackIPReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetCallbackIPReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetCallbackIPReq)
  return false;
#undef DO_
}

void GetCallbackIPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetCallbackIPReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetCallbackIPReq)
}

::google::protobuf::uint8* GetCallbackIPReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetCallbackIPReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetCallbackIPReq)
  return target;
}

int GetCallbackIPReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCallbackIPReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCallbackIPReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCallbackIPReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCallbackIPReq::MergeFrom(const GetCallbackIPReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCallbackIPReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCallbackIPReq::CopyFrom(const GetCallbackIPReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCallbackIPReq::IsInitialized() const {

  return true;
}

void GetCallbackIPReq::Swap(GetCallbackIPReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCallbackIPReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCallbackIPReq_descriptor_;
  metadata.reflection = GetCallbackIPReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCallbackIPResp::kErrcodeFieldNumber;
const int GetCallbackIPResp::kErrmsgFieldNumber;
const int GetCallbackIPResp::kIpListFieldNumber;
#endif  // !_MSC_VER

GetCallbackIPResp::GetCallbackIPResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetCallbackIPResp)
}

void GetCallbackIPResp::InitAsDefaultInstance() {
}

GetCallbackIPResp::GetCallbackIPResp(const GetCallbackIPResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetCallbackIPResp)
}

void GetCallbackIPResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCallbackIPResp::~GetCallbackIPResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetCallbackIPResp)
  SharedDtor();
}

void GetCallbackIPResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void GetCallbackIPResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCallbackIPResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCallbackIPResp_descriptor_;
}

const GetCallbackIPResp& GetCallbackIPResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetCallbackIPResp* GetCallbackIPResp::default_instance_ = NULL;

GetCallbackIPResp* GetCallbackIPResp::New() const {
  return new GetCallbackIPResp;
}

void GetCallbackIPResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCallbackIPResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetCallbackIPResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_list;
        break;
      }

      // repeated string ip_list = 3;
      case 3: {
        if (tag == 26) {
         parse_ip_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip_list(this->ip_list_size() - 1).data(),
            this->ip_list(this->ip_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetCallbackIPResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetCallbackIPResp)
  return false;
#undef DO_
}

void GetCallbackIPResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetCallbackIPResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated string ip_list = 3;
  for (int i = 0; i < this->ip_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->ip_list(i).data(), this->ip_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "ip_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetCallbackIPResp)
}

::google::protobuf::uint8* GetCallbackIPResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetCallbackIPResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated string ip_list = 3;
  for (int i = 0; i < this->ip_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip_list(i).data(), this->ip_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->ip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetCallbackIPResp)
  return target;
}

int GetCallbackIPResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated string ip_list = 3;
  total_size += 1 * this->ip_list_size();
  for (int i = 0; i < this->ip_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCallbackIPResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCallbackIPResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCallbackIPResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCallbackIPResp::MergeFrom(const GetCallbackIPResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_list_.MergeFrom(from.ip_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCallbackIPResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCallbackIPResp::CopyFrom(const GetCallbackIPResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCallbackIPResp::IsInitialized() const {

  return true;
}

void GetCallbackIPResp::Swap(GetCallbackIPResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    ip_list_.Swap(&other->ip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCallbackIPResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCallbackIPResp_descriptor_;
  metadata.reflection = GetCallbackIPResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuButton::kTypeFieldNumber;
const int MenuButton::kNameFieldNumber;
const int MenuButton::kKeyFieldNumber;
const int MenuButton::kUrlFieldNumber;
const int MenuButton::kSubButtonFieldNumber;
const int MenuButton::kMediaIdFieldNumber;
#endif  // !_MSC_VER

MenuButton::MenuButton()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MenuButton)
}

void MenuButton::InitAsDefaultInstance() {
}

MenuButton::MenuButton(const MenuButton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MenuButton)
}

void MenuButton::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuButton::~MenuButton() {
  // @@protoc_insertion_point(destructor:mpcomm.MenuButton)
  SharedDtor();
}

void MenuButton::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void MenuButton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuButton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuButton_descriptor_;
}

const MenuButton& MenuButton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MenuButton* MenuButton::default_instance_ = NULL;

MenuButton* MenuButton::New() const {
  return new MenuButton;
}

void MenuButton::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
  }
  sub_button_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuButton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MenuButton)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sub_button;
        break;
      }

      // repeated .mpcomm.MenuButton sub_button = 5;
      case 5: {
        if (tag == 42) {
         parse_sub_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sub_button;
        if (input->ExpectTag(50)) goto parse_media_id;
        break;
      }

      // optional string media_id = 6;
      case 6: {
        if (tag == 50) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MenuButton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MenuButton)
  return false;
#undef DO_
}

void MenuButton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MenuButton)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // repeated .mpcomm.MenuButton sub_button = 5;
  for (int i = 0; i < this->sub_button_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sub_button(i), output);
  }

  // optional string media_id = 6;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MenuButton)
}

::google::protobuf::uint8* MenuButton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MenuButton)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // repeated .mpcomm.MenuButton sub_button = 5;
  for (int i = 0; i < this->sub_button_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sub_button(i), target);
  }

  // optional string media_id = 6;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MenuButton)
  return target;
}

int MenuButton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string media_id = 6;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  // repeated .mpcomm.MenuButton sub_button = 5;
  total_size += 1 * this->sub_button_size();
  for (int i = 0; i < this->sub_button_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_button(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuButton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuButton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuButton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuButton::MergeFrom(const MenuButton& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_button_.MergeFrom(from.sub_button_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuButton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuButton::CopyFrom(const MenuButton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuButton::IsInitialized() const {

  return true;
}

void MenuButton::Swap(MenuButton* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(url_, other->url_);
    sub_button_.Swap(&other->sub_button_);
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuButton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuButton_descriptor_;
  metadata.reflection = MenuButton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuMatchRule::kTagIdFieldNumber;
const int MenuMatchRule::kGroupIdFieldNumber;
const int MenuMatchRule::kSexFieldNumber;
const int MenuMatchRule::kClientPlatformTypeFieldNumber;
const int MenuMatchRule::kCountryFieldNumber;
const int MenuMatchRule::kProvinceFieldNumber;
const int MenuMatchRule::kCityFieldNumber;
const int MenuMatchRule::kLanguageFieldNumber;
#endif  // !_MSC_VER

MenuMatchRule::MenuMatchRule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MenuMatchRule)
}

void MenuMatchRule::InitAsDefaultInstance() {
}

MenuMatchRule::MenuMatchRule(const MenuMatchRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MenuMatchRule)
}

void MenuMatchRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_platform_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuMatchRule::~MenuMatchRule() {
  // @@protoc_insertion_point(destructor:mpcomm.MenuMatchRule)
  SharedDtor();
}

void MenuMatchRule::SharedDtor() {
  if (tag_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_id_;
  }
  if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_id_;
  }
  if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sex_;
  }
  if (client_platform_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_platform_type_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (this != default_instance_) {
  }
}

void MenuMatchRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuMatchRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuMatchRule_descriptor_;
}

const MenuMatchRule& MenuMatchRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MenuMatchRule* MenuMatchRule::default_instance_ = NULL;

MenuMatchRule* MenuMatchRule::New() const {
  return new MenuMatchRule;
}

void MenuMatchRule::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_tag_id()) {
      if (tag_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_id_->clear();
      }
    }
    if (has_group_id()) {
      if (group_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_id_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sex_->clear();
      }
    }
    if (has_client_platform_type()) {
      if (client_platform_type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_platform_type_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuMatchRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MenuMatchRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag_id().data(), this->tag_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sex;
        break;
      }

      // optional string sex = 2;
      case 2: {
        if (tag == 18) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_platform_type;
        break;
      }

      // optional string client_platform_type = 3;
      case 3: {
        if (tag == 26) {
         parse_client_platform_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_platform_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_platform_type().data(), this->client_platform_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_platform_type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_country;
        break;
      }

      // optional string country = 4;
      case 4: {
        if (tag == 34) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_province;
        break;
      }

      // optional string province = 5;
      case 5: {
        if (tag == 42) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (tag == 50) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_language;
        break;
      }

      // optional string language = 7;
      case 7: {
        if (tag == 58) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_group_id;
        break;
      }

      // optional string group_id = 8;
      case 8: {
        if (tag == 66) {
         parse_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MenuMatchRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MenuMatchRule)
  return false;
#undef DO_
}

void MenuMatchRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MenuMatchRule)
  // optional string tag_id = 1;
  if (has_tag_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag_id().data(), this->tag_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag_id(), output);
  }

  // optional string sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sex(), output);
  }

  // optional string client_platform_type = 3;
  if (has_client_platform_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_platform_type().data(), this->client_platform_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_platform_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_platform_type(), output);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->country(), output);
  }

  // optional string province = 5;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->province(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  // optional string language = 7;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->language(), output);
  }

  // optional string group_id = 8;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MenuMatchRule)
}

::google::protobuf::uint8* MenuMatchRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MenuMatchRule)
  // optional string tag_id = 1;
  if (has_tag_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag_id().data(), this->tag_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag_id(), target);
  }

  // optional string sex = 2;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sex(), target);
  }

  // optional string client_platform_type = 3;
  if (has_client_platform_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_platform_type().data(), this->client_platform_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_platform_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_platform_type(), target);
  }

  // optional string country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->country(), target);
  }

  // optional string province = 5;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->province(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string language = 7;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->language(), target);
  }

  // optional string group_id = 8;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MenuMatchRule)
  return target;
}

int MenuMatchRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag_id = 1;
    if (has_tag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag_id());
    }

    // optional string group_id = 8;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_id());
    }

    // optional string sex = 2;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // optional string client_platform_type = 3;
    if (has_client_platform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_platform_type());
    }

    // optional string country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string province = 5;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string language = 7;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuMatchRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuMatchRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuMatchRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuMatchRule::MergeFrom(const MenuMatchRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag_id()) {
      set_tag_id(from.tag_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_client_platform_type()) {
      set_client_platform_type(from.client_platform_type());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuMatchRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuMatchRule::CopyFrom(const MenuMatchRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuMatchRule::IsInitialized() const {

  return true;
}

void MenuMatchRule::Swap(MenuMatchRule* other) {
  if (other != this) {
    std::swap(tag_id_, other->tag_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(sex_, other->sex_);
    std::swap(client_platform_type_, other->client_platform_type_);
    std::swap(country_, other->country_);
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(language_, other->language_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuMatchRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuMatchRule_descriptor_;
  metadata.reflection = MenuMatchRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Menu::kButtonFieldNumber;
const int Menu::kMatchruleFieldNumber;
const int Menu::kMenuidFieldNumber;
#endif  // !_MSC_VER

Menu::Menu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Menu)
}

void Menu::InitAsDefaultInstance() {
  matchrule_ = const_cast< ::mpcomm::MenuMatchRule*>(&::mpcomm::MenuMatchRule::default_instance());
}

Menu::Menu(const Menu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Menu)
}

void Menu::SharedCtor() {
  _cached_size_ = 0;
  matchrule_ = NULL;
  menuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Menu::~Menu() {
  // @@protoc_insertion_point(destructor:mpcomm.Menu)
  SharedDtor();
}

void Menu::SharedDtor() {
  if (this != default_instance_) {
    delete matchrule_;
  }
}

void Menu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Menu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Menu_descriptor_;
}

const Menu& Menu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Menu* Menu::default_instance_ = NULL;

Menu* Menu::New() const {
  return new Menu;
}

void Menu::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_matchrule()) {
      if (matchrule_ != NULL) matchrule_->::mpcomm::MenuMatchRule::Clear();
    }
    menuid_ = GOOGLE_ULONGLONG(0);
  }
  button_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Menu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.MenuButton button = 1;
      case 1: {
        if (tag == 10) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_button;
        if (input->ExpectTag(18)) goto parse_matchrule;
        break;
      }

      // optional .mpcomm.MenuMatchRule matchrule = 2;
      case 2: {
        if (tag == 18) {
         parse_matchrule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchrule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_menuid;
        break;
      }

      // optional uint64 menuid = 3;
      case 3: {
        if (tag == 24) {
         parse_menuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &menuid_)));
          set_has_menuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Menu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Menu)
  return false;
#undef DO_
}

void Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Menu)
  // repeated .mpcomm.MenuButton button = 1;
  for (int i = 0; i < this->button_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->button(i), output);
  }

  // optional .mpcomm.MenuMatchRule matchrule = 2;
  if (has_matchrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matchrule(), output);
  }

  // optional uint64 menuid = 3;
  if (has_menuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->menuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Menu)
}

::google::protobuf::uint8* Menu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Menu)
  // repeated .mpcomm.MenuButton button = 1;
  for (int i = 0; i < this->button_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->button(i), target);
  }

  // optional .mpcomm.MenuMatchRule matchrule = 2;
  if (has_matchrule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->matchrule(), target);
  }

  // optional uint64 menuid = 3;
  if (has_menuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->menuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Menu)
  return target;
}

int Menu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .mpcomm.MenuMatchRule matchrule = 2;
    if (has_matchrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchrule());
    }

    // optional uint64 menuid = 3;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->menuid());
    }

  }
  // repeated .mpcomm.MenuButton button = 1;
  total_size += 1 * this->button_size();
  for (int i = 0; i < this->button_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Menu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Menu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Menu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Menu::MergeFrom(const Menu& from) {
  GOOGLE_CHECK_NE(&from, this);
  button_.MergeFrom(from.button_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_matchrule()) {
      mutable_matchrule()->::mpcomm::MenuMatchRule::MergeFrom(from.matchrule());
    }
    if (from.has_menuid()) {
      set_menuid(from.menuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Menu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Menu::CopyFrom(const Menu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Menu::IsInitialized() const {

  return true;
}

void Menu::Swap(Menu* other) {
  if (other != this) {
    button_.Swap(&other->button_);
    std::swap(matchrule_, other->matchrule_);
    std::swap(menuid_, other->menuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Menu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Menu_descriptor_;
  metadata.reflection = Menu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMenuReq::kAccessTokenFieldNumber;
const int CreateMenuReq::kButtonFieldNumber;
#endif  // !_MSC_VER

CreateMenuReq::CreateMenuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CreateMenuReq)
}

void CreateMenuReq::InitAsDefaultInstance() {
}

CreateMenuReq::CreateMenuReq(const CreateMenuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CreateMenuReq)
}

void CreateMenuReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMenuReq::~CreateMenuReq() {
  // @@protoc_insertion_point(destructor:mpcomm.CreateMenuReq)
  SharedDtor();
}

void CreateMenuReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void CreateMenuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMenuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMenuReq_descriptor_;
}

const CreateMenuReq& CreateMenuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CreateMenuReq* CreateMenuReq::default_instance_ = NULL;

CreateMenuReq* CreateMenuReq::New() const {
  return new CreateMenuReq;
}

void CreateMenuReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  button_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMenuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CreateMenuReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_button;
        break;
      }

      // repeated .mpcomm.MenuButton button = 2;
      case 2: {
        if (tag == 18) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_button;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CreateMenuReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CreateMenuReq)
  return false;
#undef DO_
}

void CreateMenuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CreateMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated .mpcomm.MenuButton button = 2;
  for (int i = 0; i < this->button_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->button(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CreateMenuReq)
}

::google::protobuf::uint8* CreateMenuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CreateMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated .mpcomm.MenuButton button = 2;
  for (int i = 0; i < this->button_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->button(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CreateMenuReq)
  return target;
}

int CreateMenuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  // repeated .mpcomm.MenuButton button = 2;
  total_size += 1 * this->button_size();
  for (int i = 0; i < this->button_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMenuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMenuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMenuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMenuReq::MergeFrom(const CreateMenuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  button_.MergeFrom(from.button_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMenuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMenuReq::CopyFrom(const CreateMenuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMenuReq::IsInitialized() const {

  return true;
}

void CreateMenuReq::Swap(CreateMenuReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    button_.Swap(&other->button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMenuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMenuReq_descriptor_;
  metadata.reflection = CreateMenuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMenuResp::kErrcodeFieldNumber;
const int CreateMenuResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

CreateMenuResp::CreateMenuResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CreateMenuResp)
}

void CreateMenuResp::InitAsDefaultInstance() {
}

CreateMenuResp::CreateMenuResp(const CreateMenuResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CreateMenuResp)
}

void CreateMenuResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMenuResp::~CreateMenuResp() {
  // @@protoc_insertion_point(destructor:mpcomm.CreateMenuResp)
  SharedDtor();
}

void CreateMenuResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void CreateMenuResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMenuResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMenuResp_descriptor_;
}

const CreateMenuResp& CreateMenuResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CreateMenuResp* CreateMenuResp::default_instance_ = NULL;

CreateMenuResp* CreateMenuResp::New() const {
  return new CreateMenuResp;
}

void CreateMenuResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMenuResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CreateMenuResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CreateMenuResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CreateMenuResp)
  return false;
#undef DO_
}

void CreateMenuResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CreateMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CreateMenuResp)
}

::google::protobuf::uint8* CreateMenuResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CreateMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CreateMenuResp)
  return target;
}

int CreateMenuResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMenuResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMenuResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMenuResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMenuResp::MergeFrom(const CreateMenuResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMenuResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMenuResp::CopyFrom(const CreateMenuResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMenuResp::IsInitialized() const {

  return true;
}

void CreateMenuResp::Swap(CreateMenuResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMenuResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMenuResp_descriptor_;
  metadata.reflection = CreateMenuResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMenuReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetMenuReq::GetMenuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMenuReq)
}

void GetMenuReq::InitAsDefaultInstance() {
}

GetMenuReq::GetMenuReq(const GetMenuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMenuReq)
}

void GetMenuReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMenuReq::~GetMenuReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMenuReq)
  SharedDtor();
}

void GetMenuReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetMenuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMenuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMenuReq_descriptor_;
}

const GetMenuReq& GetMenuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMenuReq* GetMenuReq::default_instance_ = NULL;

GetMenuReq* GetMenuReq::New() const {
  return new GetMenuReq;
}

void GetMenuReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMenuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMenuReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMenuReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMenuReq)
  return false;
#undef DO_
}

void GetMenuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMenuReq)
}

::google::protobuf::uint8* GetMenuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMenuReq)
  return target;
}

int GetMenuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMenuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMenuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMenuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMenuReq::MergeFrom(const GetMenuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMenuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMenuReq::CopyFrom(const GetMenuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMenuReq::IsInitialized() const {

  return true;
}

void GetMenuReq::Swap(GetMenuReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMenuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMenuReq_descriptor_;
  metadata.reflection = GetMenuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMenuResp::kErrcodeFieldNumber;
const int GetMenuResp::kErrmsgFieldNumber;
const int GetMenuResp::kMenuFieldNumber;
const int GetMenuResp::kConditionalmenuFieldNumber;
#endif  // !_MSC_VER

GetMenuResp::GetMenuResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMenuResp)
}

void GetMenuResp::InitAsDefaultInstance() {
  menu_ = const_cast< ::mpcomm::Menu*>(&::mpcomm::Menu::default_instance());
}

GetMenuResp::GetMenuResp(const GetMenuResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMenuResp)
}

void GetMenuResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  menu_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMenuResp::~GetMenuResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMenuResp)
  SharedDtor();
}

void GetMenuResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete menu_;
  }
}

void GetMenuResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMenuResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMenuResp_descriptor_;
}

const GetMenuResp& GetMenuResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMenuResp* GetMenuResp::default_instance_ = NULL;

GetMenuResp* GetMenuResp::New() const {
  return new GetMenuResp;
}

void GetMenuResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_menu()) {
      if (menu_ != NULL) menu_->::mpcomm::Menu::Clear();
    }
  }
  conditionalmenu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMenuResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMenuResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_menu;
        break;
      }

      // optional .mpcomm.Menu menu = 3;
      case 3: {
        if (tag == 26) {
         parse_menu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_menu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditionalmenu;
        break;
      }

      // repeated .mpcomm.Menu conditionalmenu = 4;
      case 4: {
        if (tag == 34) {
         parse_conditionalmenu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_conditionalmenu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_conditionalmenu;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMenuResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMenuResp)
  return false;
#undef DO_
}

void GetMenuResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional .mpcomm.Menu menu = 3;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->menu(), output);
  }

  // repeated .mpcomm.Menu conditionalmenu = 4;
  for (int i = 0; i < this->conditionalmenu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conditionalmenu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMenuResp)
}

::google::protobuf::uint8* GetMenuResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional .mpcomm.Menu menu = 3;
  if (has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->menu(), target);
  }

  // repeated .mpcomm.Menu conditionalmenu = 4;
  for (int i = 0; i < this->conditionalmenu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->conditionalmenu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMenuResp)
  return target;
}

int GetMenuResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional .mpcomm.Menu menu = 3;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->menu());
    }

  }
  // repeated .mpcomm.Menu conditionalmenu = 4;
  total_size += 1 * this->conditionalmenu_size();
  for (int i = 0; i < this->conditionalmenu_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditionalmenu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMenuResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMenuResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMenuResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMenuResp::MergeFrom(const GetMenuResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  conditionalmenu_.MergeFrom(from.conditionalmenu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_menu()) {
      mutable_menu()->::mpcomm::Menu::MergeFrom(from.menu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMenuResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMenuResp::CopyFrom(const GetMenuResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMenuResp::IsInitialized() const {

  return true;
}

void GetMenuResp::Swap(GetMenuResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(menu_, other->menu_);
    conditionalmenu_.Swap(&other->conditionalmenu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMenuResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMenuResp_descriptor_;
  metadata.reflection = GetMenuResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMenuReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

DeleteMenuReq::DeleteMenuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DeleteMenuReq)
}

void DeleteMenuReq::InitAsDefaultInstance() {
}

DeleteMenuReq::DeleteMenuReq(const DeleteMenuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DeleteMenuReq)
}

void DeleteMenuReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMenuReq::~DeleteMenuReq() {
  // @@protoc_insertion_point(destructor:mpcomm.DeleteMenuReq)
  SharedDtor();
}

void DeleteMenuReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void DeleteMenuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteMenuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteMenuReq_descriptor_;
}

const DeleteMenuReq& DeleteMenuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DeleteMenuReq* DeleteMenuReq::default_instance_ = NULL;

DeleteMenuReq* DeleteMenuReq::New() const {
  return new DeleteMenuReq;
}

void DeleteMenuReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteMenuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DeleteMenuReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DeleteMenuReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DeleteMenuReq)
  return false;
#undef DO_
}

void DeleteMenuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DeleteMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DeleteMenuReq)
}

::google::protobuf::uint8* DeleteMenuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DeleteMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DeleteMenuReq)
  return target;
}

int DeleteMenuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMenuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteMenuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteMenuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteMenuReq::MergeFrom(const DeleteMenuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteMenuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMenuReq::CopyFrom(const DeleteMenuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMenuReq::IsInitialized() const {

  return true;
}

void DeleteMenuReq::Swap(DeleteMenuReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteMenuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteMenuReq_descriptor_;
  metadata.reflection = DeleteMenuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMenuResp::kErrcodeFieldNumber;
const int DeleteMenuResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

DeleteMenuResp::DeleteMenuResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DeleteMenuResp)
}

void DeleteMenuResp::InitAsDefaultInstance() {
}

DeleteMenuResp::DeleteMenuResp(const DeleteMenuResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DeleteMenuResp)
}

void DeleteMenuResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMenuResp::~DeleteMenuResp() {
  // @@protoc_insertion_point(destructor:mpcomm.DeleteMenuResp)
  SharedDtor();
}

void DeleteMenuResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void DeleteMenuResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteMenuResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteMenuResp_descriptor_;
}

const DeleteMenuResp& DeleteMenuResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DeleteMenuResp* DeleteMenuResp::default_instance_ = NULL;

DeleteMenuResp* DeleteMenuResp::New() const {
  return new DeleteMenuResp;
}

void DeleteMenuResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteMenuResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DeleteMenuResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DeleteMenuResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DeleteMenuResp)
  return false;
#undef DO_
}

void DeleteMenuResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DeleteMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DeleteMenuResp)
}

::google::protobuf::uint8* DeleteMenuResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DeleteMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DeleteMenuResp)
  return target;
}

int DeleteMenuResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMenuResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteMenuResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteMenuResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteMenuResp::MergeFrom(const DeleteMenuResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteMenuResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMenuResp::CopyFrom(const DeleteMenuResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMenuResp::IsInitialized() const {

  return true;
}

void DeleteMenuResp::Swap(DeleteMenuResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteMenuResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteMenuResp_descriptor_;
  metadata.reflection = DeleteMenuResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddConditionalMenuReq::kAccessTokenFieldNumber;
const int AddConditionalMenuReq::kButtonFieldNumber;
const int AddConditionalMenuReq::kMatchruleFieldNumber;
#endif  // !_MSC_VER

AddConditionalMenuReq::AddConditionalMenuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddConditionalMenuReq)
}

void AddConditionalMenuReq::InitAsDefaultInstance() {
  matchrule_ = const_cast< ::mpcomm::MenuMatchRule*>(&::mpcomm::MenuMatchRule::default_instance());
}

AddConditionalMenuReq::AddConditionalMenuReq(const AddConditionalMenuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddConditionalMenuReq)
}

void AddConditionalMenuReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchrule_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddConditionalMenuReq::~AddConditionalMenuReq() {
  // @@protoc_insertion_point(destructor:mpcomm.AddConditionalMenuReq)
  SharedDtor();
}

void AddConditionalMenuReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
    delete matchrule_;
  }
}

void AddConditionalMenuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddConditionalMenuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddConditionalMenuReq_descriptor_;
}

const AddConditionalMenuReq& AddConditionalMenuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddConditionalMenuReq* AddConditionalMenuReq::default_instance_ = NULL;

AddConditionalMenuReq* AddConditionalMenuReq::New() const {
  return new AddConditionalMenuReq;
}

void AddConditionalMenuReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_matchrule()) {
      if (matchrule_ != NULL) matchrule_->::mpcomm::MenuMatchRule::Clear();
    }
  }
  button_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddConditionalMenuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddConditionalMenuReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_button;
        break;
      }

      // repeated .mpcomm.MenuButton button = 2;
      case 2: {
        if (tag == 18) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_button;
        if (input->ExpectTag(26)) goto parse_matchrule;
        break;
      }

      // optional .mpcomm.MenuMatchRule matchrule = 3;
      case 3: {
        if (tag == 26) {
         parse_matchrule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matchrule()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddConditionalMenuReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddConditionalMenuReq)
  return false;
#undef DO_
}

void AddConditionalMenuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddConditionalMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated .mpcomm.MenuButton button = 2;
  for (int i = 0; i < this->button_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->button(i), output);
  }

  // optional .mpcomm.MenuMatchRule matchrule = 3;
  if (has_matchrule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->matchrule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddConditionalMenuReq)
}

::google::protobuf::uint8* AddConditionalMenuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddConditionalMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated .mpcomm.MenuButton button = 2;
  for (int i = 0; i < this->button_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->button(i), target);
  }

  // optional .mpcomm.MenuMatchRule matchrule = 3;
  if (has_matchrule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->matchrule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddConditionalMenuReq)
  return target;
}

int AddConditionalMenuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional .mpcomm.MenuMatchRule matchrule = 3;
    if (has_matchrule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchrule());
    }

  }
  // repeated .mpcomm.MenuButton button = 2;
  total_size += 1 * this->button_size();
  for (int i = 0; i < this->button_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddConditionalMenuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddConditionalMenuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddConditionalMenuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddConditionalMenuReq::MergeFrom(const AddConditionalMenuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  button_.MergeFrom(from.button_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_matchrule()) {
      mutable_matchrule()->::mpcomm::MenuMatchRule::MergeFrom(from.matchrule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddConditionalMenuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddConditionalMenuReq::CopyFrom(const AddConditionalMenuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddConditionalMenuReq::IsInitialized() const {

  return true;
}

void AddConditionalMenuReq::Swap(AddConditionalMenuReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    button_.Swap(&other->button_);
    std::swap(matchrule_, other->matchrule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddConditionalMenuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddConditionalMenuReq_descriptor_;
  metadata.reflection = AddConditionalMenuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddConditionalMenuResp::kErrcodeFieldNumber;
const int AddConditionalMenuResp::kErrmsgFieldNumber;
const int AddConditionalMenuResp::kMenuidFieldNumber;
#endif  // !_MSC_VER

AddConditionalMenuResp::AddConditionalMenuResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddConditionalMenuResp)
}

void AddConditionalMenuResp::InitAsDefaultInstance() {
}

AddConditionalMenuResp::AddConditionalMenuResp(const AddConditionalMenuResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddConditionalMenuResp)
}

void AddConditionalMenuResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  menuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddConditionalMenuResp::~AddConditionalMenuResp() {
  // @@protoc_insertion_point(destructor:mpcomm.AddConditionalMenuResp)
  SharedDtor();
}

void AddConditionalMenuResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void AddConditionalMenuResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddConditionalMenuResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddConditionalMenuResp_descriptor_;
}

const AddConditionalMenuResp& AddConditionalMenuResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddConditionalMenuResp* AddConditionalMenuResp::default_instance_ = NULL;

AddConditionalMenuResp* AddConditionalMenuResp::New() const {
  return new AddConditionalMenuResp;
}

void AddConditionalMenuResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    menuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddConditionalMenuResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddConditionalMenuResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_menuid;
        break;
      }

      // optional uint64 menuid = 3;
      case 3: {
        if (tag == 24) {
         parse_menuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &menuid_)));
          set_has_menuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddConditionalMenuResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddConditionalMenuResp)
  return false;
#undef DO_
}

void AddConditionalMenuResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddConditionalMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 menuid = 3;
  if (has_menuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->menuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddConditionalMenuResp)
}

::google::protobuf::uint8* AddConditionalMenuResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddConditionalMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 menuid = 3;
  if (has_menuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->menuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddConditionalMenuResp)
  return target;
}

int AddConditionalMenuResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 menuid = 3;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->menuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddConditionalMenuResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddConditionalMenuResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddConditionalMenuResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddConditionalMenuResp::MergeFrom(const AddConditionalMenuResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_menuid()) {
      set_menuid(from.menuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddConditionalMenuResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddConditionalMenuResp::CopyFrom(const AddConditionalMenuResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddConditionalMenuResp::IsInitialized() const {

  return true;
}

void AddConditionalMenuResp::Swap(AddConditionalMenuResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(menuid_, other->menuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddConditionalMenuResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddConditionalMenuResp_descriptor_;
  metadata.reflection = AddConditionalMenuResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelConditionalMenuReq::kAccessTokenFieldNumber;
const int DelConditionalMenuReq::kMenuidFieldNumber;
#endif  // !_MSC_VER

DelConditionalMenuReq::DelConditionalMenuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DelConditionalMenuReq)
}

void DelConditionalMenuReq::InitAsDefaultInstance() {
}

DelConditionalMenuReq::DelConditionalMenuReq(const DelConditionalMenuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DelConditionalMenuReq)
}

void DelConditionalMenuReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  menuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelConditionalMenuReq::~DelConditionalMenuReq() {
  // @@protoc_insertion_point(destructor:mpcomm.DelConditionalMenuReq)
  SharedDtor();
}

void DelConditionalMenuReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void DelConditionalMenuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelConditionalMenuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelConditionalMenuReq_descriptor_;
}

const DelConditionalMenuReq& DelConditionalMenuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DelConditionalMenuReq* DelConditionalMenuReq::default_instance_ = NULL;

DelConditionalMenuReq* DelConditionalMenuReq::New() const {
  return new DelConditionalMenuReq;
}

void DelConditionalMenuReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    menuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelConditionalMenuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DelConditionalMenuReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_menuid;
        break;
      }

      // optional uint64 menuid = 2;
      case 2: {
        if (tag == 16) {
         parse_menuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &menuid_)));
          set_has_menuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DelConditionalMenuReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DelConditionalMenuReq)
  return false;
#undef DO_
}

void DelConditionalMenuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DelConditionalMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional uint64 menuid = 2;
  if (has_menuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->menuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DelConditionalMenuReq)
}

::google::protobuf::uint8* DelConditionalMenuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DelConditionalMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional uint64 menuid = 2;
  if (has_menuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->menuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DelConditionalMenuReq)
  return target;
}

int DelConditionalMenuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 menuid = 2;
    if (has_menuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->menuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelConditionalMenuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelConditionalMenuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelConditionalMenuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelConditionalMenuReq::MergeFrom(const DelConditionalMenuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_menuid()) {
      set_menuid(from.menuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelConditionalMenuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelConditionalMenuReq::CopyFrom(const DelConditionalMenuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelConditionalMenuReq::IsInitialized() const {

  return true;
}

void DelConditionalMenuReq::Swap(DelConditionalMenuReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(menuid_, other->menuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelConditionalMenuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelConditionalMenuReq_descriptor_;
  metadata.reflection = DelConditionalMenuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelConditionalMenuResp::kErrcodeFieldNumber;
const int DelConditionalMenuResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

DelConditionalMenuResp::DelConditionalMenuResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DelConditionalMenuResp)
}

void DelConditionalMenuResp::InitAsDefaultInstance() {
}

DelConditionalMenuResp::DelConditionalMenuResp(const DelConditionalMenuResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DelConditionalMenuResp)
}

void DelConditionalMenuResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelConditionalMenuResp::~DelConditionalMenuResp() {
  // @@protoc_insertion_point(destructor:mpcomm.DelConditionalMenuResp)
  SharedDtor();
}

void DelConditionalMenuResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void DelConditionalMenuResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelConditionalMenuResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelConditionalMenuResp_descriptor_;
}

const DelConditionalMenuResp& DelConditionalMenuResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DelConditionalMenuResp* DelConditionalMenuResp::default_instance_ = NULL;

DelConditionalMenuResp* DelConditionalMenuResp::New() const {
  return new DelConditionalMenuResp;
}

void DelConditionalMenuResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelConditionalMenuResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DelConditionalMenuResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DelConditionalMenuResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DelConditionalMenuResp)
  return false;
#undef DO_
}

void DelConditionalMenuResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DelConditionalMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DelConditionalMenuResp)
}

::google::protobuf::uint8* DelConditionalMenuResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DelConditionalMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DelConditionalMenuResp)
  return target;
}

int DelConditionalMenuResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelConditionalMenuResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelConditionalMenuResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelConditionalMenuResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelConditionalMenuResp::MergeFrom(const DelConditionalMenuResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelConditionalMenuResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelConditionalMenuResp::CopyFrom(const DelConditionalMenuResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelConditionalMenuResp::IsInitialized() const {

  return true;
}

void DelConditionalMenuResp::Swap(DelConditionalMenuResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelConditionalMenuResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelConditionalMenuResp_descriptor_;
  metadata.reflection = DelConditionalMenuResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TryMatchMenuReq::kAccessTokenFieldNumber;
const int TryMatchMenuReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

TryMatchMenuReq::TryMatchMenuReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.TryMatchMenuReq)
}

void TryMatchMenuReq::InitAsDefaultInstance() {
}

TryMatchMenuReq::TryMatchMenuReq(const TryMatchMenuReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.TryMatchMenuReq)
}

void TryMatchMenuReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TryMatchMenuReq::~TryMatchMenuReq() {
  // @@protoc_insertion_point(destructor:mpcomm.TryMatchMenuReq)
  SharedDtor();
}

void TryMatchMenuReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_id_;
  }
  if (this != default_instance_) {
  }
}

void TryMatchMenuReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryMatchMenuReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryMatchMenuReq_descriptor_;
}

const TryMatchMenuReq& TryMatchMenuReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

TryMatchMenuReq* TryMatchMenuReq::default_instance_ = NULL;

TryMatchMenuReq* TryMatchMenuReq::New() const {
  return new TryMatchMenuReq;
}

void TryMatchMenuReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TryMatchMenuReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.TryMatchMenuReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.TryMatchMenuReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.TryMatchMenuReq)
  return false;
#undef DO_
}

void TryMatchMenuReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.TryMatchMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.TryMatchMenuReq)
}

::google::protobuf::uint8* TryMatchMenuReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.TryMatchMenuReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.TryMatchMenuReq)
  return target;
}

int TryMatchMenuReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryMatchMenuReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TryMatchMenuReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TryMatchMenuReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TryMatchMenuReq::MergeFrom(const TryMatchMenuReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TryMatchMenuReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryMatchMenuReq::CopyFrom(const TryMatchMenuReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryMatchMenuReq::IsInitialized() const {

  return true;
}

void TryMatchMenuReq::Swap(TryMatchMenuReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TryMatchMenuReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TryMatchMenuReq_descriptor_;
  metadata.reflection = TryMatchMenuReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TryMatchMenuResp::kErrcodeFieldNumber;
const int TryMatchMenuResp::kErrmsgFieldNumber;
const int TryMatchMenuResp::kButtonFieldNumber;
#endif  // !_MSC_VER

TryMatchMenuResp::TryMatchMenuResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.TryMatchMenuResp)
}

void TryMatchMenuResp::InitAsDefaultInstance() {
}

TryMatchMenuResp::TryMatchMenuResp(const TryMatchMenuResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.TryMatchMenuResp)
}

void TryMatchMenuResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TryMatchMenuResp::~TryMatchMenuResp() {
  // @@protoc_insertion_point(destructor:mpcomm.TryMatchMenuResp)
  SharedDtor();
}

void TryMatchMenuResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void TryMatchMenuResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryMatchMenuResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TryMatchMenuResp_descriptor_;
}

const TryMatchMenuResp& TryMatchMenuResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

TryMatchMenuResp* TryMatchMenuResp::default_instance_ = NULL;

TryMatchMenuResp* TryMatchMenuResp::New() const {
  return new TryMatchMenuResp;
}

void TryMatchMenuResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  button_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TryMatchMenuResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.TryMatchMenuResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_button;
        break;
      }

      // repeated .mpcomm.MenuButton button = 3;
      case 3: {
        if (tag == 26) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_button;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.TryMatchMenuResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.TryMatchMenuResp)
  return false;
#undef DO_
}

void TryMatchMenuResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.TryMatchMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated .mpcomm.MenuButton button = 3;
  for (int i = 0; i < this->button_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->button(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.TryMatchMenuResp)
}

::google::protobuf::uint8* TryMatchMenuResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.TryMatchMenuResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated .mpcomm.MenuButton button = 3;
  for (int i = 0; i < this->button_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->button(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.TryMatchMenuResp)
  return target;
}

int TryMatchMenuResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .mpcomm.MenuButton button = 3;
  total_size += 1 * this->button_size();
  for (int i = 0; i < this->button_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryMatchMenuResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TryMatchMenuResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TryMatchMenuResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TryMatchMenuResp::MergeFrom(const TryMatchMenuResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  button_.MergeFrom(from.button_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TryMatchMenuResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryMatchMenuResp::CopyFrom(const TryMatchMenuResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryMatchMenuResp::IsInitialized() const {

  return true;
}

void TryMatchMenuResp::Swap(TryMatchMenuResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    button_.Swap(&other->button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TryMatchMenuResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TryMatchMenuResp_descriptor_;
  metadata.reflection = TryMatchMenuResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurrentSelfMenuInfoReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetCurrentSelfMenuInfoReq::GetCurrentSelfMenuInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetCurrentSelfMenuInfoReq)
}

void GetCurrentSelfMenuInfoReq::InitAsDefaultInstance() {
}

GetCurrentSelfMenuInfoReq::GetCurrentSelfMenuInfoReq(const GetCurrentSelfMenuInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetCurrentSelfMenuInfoReq)
}

void GetCurrentSelfMenuInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurrentSelfMenuInfoReq::~GetCurrentSelfMenuInfoReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetCurrentSelfMenuInfoReq)
  SharedDtor();
}

void GetCurrentSelfMenuInfoReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetCurrentSelfMenuInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurrentSelfMenuInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurrentSelfMenuInfoReq_descriptor_;
}

const GetCurrentSelfMenuInfoReq& GetCurrentSelfMenuInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetCurrentSelfMenuInfoReq* GetCurrentSelfMenuInfoReq::default_instance_ = NULL;

GetCurrentSelfMenuInfoReq* GetCurrentSelfMenuInfoReq::New() const {
  return new GetCurrentSelfMenuInfoReq;
}

void GetCurrentSelfMenuInfoReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurrentSelfMenuInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetCurrentSelfMenuInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetCurrentSelfMenuInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetCurrentSelfMenuInfoReq)
  return false;
#undef DO_
}

void GetCurrentSelfMenuInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetCurrentSelfMenuInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetCurrentSelfMenuInfoReq)
}

::google::protobuf::uint8* GetCurrentSelfMenuInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetCurrentSelfMenuInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetCurrentSelfMenuInfoReq)
  return target;
}

int GetCurrentSelfMenuInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurrentSelfMenuInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurrentSelfMenuInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurrentSelfMenuInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurrentSelfMenuInfoReq::MergeFrom(const GetCurrentSelfMenuInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurrentSelfMenuInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurrentSelfMenuInfoReq::CopyFrom(const GetCurrentSelfMenuInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentSelfMenuInfoReq::IsInitialized() const {

  return true;
}

void GetCurrentSelfMenuInfoReq::Swap(GetCurrentSelfMenuInfoReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurrentSelfMenuInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurrentSelfMenuInfoReq_descriptor_;
  metadata.reflection = GetCurrentSelfMenuInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespNews::kTitleFieldNumber;
const int RespNews::kAuthorFieldNumber;
const int RespNews::kDigestFieldNumber;
const int RespNews::kShowCoverFieldNumber;
const int RespNews::kCoverUrlFieldNumber;
const int RespNews::kContentUrlFieldNumber;
const int RespNews::kSourceUrlFieldNumber;
#endif  // !_MSC_VER

RespNews::RespNews()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.RespNews)
}

void RespNews::InitAsDefaultInstance() {
}

RespNews::RespNews(const RespNews& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.RespNews)
}

void RespNews::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_cover_ = GOOGLE_ULONGLONG(0);
  cover_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespNews::~RespNews() {
  // @@protoc_insertion_point(destructor:mpcomm.RespNews)
  SharedDtor();
}

void RespNews::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete author_;
  }
  if (digest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete digest_;
  }
  if (cover_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cover_url_;
  }
  if (content_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_url_;
  }
  if (source_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_url_;
  }
  if (this != default_instance_) {
  }
}

void RespNews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespNews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespNews_descriptor_;
}

const RespNews& RespNews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

RespNews* RespNews::default_instance_ = NULL;

RespNews* RespNews::New() const {
  return new RespNews;
}

void RespNews::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        author_->clear();
      }
    }
    if (has_digest()) {
      if (digest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        digest_->clear();
      }
    }
    show_cover_ = GOOGLE_ULONGLONG(0);
    if (has_cover_url()) {
      if (cover_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cover_url_->clear();
      }
    }
    if (has_content_url()) {
      if (content_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_url_->clear();
      }
    }
    if (has_source_url()) {
      if (source_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespNews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.RespNews)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_author;
        break;
      }

      // optional string author = 2;
      case 2: {
        if (tag == 18) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_digest;
        break;
      }

      // optional string digest = 3;
      case 3: {
        if (tag == 26) {
         parse_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->digest().data(), this->digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "digest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_show_cover;
        break;
      }

      // optional uint64 show_cover = 4;
      case 4: {
        if (tag == 32) {
         parse_show_cover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_cover_)));
          set_has_show_cover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cover_url;
        break;
      }

      // optional string cover_url = 5;
      case 5: {
        if (tag == 42) {
         parse_cover_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cover_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cover_url().data(), this->cover_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cover_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content_url;
        break;
      }

      // optional string content_url = 6;
      case 6: {
        if (tag == 50) {
         parse_content_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_url().data(), this->content_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_source_url;
        break;
      }

      // optional string source_url = 7;
      case 7: {
        if (tag == 58) {
         parse_source_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_url().data(), this->source_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.RespNews)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.RespNews)
  return false;
#undef DO_
}

void RespNews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.RespNews)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author(), output);
  }

  // optional string digest = 3;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->digest(), output);
  }

  // optional uint64 show_cover = 4;
  if (has_show_cover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_cover(), output);
  }

  // optional string cover_url = 5;
  if (has_cover_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cover_url().data(), this->cover_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cover_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->cover_url(), output);
  }

  // optional string content_url = 6;
  if (has_content_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_url().data(), this->content_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content_url(), output);
  }

  // optional string source_url = 7;
  if (has_source_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_url().data(), this->source_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->source_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.RespNews)
}

::google::protobuf::uint8* RespNews::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.RespNews)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author(), target);
  }

  // optional string digest = 3;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->digest(), target);
  }

  // optional uint64 show_cover = 4;
  if (has_show_cover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_cover(), target);
  }

  // optional string cover_url = 5;
  if (has_cover_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cover_url().data(), this->cover_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cover_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cover_url(), target);
  }

  // optional string content_url = 6;
  if (has_content_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_url().data(), this->content_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content_url(), target);
  }

  // optional string source_url = 7;
  if (has_source_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_url().data(), this->source_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->source_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.RespNews)
  return target;
}

int RespNews::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string author = 2;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional string digest = 3;
    if (has_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional uint64 show_cover = 4;
    if (has_show_cover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_cover());
    }

    // optional string cover_url = 5;
    if (has_cover_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cover_url());
    }

    // optional string content_url = 6;
    if (has_content_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_url());
    }

    // optional string source_url = 7;
    if (has_source_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespNews::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespNews* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespNews*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespNews::MergeFrom(const RespNews& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
    if (from.has_digest()) {
      set_digest(from.digest());
    }
    if (from.has_show_cover()) {
      set_show_cover(from.show_cover());
    }
    if (from.has_cover_url()) {
      set_cover_url(from.cover_url());
    }
    if (from.has_content_url()) {
      set_content_url(from.content_url());
    }
    if (from.has_source_url()) {
      set_source_url(from.source_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespNews::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespNews::CopyFrom(const RespNews& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespNews::IsInitialized() const {

  return true;
}

void RespNews::Swap(RespNews* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(author_, other->author_);
    std::swap(digest_, other->digest_);
    std::swap(show_cover_, other->show_cover_);
    std::swap(cover_url_, other->cover_url_);
    std::swap(content_url_, other->content_url_);
    std::swap(source_url_, other->source_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespNews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespNews_descriptor_;
  metadata.reflection = RespNews_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespNewsList::kListFieldNumber;
#endif  // !_MSC_VER

RespNewsList::RespNewsList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.RespNewsList)
}

void RespNewsList::InitAsDefaultInstance() {
}

RespNewsList::RespNewsList(const RespNewsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.RespNewsList)
}

void RespNewsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespNewsList::~RespNewsList() {
  // @@protoc_insertion_point(destructor:mpcomm.RespNewsList)
  SharedDtor();
}

void RespNewsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RespNewsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespNewsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespNewsList_descriptor_;
}

const RespNewsList& RespNewsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

RespNewsList* RespNewsList::default_instance_ = NULL;

RespNewsList* RespNewsList::New() const {
  return new RespNewsList;
}

void RespNewsList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespNewsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.RespNewsList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.RespNews list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.RespNewsList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.RespNewsList)
  return false;
#undef DO_
}

void RespNewsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.RespNewsList)
  // repeated .mpcomm.RespNews list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.RespNewsList)
}

::google::protobuf::uint8* RespNewsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.RespNewsList)
  // repeated .mpcomm.RespNews list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.RespNewsList)
  return target;
}

int RespNewsList::ByteSize() const {
  int total_size = 0;

  // repeated .mpcomm.RespNews list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespNewsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespNewsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespNewsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespNewsList::MergeFrom(const RespNewsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespNewsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespNewsList::CopyFrom(const RespNewsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespNewsList::IsInitialized() const {

  return true;
}

void RespNewsList::Swap(RespNewsList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespNewsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespNewsList_descriptor_;
  metadata.reflection = RespNewsList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentSelfMenuButton::kTypeFieldNumber;
const int CurrentSelfMenuButton::kNameFieldNumber;
const int CurrentSelfMenuButton::kKeyFieldNumber;
const int CurrentSelfMenuButton::kUrlFieldNumber;
const int CurrentSelfMenuButton::kValueFieldNumber;
const int CurrentSelfMenuButton::kNewsInfoFieldNumber;
const int CurrentSelfMenuButton::kSubButtonFieldNumber;
#endif  // !_MSC_VER

CurrentSelfMenuButton::CurrentSelfMenuButton()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CurrentSelfMenuButton)
}

void CurrentSelfMenuButton::InitAsDefaultInstance() {
  news_info_ = const_cast< ::mpcomm::RespNewsList*>(&::mpcomm::RespNewsList::default_instance());
  sub_button_ = const_cast< ::mpcomm::CurrentSelfMenuButtonList*>(&::mpcomm::CurrentSelfMenuButtonList::default_instance());
}

CurrentSelfMenuButton::CurrentSelfMenuButton(const CurrentSelfMenuButton& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CurrentSelfMenuButton)
}

void CurrentSelfMenuButton::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  news_info_ = NULL;
  sub_button_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentSelfMenuButton::~CurrentSelfMenuButton() {
  // @@protoc_insertion_point(destructor:mpcomm.CurrentSelfMenuButton)
  SharedDtor();
}

void CurrentSelfMenuButton::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
    delete news_info_;
    delete sub_button_;
  }
}

void CurrentSelfMenuButton::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentSelfMenuButton::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentSelfMenuButton_descriptor_;
}

const CurrentSelfMenuButton& CurrentSelfMenuButton::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CurrentSelfMenuButton* CurrentSelfMenuButton::default_instance_ = NULL;

CurrentSelfMenuButton* CurrentSelfMenuButton::New() const {
  return new CurrentSelfMenuButton;
}

void CurrentSelfMenuButton::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    if (has_news_info()) {
      if (news_info_ != NULL) news_info_->::mpcomm::RespNewsList::Clear();
    }
    if (has_sub_button()) {
      if (sub_button_ != NULL) sub_button_->::mpcomm::CurrentSelfMenuButtonList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentSelfMenuButton::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CurrentSelfMenuButton)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional string key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional string value = 5;
      case 5: {
        if (tag == 42) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_news_info;
        break;
      }

      // optional .mpcomm.RespNewsList news_info = 6;
      case 6: {
        if (tag == 50) {
         parse_news_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sub_button;
        break;
      }

      // optional .mpcomm.CurrentSelfMenuButtonList sub_button = 7;
      case 7: {
        if (tag == 58) {
         parse_sub_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sub_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CurrentSelfMenuButton)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CurrentSelfMenuButton)
  return false;
#undef DO_
}

void CurrentSelfMenuButton::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CurrentSelfMenuButton)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->key(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value(), output);
  }

  // optional .mpcomm.RespNewsList news_info = 6;
  if (has_news_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->news_info(), output);
  }

  // optional .mpcomm.CurrentSelfMenuButtonList sub_button = 7;
  if (has_sub_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sub_button(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CurrentSelfMenuButton)
}

::google::protobuf::uint8* CurrentSelfMenuButton::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CurrentSelfMenuButton)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->value(), target);
  }

  // optional .mpcomm.RespNewsList news_info = 6;
  if (has_news_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->news_info(), target);
  }

  // optional .mpcomm.CurrentSelfMenuButtonList sub_button = 7;
  if (has_sub_button()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sub_button(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CurrentSelfMenuButton)
  return target;
}

int CurrentSelfMenuButton::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .mpcomm.RespNewsList news_info = 6;
    if (has_news_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->news_info());
    }

    // optional .mpcomm.CurrentSelfMenuButtonList sub_button = 7;
    if (has_sub_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sub_button());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentSelfMenuButton::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentSelfMenuButton* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentSelfMenuButton*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentSelfMenuButton::MergeFrom(const CurrentSelfMenuButton& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_news_info()) {
      mutable_news_info()->::mpcomm::RespNewsList::MergeFrom(from.news_info());
    }
    if (from.has_sub_button()) {
      mutable_sub_button()->::mpcomm::CurrentSelfMenuButtonList::MergeFrom(from.sub_button());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentSelfMenuButton::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentSelfMenuButton::CopyFrom(const CurrentSelfMenuButton& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentSelfMenuButton::IsInitialized() const {

  return true;
}

void CurrentSelfMenuButton::Swap(CurrentSelfMenuButton* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(key_, other->key_);
    std::swap(url_, other->url_);
    std::swap(value_, other->value_);
    std::swap(news_info_, other->news_info_);
    std::swap(sub_button_, other->sub_button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentSelfMenuButton::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentSelfMenuButton_descriptor_;
  metadata.reflection = CurrentSelfMenuButton_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentSelfMenuButtonList::kListFieldNumber;
#endif  // !_MSC_VER

CurrentSelfMenuButtonList::CurrentSelfMenuButtonList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CurrentSelfMenuButtonList)
}

void CurrentSelfMenuButtonList::InitAsDefaultInstance() {
}

CurrentSelfMenuButtonList::CurrentSelfMenuButtonList(const CurrentSelfMenuButtonList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CurrentSelfMenuButtonList)
}

void CurrentSelfMenuButtonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentSelfMenuButtonList::~CurrentSelfMenuButtonList() {
  // @@protoc_insertion_point(destructor:mpcomm.CurrentSelfMenuButtonList)
  SharedDtor();
}

void CurrentSelfMenuButtonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentSelfMenuButtonList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentSelfMenuButtonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentSelfMenuButtonList_descriptor_;
}

const CurrentSelfMenuButtonList& CurrentSelfMenuButtonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CurrentSelfMenuButtonList* CurrentSelfMenuButtonList::default_instance_ = NULL;

CurrentSelfMenuButtonList* CurrentSelfMenuButtonList::New() const {
  return new CurrentSelfMenuButtonList;
}

void CurrentSelfMenuButtonList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentSelfMenuButtonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CurrentSelfMenuButtonList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.CurrentSelfMenuButton list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CurrentSelfMenuButtonList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CurrentSelfMenuButtonList)
  return false;
#undef DO_
}

void CurrentSelfMenuButtonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CurrentSelfMenuButtonList)
  // repeated .mpcomm.CurrentSelfMenuButton list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CurrentSelfMenuButtonList)
}

::google::protobuf::uint8* CurrentSelfMenuButtonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CurrentSelfMenuButtonList)
  // repeated .mpcomm.CurrentSelfMenuButton list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CurrentSelfMenuButtonList)
  return target;
}

int CurrentSelfMenuButtonList::ByteSize() const {
  int total_size = 0;

  // repeated .mpcomm.CurrentSelfMenuButton list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentSelfMenuButtonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentSelfMenuButtonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentSelfMenuButtonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentSelfMenuButtonList::MergeFrom(const CurrentSelfMenuButtonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentSelfMenuButtonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentSelfMenuButtonList::CopyFrom(const CurrentSelfMenuButtonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentSelfMenuButtonList::IsInitialized() const {

  return true;
}

void CurrentSelfMenuButtonList::Swap(CurrentSelfMenuButtonList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentSelfMenuButtonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentSelfMenuButtonList_descriptor_;
  metadata.reflection = CurrentSelfMenuButtonList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentSelfMenu::kButtonFieldNumber;
#endif  // !_MSC_VER

CurrentSelfMenu::CurrentSelfMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CurrentSelfMenu)
}

void CurrentSelfMenu::InitAsDefaultInstance() {
}

CurrentSelfMenu::CurrentSelfMenu(const CurrentSelfMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CurrentSelfMenu)
}

void CurrentSelfMenu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentSelfMenu::~CurrentSelfMenu() {
  // @@protoc_insertion_point(destructor:mpcomm.CurrentSelfMenu)
  SharedDtor();
}

void CurrentSelfMenu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentSelfMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentSelfMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentSelfMenu_descriptor_;
}

const CurrentSelfMenu& CurrentSelfMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CurrentSelfMenu* CurrentSelfMenu::default_instance_ = NULL;

CurrentSelfMenu* CurrentSelfMenu::New() const {
  return new CurrentSelfMenu;
}

void CurrentSelfMenu::Clear() {
  button_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentSelfMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CurrentSelfMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.CurrentSelfMenuButton button = 1;
      case 1: {
        if (tag == 10) {
         parse_button:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_button()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_button;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CurrentSelfMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CurrentSelfMenu)
  return false;
#undef DO_
}

void CurrentSelfMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CurrentSelfMenu)
  // repeated .mpcomm.CurrentSelfMenuButton button = 1;
  for (int i = 0; i < this->button_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->button(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CurrentSelfMenu)
}

::google::protobuf::uint8* CurrentSelfMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CurrentSelfMenu)
  // repeated .mpcomm.CurrentSelfMenuButton button = 1;
  for (int i = 0; i < this->button_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->button(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CurrentSelfMenu)
  return target;
}

int CurrentSelfMenu::ByteSize() const {
  int total_size = 0;

  // repeated .mpcomm.CurrentSelfMenuButton button = 1;
  total_size += 1 * this->button_size();
  for (int i = 0; i < this->button_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->button(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentSelfMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentSelfMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentSelfMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentSelfMenu::MergeFrom(const CurrentSelfMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  button_.MergeFrom(from.button_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentSelfMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentSelfMenu::CopyFrom(const CurrentSelfMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentSelfMenu::IsInitialized() const {

  return true;
}

void CurrentSelfMenu::Swap(CurrentSelfMenu* other) {
  if (other != this) {
    button_.Swap(&other->button_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentSelfMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentSelfMenu_descriptor_;
  metadata.reflection = CurrentSelfMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurrentSelfMenuInfoResp::kErrcodeFieldNumber;
const int GetCurrentSelfMenuInfoResp::kErrmsgFieldNumber;
const int GetCurrentSelfMenuInfoResp::kIsMenuOpenFieldNumber;
const int GetCurrentSelfMenuInfoResp::kSelfmenuInfoFieldNumber;
#endif  // !_MSC_VER

GetCurrentSelfMenuInfoResp::GetCurrentSelfMenuInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetCurrentSelfMenuInfoResp)
}

void GetCurrentSelfMenuInfoResp::InitAsDefaultInstance() {
  selfmenu_info_ = const_cast< ::mpcomm::CurrentSelfMenu*>(&::mpcomm::CurrentSelfMenu::default_instance());
}

GetCurrentSelfMenuInfoResp::GetCurrentSelfMenuInfoResp(const GetCurrentSelfMenuInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetCurrentSelfMenuInfoResp)
}

void GetCurrentSelfMenuInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_menu_open_ = GOOGLE_ULONGLONG(0);
  selfmenu_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurrentSelfMenuInfoResp::~GetCurrentSelfMenuInfoResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetCurrentSelfMenuInfoResp)
  SharedDtor();
}

void GetCurrentSelfMenuInfoResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete selfmenu_info_;
  }
}

void GetCurrentSelfMenuInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurrentSelfMenuInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurrentSelfMenuInfoResp_descriptor_;
}

const GetCurrentSelfMenuInfoResp& GetCurrentSelfMenuInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetCurrentSelfMenuInfoResp* GetCurrentSelfMenuInfoResp::default_instance_ = NULL;

GetCurrentSelfMenuInfoResp* GetCurrentSelfMenuInfoResp::New() const {
  return new GetCurrentSelfMenuInfoResp;
}

void GetCurrentSelfMenuInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    is_menu_open_ = GOOGLE_ULONGLONG(0);
    if (has_selfmenu_info()) {
      if (selfmenu_info_ != NULL) selfmenu_info_->::mpcomm::CurrentSelfMenu::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurrentSelfMenuInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetCurrentSelfMenuInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_menu_open;
        break;
      }

      // optional uint64 is_menu_open = 3;
      case 3: {
        if (tag == 24) {
         parse_is_menu_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &is_menu_open_)));
          set_has_is_menu_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_selfmenu_info;
        break;
      }

      // optional .mpcomm.CurrentSelfMenu selfmenu_info = 4;
      case 4: {
        if (tag == 34) {
         parse_selfmenu_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfmenu_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetCurrentSelfMenuInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetCurrentSelfMenuInfoResp)
  return false;
#undef DO_
}

void GetCurrentSelfMenuInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetCurrentSelfMenuInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 is_menu_open = 3;
  if (has_is_menu_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->is_menu_open(), output);
  }

  // optional .mpcomm.CurrentSelfMenu selfmenu_info = 4;
  if (has_selfmenu_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selfmenu_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetCurrentSelfMenuInfoResp)
}

::google::protobuf::uint8* GetCurrentSelfMenuInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetCurrentSelfMenuInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 is_menu_open = 3;
  if (has_is_menu_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->is_menu_open(), target);
  }

  // optional .mpcomm.CurrentSelfMenu selfmenu_info = 4;
  if (has_selfmenu_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selfmenu_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetCurrentSelfMenuInfoResp)
  return target;
}

int GetCurrentSelfMenuInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 is_menu_open = 3;
    if (has_is_menu_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->is_menu_open());
    }

    // optional .mpcomm.CurrentSelfMenu selfmenu_info = 4;
    if (has_selfmenu_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfmenu_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurrentSelfMenuInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurrentSelfMenuInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurrentSelfMenuInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurrentSelfMenuInfoResp::MergeFrom(const GetCurrentSelfMenuInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_is_menu_open()) {
      set_is_menu_open(from.is_menu_open());
    }
    if (from.has_selfmenu_info()) {
      mutable_selfmenu_info()->::mpcomm::CurrentSelfMenu::MergeFrom(from.selfmenu_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurrentSelfMenuInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurrentSelfMenuInfoResp::CopyFrom(const GetCurrentSelfMenuInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentSelfMenuInfoResp::IsInitialized() const {

  return true;
}

void GetCurrentSelfMenuInfoResp::Swap(GetCurrentSelfMenuInfoResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(is_menu_open_, other->is_menu_open_);
    std::swap(selfmenu_info_, other->selfmenu_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurrentSelfMenuInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurrentSelfMenuInfoResp_descriptor_;
  metadata.reflection = GetCurrentSelfMenuInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyItem::kTypeFieldNumber;
const int ReplyItem::kContentFieldNumber;
const int ReplyItem::kNewsInfoFieldNumber;
#endif  // !_MSC_VER

ReplyItem::ReplyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.ReplyItem)
}

void ReplyItem::InitAsDefaultInstance() {
  news_info_ = const_cast< ::mpcomm::RespNewsList*>(&::mpcomm::RespNewsList::default_instance());
}

ReplyItem::ReplyItem(const ReplyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.ReplyItem)
}

void ReplyItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  news_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyItem::~ReplyItem() {
  // @@protoc_insertion_point(destructor:mpcomm.ReplyItem)
  SharedDtor();
}

void ReplyItem::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete news_info_;
  }
}

void ReplyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyItem_descriptor_;
}

const ReplyItem& ReplyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

ReplyItem* ReplyItem::default_instance_ = NULL;

ReplyItem* ReplyItem::New() const {
  return new ReplyItem;
}

void ReplyItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_news_info()) {
      if (news_info_ != NULL) news_info_->::mpcomm::RespNewsList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.ReplyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_news_info;
        break;
      }

      // optional .mpcomm.RespNewsList news_info = 3;
      case 3: {
        if (tag == 26) {
         parse_news_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.ReplyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.ReplyItem)
  return false;
#undef DO_
}

void ReplyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.ReplyItem)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // optional .mpcomm.RespNewsList news_info = 3;
  if (has_news_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->news_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.ReplyItem)
}

::google::protobuf::uint8* ReplyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.ReplyItem)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional .mpcomm.RespNewsList news_info = 3;
  if (has_news_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->news_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.ReplyItem)
  return target;
}

int ReplyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .mpcomm.RespNewsList news_info = 3;
    if (has_news_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->news_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyItem::MergeFrom(const ReplyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_news_info()) {
      mutable_news_info()->::mpcomm::RespNewsList::MergeFrom(from.news_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyItem::CopyFrom(const ReplyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyItem::IsInitialized() const {

  return true;
}

void ReplyItem::Swap(ReplyItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(news_info_, other->news_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyItem_descriptor_;
  metadata.reflection = ReplyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyWordItem::kTypeFieldNumber;
const int KeyWordItem::kMatchModeFieldNumber;
const int KeyWordItem::kContentFieldNumber;
#endif  // !_MSC_VER

KeyWordItem::KeyWordItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.KeyWordItem)
}

void KeyWordItem::InitAsDefaultInstance() {
}

KeyWordItem::KeyWordItem(const KeyWordItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.KeyWordItem)
}

void KeyWordItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyWordItem::~KeyWordItem() {
  // @@protoc_insertion_point(destructor:mpcomm.KeyWordItem)
  SharedDtor();
}

void KeyWordItem::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (match_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete match_mode_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void KeyWordItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyWordItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyWordItem_descriptor_;
}

const KeyWordItem& KeyWordItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

KeyWordItem* KeyWordItem::default_instance_ = NULL;

KeyWordItem* KeyWordItem::New() const {
  return new KeyWordItem;
}

void KeyWordItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_match_mode()) {
      if (match_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        match_mode_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyWordItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.KeyWordItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_match_mode;
        break;
      }

      // optional string match_mode = 2;
      case 2: {
        if (tag == 18) {
         parse_match_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_mode().data(), this->match_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "match_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.KeyWordItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.KeyWordItem)
  return false;
#undef DO_
}

void KeyWordItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.KeyWordItem)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string match_mode = 2;
  if (has_match_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_mode().data(), this->match_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->match_mode(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.KeyWordItem)
}

::google::protobuf::uint8* KeyWordItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.KeyWordItem)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string match_mode = 2;
  if (has_match_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_mode().data(), this->match_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->match_mode(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.KeyWordItem)
  return target;
}

int KeyWordItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string match_mode = 2;
    if (has_match_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_mode());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyWordItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyWordItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyWordItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyWordItem::MergeFrom(const KeyWordItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_match_mode()) {
      set_match_mode(from.match_mode());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyWordItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyWordItem::CopyFrom(const KeyWordItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyWordItem::IsInitialized() const {

  return true;
}

void KeyWordItem::Swap(KeyWordItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(match_mode_, other->match_mode_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyWordItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyWordItem_descriptor_;
  metadata.reflection = KeyWordItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoReplyRule::kRuleNameFieldNumber;
const int AutoReplyRule::kCreateTimeFieldNumber;
const int AutoReplyRule::kReplyModeFieldNumber;
const int AutoReplyRule::kKeywordListInfoFieldNumber;
const int AutoReplyRule::kReplyListInfoFieldNumber;
#endif  // !_MSC_VER

AutoReplyRule::AutoReplyRule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AutoReplyRule)
}

void AutoReplyRule::InitAsDefaultInstance() {
}

AutoReplyRule::AutoReplyRule(const AutoReplyRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AutoReplyRule)
}

void AutoReplyRule::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rule_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_time_ = GOOGLE_ULONGLONG(0);
  reply_mode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoReplyRule::~AutoReplyRule() {
  // @@protoc_insertion_point(destructor:mpcomm.AutoReplyRule)
  SharedDtor();
}

void AutoReplyRule::SharedDtor() {
  if (rule_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rule_name_;
  }
  if (reply_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reply_mode_;
  }
  if (this != default_instance_) {
  }
}

void AutoReplyRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoReplyRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoReplyRule_descriptor_;
}

const AutoReplyRule& AutoReplyRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AutoReplyRule* AutoReplyRule::default_instance_ = NULL;

AutoReplyRule* AutoReplyRule::New() const {
  return new AutoReplyRule;
}

void AutoReplyRule::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_rule_name()) {
      if (rule_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rule_name_->clear();
      }
    }
    create_time_ = GOOGLE_ULONGLONG(0);
    if (has_reply_mode()) {
      if (reply_mode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reply_mode_->clear();
      }
    }
  }
  keyword_list_info_.Clear();
  reply_list_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoReplyRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AutoReplyRule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rule_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rule_name().data(), this->rule_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rule_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 2;
      case 2: {
        if (tag == 16) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reply_mode;
        break;
      }

      // optional string reply_mode = 3;
      case 3: {
        if (tag == 26) {
         parse_reply_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reply_mode().data(), this->reply_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reply_mode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_keyword_list_info;
        break;
      }

      // repeated .mpcomm.KeyWordItem keyword_list_info = 4;
      case 4: {
        if (tag == 34) {
         parse_keyword_list_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyword_list_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_keyword_list_info;
        if (input->ExpectTag(42)) goto parse_reply_list_info;
        break;
      }

      // repeated .mpcomm.ReplyItem reply_list_info = 5;
      case 5: {
        if (tag == 42) {
         parse_reply_list_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reply_list_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reply_list_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AutoReplyRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AutoReplyRule)
  return false;
#undef DO_
}

void AutoReplyRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AutoReplyRule)
  // optional string rule_name = 1;
  if (has_rule_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_name().data(), this->rule_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rule_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rule_name(), output);
  }

  // optional uint64 create_time = 2;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->create_time(), output);
  }

  // optional string reply_mode = 3;
  if (has_reply_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply_mode().data(), this->reply_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reply_mode(), output);
  }

  // repeated .mpcomm.KeyWordItem keyword_list_info = 4;
  for (int i = 0; i < this->keyword_list_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->keyword_list_info(i), output);
  }

  // repeated .mpcomm.ReplyItem reply_list_info = 5;
  for (int i = 0; i < this->reply_list_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reply_list_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AutoReplyRule)
}

::google::protobuf::uint8* AutoReplyRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AutoReplyRule)
  // optional string rule_name = 1;
  if (has_rule_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rule_name().data(), this->rule_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rule_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rule_name(), target);
  }

  // optional uint64 create_time = 2;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->create_time(), target);
  }

  // optional string reply_mode = 3;
  if (has_reply_mode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reply_mode().data(), this->reply_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reply_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reply_mode(), target);
  }

  // repeated .mpcomm.KeyWordItem keyword_list_info = 4;
  for (int i = 0; i < this->keyword_list_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->keyword_list_info(i), target);
  }

  // repeated .mpcomm.ReplyItem reply_list_info = 5;
  for (int i = 0; i < this->reply_list_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reply_list_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AutoReplyRule)
  return target;
}

int AutoReplyRule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rule_name = 1;
    if (has_rule_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_name());
    }

    // optional uint64 create_time = 2;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional string reply_mode = 3;
    if (has_reply_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reply_mode());
    }

  }
  // repeated .mpcomm.KeyWordItem keyword_list_info = 4;
  total_size += 1 * this->keyword_list_info_size();
  for (int i = 0; i < this->keyword_list_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyword_list_info(i));
  }

  // repeated .mpcomm.ReplyItem reply_list_info = 5;
  total_size += 1 * this->reply_list_info_size();
  for (int i = 0; i < this->reply_list_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reply_list_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoReplyRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoReplyRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoReplyRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoReplyRule::MergeFrom(const AutoReplyRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyword_list_info_.MergeFrom(from.keyword_list_info_);
  reply_list_info_.MergeFrom(from.reply_list_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rule_name()) {
      set_rule_name(from.rule_name());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_reply_mode()) {
      set_reply_mode(from.reply_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoReplyRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoReplyRule::CopyFrom(const AutoReplyRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoReplyRule::IsInitialized() const {

  return true;
}

void AutoReplyRule::Swap(AutoReplyRule* other) {
  if (other != this) {
    std::swap(rule_name_, other->rule_name_);
    std::swap(create_time_, other->create_time_);
    std::swap(reply_mode_, other->reply_mode_);
    keyword_list_info_.Swap(&other->keyword_list_info_);
    reply_list_info_.Swap(&other->reply_list_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoReplyRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoReplyRule_descriptor_;
  metadata.reflection = AutoReplyRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoReplyRuleList::kListFieldNumber;
#endif  // !_MSC_VER

AutoReplyRuleList::AutoReplyRuleList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AutoReplyRuleList)
}

void AutoReplyRuleList::InitAsDefaultInstance() {
}

AutoReplyRuleList::AutoReplyRuleList(const AutoReplyRuleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AutoReplyRuleList)
}

void AutoReplyRuleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoReplyRuleList::~AutoReplyRuleList() {
  // @@protoc_insertion_point(destructor:mpcomm.AutoReplyRuleList)
  SharedDtor();
}

void AutoReplyRuleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AutoReplyRuleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoReplyRuleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoReplyRuleList_descriptor_;
}

const AutoReplyRuleList& AutoReplyRuleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AutoReplyRuleList* AutoReplyRuleList::default_instance_ = NULL;

AutoReplyRuleList* AutoReplyRuleList::New() const {
  return new AutoReplyRuleList;
}

void AutoReplyRuleList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoReplyRuleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AutoReplyRuleList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.AutoReplyRule list = 1;
      case 1: {
        if (tag == 10) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AutoReplyRuleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AutoReplyRuleList)
  return false;
#undef DO_
}

void AutoReplyRuleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AutoReplyRuleList)
  // repeated .mpcomm.AutoReplyRule list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AutoReplyRuleList)
}

::google::protobuf::uint8* AutoReplyRuleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AutoReplyRuleList)
  // repeated .mpcomm.AutoReplyRule list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AutoReplyRuleList)
  return target;
}

int AutoReplyRuleList::ByteSize() const {
  int total_size = 0;

  // repeated .mpcomm.AutoReplyRule list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoReplyRuleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoReplyRuleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoReplyRuleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoReplyRuleList::MergeFrom(const AutoReplyRuleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoReplyRuleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoReplyRuleList::CopyFrom(const AutoReplyRuleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoReplyRuleList::IsInitialized() const {

  return true;
}

void AutoReplyRuleList::Swap(AutoReplyRuleList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoReplyRuleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoReplyRuleList_descriptor_;
  metadata.reflection = AutoReplyRuleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurrentAutoReplyInfoReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetCurrentAutoReplyInfoReq::GetCurrentAutoReplyInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetCurrentAutoReplyInfoReq)
}

void GetCurrentAutoReplyInfoReq::InitAsDefaultInstance() {
}

GetCurrentAutoReplyInfoReq::GetCurrentAutoReplyInfoReq(const GetCurrentAutoReplyInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetCurrentAutoReplyInfoReq)
}

void GetCurrentAutoReplyInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurrentAutoReplyInfoReq::~GetCurrentAutoReplyInfoReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetCurrentAutoReplyInfoReq)
  SharedDtor();
}

void GetCurrentAutoReplyInfoReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetCurrentAutoReplyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurrentAutoReplyInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurrentAutoReplyInfoReq_descriptor_;
}

const GetCurrentAutoReplyInfoReq& GetCurrentAutoReplyInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetCurrentAutoReplyInfoReq* GetCurrentAutoReplyInfoReq::default_instance_ = NULL;

GetCurrentAutoReplyInfoReq* GetCurrentAutoReplyInfoReq::New() const {
  return new GetCurrentAutoReplyInfoReq;
}

void GetCurrentAutoReplyInfoReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurrentAutoReplyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetCurrentAutoReplyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetCurrentAutoReplyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetCurrentAutoReplyInfoReq)
  return false;
#undef DO_
}

void GetCurrentAutoReplyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetCurrentAutoReplyInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetCurrentAutoReplyInfoReq)
}

::google::protobuf::uint8* GetCurrentAutoReplyInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetCurrentAutoReplyInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetCurrentAutoReplyInfoReq)
  return target;
}

int GetCurrentAutoReplyInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurrentAutoReplyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurrentAutoReplyInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurrentAutoReplyInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurrentAutoReplyInfoReq::MergeFrom(const GetCurrentAutoReplyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurrentAutoReplyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurrentAutoReplyInfoReq::CopyFrom(const GetCurrentAutoReplyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentAutoReplyInfoReq::IsInitialized() const {

  return true;
}

void GetCurrentAutoReplyInfoReq::Swap(GetCurrentAutoReplyInfoReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurrentAutoReplyInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurrentAutoReplyInfoReq_descriptor_;
  metadata.reflection = GetCurrentAutoReplyInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetCurrentAutoReplyInfoResp::kErrcodeFieldNumber;
const int GetCurrentAutoReplyInfoResp::kErrmsgFieldNumber;
const int GetCurrentAutoReplyInfoResp::kIsAddFriendReplyOpenFieldNumber;
const int GetCurrentAutoReplyInfoResp::kIsAutoreplyOpenFieldNumber;
const int GetCurrentAutoReplyInfoResp::kAddFriendAutoreplyInfoFieldNumber;
const int GetCurrentAutoReplyInfoResp::kMessageDefaultAutoreplyInfoFieldNumber;
const int GetCurrentAutoReplyInfoResp::kKeywordAutoreplyInfoFieldNumber;
#endif  // !_MSC_VER

GetCurrentAutoReplyInfoResp::GetCurrentAutoReplyInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetCurrentAutoReplyInfoResp)
}

void GetCurrentAutoReplyInfoResp::InitAsDefaultInstance() {
  add_friend_autoreply_info_ = const_cast< ::mpcomm::ReplyItem*>(&::mpcomm::ReplyItem::default_instance());
  message_default_autoreply_info_ = const_cast< ::mpcomm::ReplyItem*>(&::mpcomm::ReplyItem::default_instance());
  keyword_autoreply_info_ = const_cast< ::mpcomm::AutoReplyRuleList*>(&::mpcomm::AutoReplyRuleList::default_instance());
}

GetCurrentAutoReplyInfoResp::GetCurrentAutoReplyInfoResp(const GetCurrentAutoReplyInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetCurrentAutoReplyInfoResp)
}

void GetCurrentAutoReplyInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_add_friend_reply_open_ = GOOGLE_ULONGLONG(0);
  is_autoreply_open_ = GOOGLE_ULONGLONG(0);
  add_friend_autoreply_info_ = NULL;
  message_default_autoreply_info_ = NULL;
  keyword_autoreply_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCurrentAutoReplyInfoResp::~GetCurrentAutoReplyInfoResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetCurrentAutoReplyInfoResp)
  SharedDtor();
}

void GetCurrentAutoReplyInfoResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete add_friend_autoreply_info_;
    delete message_default_autoreply_info_;
    delete keyword_autoreply_info_;
  }
}

void GetCurrentAutoReplyInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCurrentAutoReplyInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCurrentAutoReplyInfoResp_descriptor_;
}

const GetCurrentAutoReplyInfoResp& GetCurrentAutoReplyInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetCurrentAutoReplyInfoResp* GetCurrentAutoReplyInfoResp::default_instance_ = NULL;

GetCurrentAutoReplyInfoResp* GetCurrentAutoReplyInfoResp::New() const {
  return new GetCurrentAutoReplyInfoResp;
}

void GetCurrentAutoReplyInfoResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetCurrentAutoReplyInfoResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(is_add_friend_reply_open_, is_autoreply_open_);
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_add_friend_autoreply_info()) {
      if (add_friend_autoreply_info_ != NULL) add_friend_autoreply_info_->::mpcomm::ReplyItem::Clear();
    }
    if (has_message_default_autoreply_info()) {
      if (message_default_autoreply_info_ != NULL) message_default_autoreply_info_->::mpcomm::ReplyItem::Clear();
    }
    if (has_keyword_autoreply_info()) {
      if (keyword_autoreply_info_ != NULL) keyword_autoreply_info_->::mpcomm::AutoReplyRuleList::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCurrentAutoReplyInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetCurrentAutoReplyInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_add_friend_reply_open;
        break;
      }

      // optional uint64 is_add_friend_reply_open = 3;
      case 3: {
        if (tag == 24) {
         parse_is_add_friend_reply_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &is_add_friend_reply_open_)));
          set_has_is_add_friend_reply_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_autoreply_open;
        break;
      }

      // optional uint64 is_autoreply_open = 4;
      case 4: {
        if (tag == 32) {
         parse_is_autoreply_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &is_autoreply_open_)));
          set_has_is_autoreply_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_add_friend_autoreply_info;
        break;
      }

      // optional .mpcomm.ReplyItem add_friend_autoreply_info = 5;
      case 5: {
        if (tag == 42) {
         parse_add_friend_autoreply_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_friend_autoreply_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_message_default_autoreply_info;
        break;
      }

      // optional .mpcomm.ReplyItem message_default_autoreply_info = 6;
      case 6: {
        if (tag == 50) {
         parse_message_default_autoreply_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_default_autoreply_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_keyword_autoreply_info;
        break;
      }

      // optional .mpcomm.AutoReplyRuleList keyword_autoreply_info = 7;
      case 7: {
        if (tag == 58) {
         parse_keyword_autoreply_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keyword_autoreply_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetCurrentAutoReplyInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetCurrentAutoReplyInfoResp)
  return false;
#undef DO_
}

void GetCurrentAutoReplyInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetCurrentAutoReplyInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 is_add_friend_reply_open = 3;
  if (has_is_add_friend_reply_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->is_add_friend_reply_open(), output);
  }

  // optional uint64 is_autoreply_open = 4;
  if (has_is_autoreply_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->is_autoreply_open(), output);
  }

  // optional .mpcomm.ReplyItem add_friend_autoreply_info = 5;
  if (has_add_friend_autoreply_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->add_friend_autoreply_info(), output);
  }

  // optional .mpcomm.ReplyItem message_default_autoreply_info = 6;
  if (has_message_default_autoreply_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->message_default_autoreply_info(), output);
  }

  // optional .mpcomm.AutoReplyRuleList keyword_autoreply_info = 7;
  if (has_keyword_autoreply_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->keyword_autoreply_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetCurrentAutoReplyInfoResp)
}

::google::protobuf::uint8* GetCurrentAutoReplyInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetCurrentAutoReplyInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 is_add_friend_reply_open = 3;
  if (has_is_add_friend_reply_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->is_add_friend_reply_open(), target);
  }

  // optional uint64 is_autoreply_open = 4;
  if (has_is_autoreply_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->is_autoreply_open(), target);
  }

  // optional .mpcomm.ReplyItem add_friend_autoreply_info = 5;
  if (has_add_friend_autoreply_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->add_friend_autoreply_info(), target);
  }

  // optional .mpcomm.ReplyItem message_default_autoreply_info = 6;
  if (has_message_default_autoreply_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->message_default_autoreply_info(), target);
  }

  // optional .mpcomm.AutoReplyRuleList keyword_autoreply_info = 7;
  if (has_keyword_autoreply_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->keyword_autoreply_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetCurrentAutoReplyInfoResp)
  return target;
}

int GetCurrentAutoReplyInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 is_add_friend_reply_open = 3;
    if (has_is_add_friend_reply_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->is_add_friend_reply_open());
    }

    // optional uint64 is_autoreply_open = 4;
    if (has_is_autoreply_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->is_autoreply_open());
    }

    // optional .mpcomm.ReplyItem add_friend_autoreply_info = 5;
    if (has_add_friend_autoreply_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_friend_autoreply_info());
    }

    // optional .mpcomm.ReplyItem message_default_autoreply_info = 6;
    if (has_message_default_autoreply_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message_default_autoreply_info());
    }

    // optional .mpcomm.AutoReplyRuleList keyword_autoreply_info = 7;
    if (has_keyword_autoreply_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyword_autoreply_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCurrentAutoReplyInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCurrentAutoReplyInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCurrentAutoReplyInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCurrentAutoReplyInfoResp::MergeFrom(const GetCurrentAutoReplyInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_is_add_friend_reply_open()) {
      set_is_add_friend_reply_open(from.is_add_friend_reply_open());
    }
    if (from.has_is_autoreply_open()) {
      set_is_autoreply_open(from.is_autoreply_open());
    }
    if (from.has_add_friend_autoreply_info()) {
      mutable_add_friend_autoreply_info()->::mpcomm::ReplyItem::MergeFrom(from.add_friend_autoreply_info());
    }
    if (from.has_message_default_autoreply_info()) {
      mutable_message_default_autoreply_info()->::mpcomm::ReplyItem::MergeFrom(from.message_default_autoreply_info());
    }
    if (from.has_keyword_autoreply_info()) {
      mutable_keyword_autoreply_info()->::mpcomm::AutoReplyRuleList::MergeFrom(from.keyword_autoreply_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCurrentAutoReplyInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCurrentAutoReplyInfoResp::CopyFrom(const GetCurrentAutoReplyInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentAutoReplyInfoResp::IsInitialized() const {

  return true;
}

void GetCurrentAutoReplyInfoResp::Swap(GetCurrentAutoReplyInfoResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(is_add_friend_reply_open_, other->is_add_friend_reply_open_);
    std::swap(is_autoreply_open_, other->is_autoreply_open_);
    std::swap(add_friend_autoreply_info_, other->add_friend_autoreply_info_);
    std::swap(message_default_autoreply_info_, other->message_default_autoreply_info_);
    std::swap(keyword_autoreply_info_, other->keyword_autoreply_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCurrentAutoReplyInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCurrentAutoReplyInfoResp_descriptor_;
  metadata.reflection = GetCurrentAutoReplyInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Text::kContentFieldNumber;
#endif  // !_MSC_VER

Text::Text()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Text)
}

void Text::InitAsDefaultInstance() {
}

Text::Text(const Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Text)
}

void Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:mpcomm.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Text_descriptor_;
}

const Text& Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Text* Text::default_instance_ = NULL;

Text* Text::New() const {
  return new Text;
}

void Text::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Text)
  return false;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Text)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Text)
}

::google::protobuf::uint8* Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Text)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Text)
  return target;
}

int Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {

  return true;
}

void Text::Swap(Text* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Text_descriptor_;
  metadata.reflection = Text_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Image::kMediaIdFieldNumber;
#endif  // !_MSC_VER

Image::Image()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Image)
}

void Image::InitAsDefaultInstance() {
}

Image::Image(const Image& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Image)
}

void Image::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:mpcomm.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Image_descriptor_;
}

const Image& Image::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Image* Image::default_instance_ = NULL;

Image* Image::New() const {
  return new Image;
}

void Image::Clear() {
  if (has_media_id()) {
    if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      media_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Image)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Image)
}

::google::protobuf::uint8* Image::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Image)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Image)
  return target;
}

int Image::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string media_id = 1;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Image* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Image*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {

  return true;
}

void Image::Swap(Image* other) {
  if (other != this) {
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Image_descriptor_;
  metadata.reflection = Image_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Voice::kMediaIdFieldNumber;
#endif  // !_MSC_VER

Voice::Voice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Voice)
}

void Voice::InitAsDefaultInstance() {
}

Voice::Voice(const Voice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Voice)
}

void Voice::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Voice::~Voice() {
  // @@protoc_insertion_point(destructor:mpcomm.Voice)
  SharedDtor();
}

void Voice::SharedDtor() {
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void Voice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Voice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Voice_descriptor_;
}

const Voice& Voice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Voice* Voice::default_instance_ = NULL;

Voice* Voice::New() const {
  return new Voice;
}

void Voice::Clear() {
  if (has_media_id()) {
    if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      media_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Voice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Voice)
  return false;
#undef DO_
}

void Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Voice)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Voice)
}

::google::protobuf::uint8* Voice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Voice)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Voice)
  return target;
}

int Voice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string media_id = 1;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Voice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Voice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Voice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Voice::MergeFrom(const Voice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Voice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voice::CopyFrom(const Voice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice::IsInitialized() const {

  return true;
}

void Voice::Swap(Voice* other) {
  if (other != this) {
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Voice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Voice_descriptor_;
  metadata.reflection = Voice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Video::kMediaIdFieldNumber;
const int Video::kThumbMediaIdFieldNumber;
const int Video::kTitleFieldNumber;
const int Video::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Video::Video()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Video)
}

void Video::InitAsDefaultInstance() {
}

Video::Video(const Video& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Video)
}

void Video::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumb_media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:mpcomm.Video)
  SharedDtor();
}

void Video::SharedDtor() {
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_media_id_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Video::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Video::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Video_descriptor_;
}

const Video& Video::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Video* Video::default_instance_ = NULL;

Video* Video::New() const {
  return new Video;
}

void Video::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
    if (has_thumb_media_id()) {
      if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumb_media_id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Video::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Video)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_thumb_media_id;
        break;
      }

      // optional string thumb_media_id = 2;
      case 2: {
        if (tag == 18) {
         parse_thumb_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_media_id().data(), this->thumb_media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Video)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Video)
  return false;
#undef DO_
}

void Video::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Video)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_id(), output);
  }

  // optional string thumb_media_id = 2;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thumb_media_id(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Video)
}

::google::protobuf::uint8* Video::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Video)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_id(), target);
  }

  // optional string thumb_media_id = 2;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thumb_media_id(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Video)
  return target;
}

int Video::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string media_id = 1;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

    // optional string thumb_media_id = 2;
    if (has_thumb_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_media_id());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Video::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Video* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Video*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Video::MergeFrom(const Video& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
    if (from.has_thumb_media_id()) {
      set_thumb_media_id(from.thumb_media_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Video::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Video::CopyFrom(const Video& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {

  return true;
}

void Video::Swap(Video* other) {
  if (other != this) {
    std::swap(media_id_, other->media_id_);
    std::swap(thumb_media_id_, other->thumb_media_id_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Video::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Video_descriptor_;
  metadata.reflection = Video_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Link::kTitleFieldNumber;
const int Link::kDescriptionFieldNumber;
const int Link::kUrlFieldNumber;
const int Link::kThumbMediaIdFieldNumber;
#endif  // !_MSC_VER

Link::Link()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Link)
}

void Link::InitAsDefaultInstance() {
}

Link::Link(const Link& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Link)
}

void Link::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumb_media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Link::~Link() {
  // @@protoc_insertion_point(destructor:mpcomm.Link)
  SharedDtor();
}

void Link::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_media_id_;
  }
  if (this != default_instance_) {
  }
}

void Link::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Link_descriptor_;
}

const Link& Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Link* Link::default_instance_ = NULL;

Link* Link::New() const {
  return new Link;
}

void Link::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_thumb_media_id()) {
      if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumb_media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Link)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_thumb_media_id;
        break;
      }

      // optional string thumb_media_id = 4;
      case 4: {
        if (tag == 34) {
         parse_thumb_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_media_id().data(), this->thumb_media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Link)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Link)
  return false;
#undef DO_
}

void Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Link)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional string thumb_media_id = 4;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thumb_media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Link)
}

::google::protobuf::uint8* Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Link)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string thumb_media_id = 4;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->thumb_media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Link)
  return target;
}

int Link::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string thumb_media_id = 4;
    if (has_thumb_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Link::MergeFrom(const Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_thumb_media_id()) {
      set_thumb_media_id(from.thumb_media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Link::CopyFrom(const Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Link::IsInitialized() const {

  return true;
}

void Link::Swap(Link* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(url_, other->url_);
    std::swap(thumb_media_id_, other->thumb_media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Link_descriptor_;
  metadata.reflection = Link_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Card::kWeixinIdFieldNumber;
#endif  // !_MSC_VER

Card::Card()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Card)
}

void Card::InitAsDefaultInstance() {
}

Card::Card(const Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Card)
}

void Card::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  weixin_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Card::~Card() {
  // @@protoc_insertion_point(destructor:mpcomm.Card)
  SharedDtor();
}

void Card::SharedDtor() {
  if (weixin_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weixin_id_;
  }
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New() const {
  return new Card;
}

void Card::Clear() {
  if (has_weixin_id()) {
    if (weixin_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      weixin_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Card)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string weixin_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weixin_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weixin_id().data(), this->weixin_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "weixin_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Card)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Card)
  return false;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Card)
  // optional string weixin_id = 1;
  if (has_weixin_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weixin_id().data(), this->weixin_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weixin_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->weixin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Card)
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Card)
  // optional string weixin_id = 1;
  if (has_weixin_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weixin_id().data(), this->weixin_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weixin_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->weixin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Card)
  return target;
}

int Card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string weixin_id = 1;
    if (has_weixin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weixin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weixin_id()) {
      set_weixin_id(from.weixin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {

  return true;
}

void Card::Swap(Card* other) {
  if (other != this) {
    std::swap(weixin_id_, other->weixin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArticlesItem::kTitleFieldNumber;
const int ArticlesItem::kDescriptionFieldNumber;
const int ArticlesItem::kPicurlFieldNumber;
const int ArticlesItem::kUrlFieldNumber;
#endif  // !_MSC_VER

ArticlesItem::ArticlesItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.ArticlesItem)
}

void ArticlesItem::InitAsDefaultInstance() {
}

ArticlesItem::ArticlesItem(const ArticlesItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.ArticlesItem)
}

void ArticlesItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArticlesItem::~ArticlesItem() {
  // @@protoc_insertion_point(destructor:mpcomm.ArticlesItem)
  SharedDtor();
}

void ArticlesItem::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (picurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picurl_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ArticlesItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArticlesItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArticlesItem_descriptor_;
}

const ArticlesItem& ArticlesItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

ArticlesItem* ArticlesItem::default_instance_ = NULL;

ArticlesItem* ArticlesItem::New() const {
  return new ArticlesItem;
}

void ArticlesItem::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_picurl()) {
      if (picurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picurl_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArticlesItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.ArticlesItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_picurl;
        break;
      }

      // optional string picurl = 3;
      case 3: {
        if (tag == 26) {
         parse_picurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picurl().data(), this->picurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.ArticlesItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.ArticlesItem)
  return false;
#undef DO_
}

void ArticlesItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.ArticlesItem)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string picurl = 3;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->picurl(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.ArticlesItem)
}

::google::protobuf::uint8* ArticlesItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.ArticlesItem)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string picurl = 3;
  if (has_picurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picurl().data(), this->picurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->picurl(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.ArticlesItem)
  return target;
}

int ArticlesItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string picurl = 3;
    if (has_picurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picurl());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArticlesItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArticlesItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArticlesItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArticlesItem::MergeFrom(const ArticlesItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_picurl()) {
      set_picurl(from.picurl());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArticlesItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArticlesItem::CopyFrom(const ArticlesItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArticlesItem::IsInitialized() const {

  return true;
}

void ArticlesItem::Swap(ArticlesItem* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(picurl_, other->picurl_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArticlesItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArticlesItem_descriptor_;
  metadata.reflection = ArticlesItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewsMsg::kArticlesFieldNumber;
const int NewsMsg::kThumbMediaIdFieldNumber;
#endif  // !_MSC_VER

NewsMsg::NewsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.NewsMsg)
}

void NewsMsg::InitAsDefaultInstance() {
}

NewsMsg::NewsMsg(const NewsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.NewsMsg)
}

void NewsMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thumb_media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewsMsg::~NewsMsg() {
  // @@protoc_insertion_point(destructor:mpcomm.NewsMsg)
  SharedDtor();
}

void NewsMsg::SharedDtor() {
  if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_media_id_;
  }
  if (this != default_instance_) {
  }
}

void NewsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewsMsg_descriptor_;
}

const NewsMsg& NewsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

NewsMsg* NewsMsg::default_instance_ = NULL;

NewsMsg* NewsMsg::New() const {
  return new NewsMsg;
}

void NewsMsg::Clear() {
  if (has_thumb_media_id()) {
    if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      thumb_media_id_->clear();
    }
  }
  articles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.NewsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.ArticlesItem articles = 1;
      case 1: {
        if (tag == 10) {
         parse_articles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_articles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_articles;
        if (input->ExpectTag(34)) goto parse_thumb_media_id;
        break;
      }

      // optional string thumb_media_id = 4;
      case 4: {
        if (tag == 34) {
         parse_thumb_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_media_id().data(), this->thumb_media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.NewsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.NewsMsg)
  return false;
#undef DO_
}

void NewsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.NewsMsg)
  // repeated .mpcomm.ArticlesItem articles = 1;
  for (int i = 0; i < this->articles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->articles(i), output);
  }

  // optional string thumb_media_id = 4;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->thumb_media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.NewsMsg)
}

::google::protobuf::uint8* NewsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.NewsMsg)
  // repeated .mpcomm.ArticlesItem articles = 1;
  for (int i = 0; i < this->articles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->articles(i), target);
  }

  // optional string thumb_media_id = 4;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->thumb_media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.NewsMsg)
  return target;
}

int NewsMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string thumb_media_id = 4;
    if (has_thumb_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_media_id());
    }

  }
  // repeated .mpcomm.ArticlesItem articles = 1;
  total_size += 1 * this->articles_size();
  for (int i = 0; i < this->articles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->articles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewsMsg::MergeFrom(const NewsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  articles_.MergeFrom(from.articles_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_thumb_media_id()) {
      set_thumb_media_id(from.thumb_media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsMsg::CopyFrom(const NewsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsMsg::IsInitialized() const {

  return true;
}

void NewsMsg::Swap(NewsMsg* other) {
  if (other != this) {
    articles_.Swap(&other->articles_);
    std::swap(thumb_media_id_, other->thumb_media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewsMsg_descriptor_;
  metadata.reflection = NewsMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Music::kTitleFieldNumber;
const int Music::kDescriptionFieldNumber;
const int Music::kMusicurlFieldNumber;
const int Music::kHqmusicurlFieldNumber;
const int Music::kThumbMediaIdFieldNumber;
#endif  // !_MSC_VER

Music::Music()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Music)
}

void Music::InitAsDefaultInstance() {
}

Music::Music(const Music& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Music)
}

void Music::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  musicurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hqmusicurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumb_media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Music::~Music() {
  // @@protoc_insertion_point(destructor:mpcomm.Music)
  SharedDtor();
}

void Music::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (musicurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete musicurl_;
  }
  if (hqmusicurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hqmusicurl_;
  }
  if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_media_id_;
  }
  if (this != default_instance_) {
  }
}

void Music::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Music::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Music_descriptor_;
}

const Music& Music::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Music* Music::default_instance_ = NULL;

Music* Music::New() const {
  return new Music;
}

void Music::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_musicurl()) {
      if (musicurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        musicurl_->clear();
      }
    }
    if (has_hqmusicurl()) {
      if (hqmusicurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hqmusicurl_->clear();
      }
    }
    if (has_thumb_media_id()) {
      if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumb_media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Music::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Music)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_musicurl;
        break;
      }

      // optional string musicurl = 3;
      case 3: {
        if (tag == 26) {
         parse_musicurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_musicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->musicurl().data(), this->musicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "musicurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hqmusicurl;
        break;
      }

      // optional string hqmusicurl = 4;
      case 4: {
        if (tag == 34) {
         parse_hqmusicurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hqmusicurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hqmusicurl().data(), this->hqmusicurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hqmusicurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_thumb_media_id;
        break;
      }

      // optional string thumb_media_id = 5;
      case 5: {
        if (tag == 42) {
         parse_thumb_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_media_id().data(), this->thumb_media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Music)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Music)
  return false;
#undef DO_
}

void Music::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Music)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string musicurl = 3;
  if (has_musicurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musicurl().data(), this->musicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musicurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->musicurl(), output);
  }

  // optional string hqmusicurl = 4;
  if (has_hqmusicurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hqmusicurl().data(), this->hqmusicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hqmusicurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hqmusicurl(), output);
  }

  // optional string thumb_media_id = 5;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->thumb_media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Music)
}

::google::protobuf::uint8* Music::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Music)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string musicurl = 3;
  if (has_musicurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->musicurl().data(), this->musicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "musicurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->musicurl(), target);
  }

  // optional string hqmusicurl = 4;
  if (has_hqmusicurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hqmusicurl().data(), this->hqmusicurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hqmusicurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hqmusicurl(), target);
  }

  // optional string thumb_media_id = 5;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->thumb_media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Music)
  return target;
}

int Music::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string musicurl = 3;
    if (has_musicurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->musicurl());
    }

    // optional string hqmusicurl = 4;
    if (has_hqmusicurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hqmusicurl());
    }

    // optional string thumb_media_id = 5;
    if (has_thumb_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Music::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Music* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Music*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Music::MergeFrom(const Music& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_musicurl()) {
      set_musicurl(from.musicurl());
    }
    if (from.has_hqmusicurl()) {
      set_hqmusicurl(from.hqmusicurl());
    }
    if (from.has_thumb_media_id()) {
      set_thumb_media_id(from.thumb_media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Music::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Music::CopyFrom(const Music& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Music::IsInitialized() const {

  return true;
}

void Music::Swap(Music* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(musicurl_, other->musicurl_);
    std::swap(hqmusicurl_, other->hqmusicurl_);
    std::swap(thumb_media_id_, other->thumb_media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Music::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Music_descriptor_;
  metadata.reflection = Music_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpNewsMsg::kMediaIdFieldNumber;
#endif  // !_MSC_VER

MpNewsMsg::MpNewsMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MpNewsMsg)
}

void MpNewsMsg::InitAsDefaultInstance() {
}

MpNewsMsg::MpNewsMsg(const MpNewsMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MpNewsMsg)
}

void MpNewsMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpNewsMsg::~MpNewsMsg() {
  // @@protoc_insertion_point(destructor:mpcomm.MpNewsMsg)
  SharedDtor();
}

void MpNewsMsg::SharedDtor() {
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void MpNewsMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpNewsMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpNewsMsg_descriptor_;
}

const MpNewsMsg& MpNewsMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MpNewsMsg* MpNewsMsg::default_instance_ = NULL;

MpNewsMsg* MpNewsMsg::New() const {
  return new MpNewsMsg;
}

void MpNewsMsg::Clear() {
  if (has_media_id()) {
    if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      media_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpNewsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MpNewsMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MpNewsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MpNewsMsg)
  return false;
#undef DO_
}

void MpNewsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MpNewsMsg)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MpNewsMsg)
}

::google::protobuf::uint8* MpNewsMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MpNewsMsg)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MpNewsMsg)
  return target;
}

int MpNewsMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string media_id = 1;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpNewsMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpNewsMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpNewsMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpNewsMsg::MergeFrom(const MpNewsMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpNewsMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpNewsMsg::CopyFrom(const MpNewsMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpNewsMsg::IsInitialized() const {

  return true;
}

void MpNewsMsg::Swap(MpNewsMsg* other) {
  if (other != this) {
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpNewsMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpNewsMsg_descriptor_;
  metadata.reflection = MpNewsMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpVideo::kMediaIdFieldNumber;
#endif  // !_MSC_VER

MpVideo::MpVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MpVideo)
}

void MpVideo::InitAsDefaultInstance() {
}

MpVideo::MpVideo(const MpVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MpVideo)
}

void MpVideo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpVideo::~MpVideo() {
  // @@protoc_insertion_point(destructor:mpcomm.MpVideo)
  SharedDtor();
}

void MpVideo::SharedDtor() {
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void MpVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpVideo_descriptor_;
}

const MpVideo& MpVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MpVideo* MpVideo::default_instance_ = NULL;

MpVideo* MpVideo::New() const {
  return new MpVideo;
}

void MpVideo::Clear() {
  if (has_media_id()) {
    if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      media_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MpVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MpVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MpVideo)
  return false;
#undef DO_
}

void MpVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MpVideo)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MpVideo)
}

::google::protobuf::uint8* MpVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MpVideo)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MpVideo)
  return target;
}

int MpVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string media_id = 1;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpVideo::MergeFrom(const MpVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpVideo::CopyFrom(const MpVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpVideo::IsInitialized() const {

  return true;
}

void MpVideo::Swap(MpVideo* other) {
  if (other != this) {
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpVideo_descriptor_;
  metadata.reflection = MpVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WxCard::kCardIdFieldNumber;
const int WxCard::kCardExtFieldNumber;
#endif  // !_MSC_VER

WxCard::WxCard()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.WxCard)
}

void WxCard::InitAsDefaultInstance() {
}

WxCard::WxCard(const WxCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.WxCard)
}

void WxCard::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  card_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WxCard::~WxCard() {
  // @@protoc_insertion_point(destructor:mpcomm.WxCard)
  SharedDtor();
}

void WxCard::SharedDtor() {
  if (card_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_id_;
  }
  if (card_ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete card_ext_;
  }
  if (this != default_instance_) {
  }
}

void WxCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WxCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WxCard_descriptor_;
}

const WxCard& WxCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

WxCard* WxCard::default_instance_ = NULL;

WxCard* WxCard::New() const {
  return new WxCard;
}

void WxCard::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_card_id()) {
      if (card_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        card_id_->clear();
      }
    }
    if (has_card_ext()) {
      if (card_ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        card_ext_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WxCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.WxCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string card_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_id().data(), this->card_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "card_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_card_ext;
        break;
      }

      // optional string card_ext = 2;
      case 2: {
        if (tag == 18) {
         parse_card_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_ext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->card_ext().data(), this->card_ext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "card_ext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.WxCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.WxCard)
  return false;
#undef DO_
}

void WxCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.WxCard)
  // optional string card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "card_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->card_id(), output);
  }

  // optional string card_ext = 2;
  if (has_card_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "card_ext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->card_ext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.WxCard)
}

::google::protobuf::uint8* WxCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.WxCard)
  // optional string card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_id().data(), this->card_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "card_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->card_id(), target);
  }

  // optional string card_ext = 2;
  if (has_card_ext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->card_ext().data(), this->card_ext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "card_ext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_ext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.WxCard)
  return target;
}

int WxCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string card_id = 1;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_id());
    }

    // optional string card_ext = 2;
    if (has_card_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_ext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WxCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WxCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WxCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WxCard::MergeFrom(const WxCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_card_ext()) {
      set_card_ext(from.card_ext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WxCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WxCard::CopyFrom(const WxCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WxCard::IsInitialized() const {

  return true;
}

void WxCard::Swap(WxCard* other) {
  if (other != this) {
    std::swap(card_id_, other->card_id_);
    std::swap(card_ext_, other->card_ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WxCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WxCard_descriptor_;
  metadata.reflection = WxCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomServiceInfo::kKfAccountFieldNumber;
#endif  // !_MSC_VER

CustomServiceInfo::CustomServiceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CustomServiceInfo)
}

void CustomServiceInfo::InitAsDefaultInstance() {
}

CustomServiceInfo::CustomServiceInfo(const CustomServiceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CustomServiceInfo)
}

void CustomServiceInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kf_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomServiceInfo::~CustomServiceInfo() {
  // @@protoc_insertion_point(destructor:mpcomm.CustomServiceInfo)
  SharedDtor();
}

void CustomServiceInfo::SharedDtor() {
  if (kf_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete kf_account_;
  }
  if (this != default_instance_) {
  }
}

void CustomServiceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomServiceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomServiceInfo_descriptor_;
}

const CustomServiceInfo& CustomServiceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CustomServiceInfo* CustomServiceInfo::default_instance_ = NULL;

CustomServiceInfo* CustomServiceInfo::New() const {
  return new CustomServiceInfo;
}

void CustomServiceInfo::Clear() {
  if (has_kf_account()) {
    if (kf_account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      kf_account_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomServiceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CustomServiceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string kf_account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kf_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kf_account().data(), this->kf_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "kf_account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CustomServiceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CustomServiceInfo)
  return false;
#undef DO_
}

void CustomServiceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CustomServiceInfo)
  // optional string kf_account = 1;
  if (has_kf_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kf_account().data(), this->kf_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kf_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kf_account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CustomServiceInfo)
}

::google::protobuf::uint8* CustomServiceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CustomServiceInfo)
  // optional string kf_account = 1;
  if (has_kf_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kf_account().data(), this->kf_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "kf_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kf_account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CustomServiceInfo)
  return target;
}

int CustomServiceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string kf_account = 1;
    if (has_kf_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kf_account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomServiceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomServiceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomServiceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomServiceInfo::MergeFrom(const CustomServiceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kf_account()) {
      set_kf_account(from.kf_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomServiceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomServiceInfo::CopyFrom(const CustomServiceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomServiceInfo::IsInitialized() const {

  return true;
}

void CustomServiceInfo::Swap(CustomServiceInfo* other) {
  if (other != this) {
    std::swap(kf_account_, other->kf_account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomServiceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomServiceInfo_descriptor_;
  metadata.reflection = CustomServiceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendCustomMessageReq::kAccessTokenFieldNumber;
const int SendCustomMessageReq::kMsgtypeFieldNumber;
const int SendCustomMessageReq::kTouserFieldNumber;
const int SendCustomMessageReq::kTextFieldNumber;
const int SendCustomMessageReq::kImageFieldNumber;
const int SendCustomMessageReq::kVoiceFieldNumber;
const int SendCustomMessageReq::kVideoFieldNumber;
const int SendCustomMessageReq::kMusicFieldNumber;
const int SendCustomMessageReq::kNewsFieldNumber;
const int SendCustomMessageReq::kMpnewsFieldNumber;
const int SendCustomMessageReq::kWxcardFieldNumber;
const int SendCustomMessageReq::kCustomserviceFieldNumber;
const int SendCustomMessageReq::kMpvideoFieldNumber;
#endif  // !_MSC_VER

SendCustomMessageReq::SendCustomMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SendCustomMessageReq)
}

void SendCustomMessageReq::InitAsDefaultInstance() {
  text_ = const_cast< ::mpcomm::Text*>(&::mpcomm::Text::default_instance());
  image_ = const_cast< ::mpcomm::Image*>(&::mpcomm::Image::default_instance());
  voice_ = const_cast< ::mpcomm::Voice*>(&::mpcomm::Voice::default_instance());
  video_ = const_cast< ::mpcomm::Video*>(&::mpcomm::Video::default_instance());
  music_ = const_cast< ::mpcomm::Music*>(&::mpcomm::Music::default_instance());
  news_ = const_cast< ::mpcomm::NewsMsg*>(&::mpcomm::NewsMsg::default_instance());
  mpnews_ = const_cast< ::mpcomm::MpNewsMsg*>(&::mpcomm::MpNewsMsg::default_instance());
  wxcard_ = const_cast< ::mpcomm::WxCard*>(&::mpcomm::WxCard::default_instance());
  customservice_ = const_cast< ::mpcomm::CustomServiceInfo*>(&::mpcomm::CustomServiceInfo::default_instance());
  mpvideo_ = const_cast< ::mpcomm::MpVideo*>(&::mpcomm::MpVideo::default_instance());
}

SendCustomMessageReq::SendCustomMessageReq(const SendCustomMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SendCustomMessageReq)
}

void SendCustomMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = NULL;
  image_ = NULL;
  voice_ = NULL;
  video_ = NULL;
  music_ = NULL;
  news_ = NULL;
  mpnews_ = NULL;
  wxcard_ = NULL;
  customservice_ = NULL;
  mpvideo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendCustomMessageReq::~SendCustomMessageReq() {
  // @@protoc_insertion_point(destructor:mpcomm.SendCustomMessageReq)
  SharedDtor();
}

void SendCustomMessageReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgtype_;
  }
  if (touser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete touser_;
  }
  if (this != default_instance_) {
    delete text_;
    delete image_;
    delete voice_;
    delete video_;
    delete music_;
    delete news_;
    delete mpnews_;
    delete wxcard_;
    delete customservice_;
    delete mpvideo_;
  }
}

void SendCustomMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendCustomMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCustomMessageReq_descriptor_;
}

const SendCustomMessageReq& SendCustomMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SendCustomMessageReq* SendCustomMessageReq::default_instance_ = NULL;

SendCustomMessageReq* SendCustomMessageReq::New() const {
  return new SendCustomMessageReq;
}

void SendCustomMessageReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_msgtype()) {
      if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgtype_->clear();
      }
    }
    if (has_touser()) {
      if (touser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        touser_->clear();
      }
    }
    if (has_text()) {
      if (text_ != NULL) text_->::mpcomm::Text::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::mpcomm::Image::Clear();
    }
    if (has_voice()) {
      if (voice_ != NULL) voice_->::mpcomm::Voice::Clear();
    }
    if (has_video()) {
      if (video_ != NULL) video_->::mpcomm::Video::Clear();
    }
    if (has_music()) {
      if (music_ != NULL) music_->::mpcomm::Music::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_news()) {
      if (news_ != NULL) news_->::mpcomm::NewsMsg::Clear();
    }
    if (has_mpnews()) {
      if (mpnews_ != NULL) mpnews_->::mpcomm::MpNewsMsg::Clear();
    }
    if (has_wxcard()) {
      if (wxcard_ != NULL) wxcard_->::mpcomm::WxCard::Clear();
    }
    if (has_customservice()) {
      if (customservice_ != NULL) customservice_->::mpcomm::CustomServiceInfo::Clear();
    }
    if (has_mpvideo()) {
      if (mpvideo_ != NULL) mpvideo_->::mpcomm::MpVideo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendCustomMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SendCustomMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msgtype;
        break;
      }

      // optional string msgtype = 2;
      case 2: {
        if (tag == 18) {
         parse_msgtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_touser;
        break;
      }

      // optional string touser = 3;
      case 3: {
        if (tag == 26) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->touser().data(), this->touser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "touser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional .mpcomm.Text text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        break;
      }

      // optional .mpcomm.Image image = 5;
      case 5: {
        if (tag == 42) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voice;
        break;
      }

      // optional .mpcomm.Voice voice = 6;
      case 6: {
        if (tag == 50) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_video;
        break;
      }

      // optional .mpcomm.Video video = 7;
      case 7: {
        if (tag == 58) {
         parse_video:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_music;
        break;
      }

      // optional .mpcomm.Music music = 8;
      case 8: {
        if (tag == 66) {
         parse_music:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_music()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_news;
        break;
      }

      // optional .mpcomm.NewsMsg news = 9;
      case 9: {
        if (tag == 74) {
         parse_news:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mpnews;
        break;
      }

      // optional .mpcomm.MpNewsMsg mpnews = 10;
      case 10: {
        if (tag == 82) {
         parse_mpnews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpnews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_wxcard;
        break;
      }

      // optional .mpcomm.WxCard wxcard = 11;
      case 11: {
        if (tag == 90) {
         parse_wxcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_customservice;
        break;
      }

      // optional .mpcomm.CustomServiceInfo customservice = 12;
      case 12: {
        if (tag == 98) {
         parse_customservice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customservice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_mpvideo;
        break;
      }

      // optional .mpcomm.MpVideo mpvideo = 13;
      case 13: {
        if (tag == 106) {
         parse_mpvideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpvideo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SendCustomMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SendCustomMessageReq)
  return false;
#undef DO_
}

void SendCustomMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SendCustomMessageReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string msgtype = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msgtype(), output);
  }

  // optional string touser = 3;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->touser(), output);
  }

  // optional .mpcomm.Text text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text(), output);
  }

  // optional .mpcomm.Image image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image(), output);
  }

  // optional .mpcomm.Voice voice = 6;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->voice(), output);
  }

  // optional .mpcomm.Video video = 7;
  if (has_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->video(), output);
  }

  // optional .mpcomm.Music music = 8;
  if (has_music()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->music(), output);
  }

  // optional .mpcomm.NewsMsg news = 9;
  if (has_news()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->news(), output);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 10;
  if (has_mpnews()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mpnews(), output);
  }

  // optional .mpcomm.WxCard wxcard = 11;
  if (has_wxcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->wxcard(), output);
  }

  // optional .mpcomm.CustomServiceInfo customservice = 12;
  if (has_customservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->customservice(), output);
  }

  // optional .mpcomm.MpVideo mpvideo = 13;
  if (has_mpvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->mpvideo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SendCustomMessageReq)
}

::google::protobuf::uint8* SendCustomMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SendCustomMessageReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string msgtype = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msgtype(), target);
  }

  // optional string touser = 3;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->touser(), target);
  }

  // optional .mpcomm.Text text = 4;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text(), target);
  }

  // optional .mpcomm.Image image = 5;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->image(), target);
  }

  // optional .mpcomm.Voice voice = 6;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->voice(), target);
  }

  // optional .mpcomm.Video video = 7;
  if (has_video()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->video(), target);
  }

  // optional .mpcomm.Music music = 8;
  if (has_music()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->music(), target);
  }

  // optional .mpcomm.NewsMsg news = 9;
  if (has_news()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->news(), target);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 10;
  if (has_mpnews()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mpnews(), target);
  }

  // optional .mpcomm.WxCard wxcard = 11;
  if (has_wxcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->wxcard(), target);
  }

  // optional .mpcomm.CustomServiceInfo customservice = 12;
  if (has_customservice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->customservice(), target);
  }

  // optional .mpcomm.MpVideo mpvideo = 13;
  if (has_mpvideo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->mpvideo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SendCustomMessageReq)
  return target;
}

int SendCustomMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string msgtype = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // optional string touser = 3;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->touser());
    }

    // optional .mpcomm.Text text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .mpcomm.Image image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .mpcomm.Voice voice = 6;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

    // optional .mpcomm.Video video = 7;
    if (has_video()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video());
    }

    // optional .mpcomm.Music music = 8;
    if (has_music()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->music());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mpcomm.NewsMsg news = 9;
    if (has_news()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->news());
    }

    // optional .mpcomm.MpNewsMsg mpnews = 10;
    if (has_mpnews()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpnews());
    }

    // optional .mpcomm.WxCard wxcard = 11;
    if (has_wxcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wxcard());
    }

    // optional .mpcomm.CustomServiceInfo customservice = 12;
    if (has_customservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customservice());
    }

    // optional .mpcomm.MpVideo mpvideo = 13;
    if (has_mpvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpvideo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCustomMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendCustomMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendCustomMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCustomMessageReq::MergeFrom(const SendCustomMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_touser()) {
      set_touser(from.touser());
    }
    if (from.has_text()) {
      mutable_text()->::mpcomm::Text::MergeFrom(from.text());
    }
    if (from.has_image()) {
      mutable_image()->::mpcomm::Image::MergeFrom(from.image());
    }
    if (from.has_voice()) {
      mutable_voice()->::mpcomm::Voice::MergeFrom(from.voice());
    }
    if (from.has_video()) {
      mutable_video()->::mpcomm::Video::MergeFrom(from.video());
    }
    if (from.has_music()) {
      mutable_music()->::mpcomm::Music::MergeFrom(from.music());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_news()) {
      mutable_news()->::mpcomm::NewsMsg::MergeFrom(from.news());
    }
    if (from.has_mpnews()) {
      mutable_mpnews()->::mpcomm::MpNewsMsg::MergeFrom(from.mpnews());
    }
    if (from.has_wxcard()) {
      mutable_wxcard()->::mpcomm::WxCard::MergeFrom(from.wxcard());
    }
    if (from.has_customservice()) {
      mutable_customservice()->::mpcomm::CustomServiceInfo::MergeFrom(from.customservice());
    }
    if (from.has_mpvideo()) {
      mutable_mpvideo()->::mpcomm::MpVideo::MergeFrom(from.mpvideo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendCustomMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCustomMessageReq::CopyFrom(const SendCustomMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCustomMessageReq::IsInitialized() const {

  return true;
}

void SendCustomMessageReq::Swap(SendCustomMessageReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(touser_, other->touser_);
    std::swap(text_, other->text_);
    std::swap(image_, other->image_);
    std::swap(voice_, other->voice_);
    std::swap(video_, other->video_);
    std::swap(music_, other->music_);
    std::swap(news_, other->news_);
    std::swap(mpnews_, other->mpnews_);
    std::swap(wxcard_, other->wxcard_);
    std::swap(customservice_, other->customservice_);
    std::swap(mpvideo_, other->mpvideo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendCustomMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendCustomMessageReq_descriptor_;
  metadata.reflection = SendCustomMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendCustomMessageResp::kErrcodeFieldNumber;
const int SendCustomMessageResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

SendCustomMessageResp::SendCustomMessageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SendCustomMessageResp)
}

void SendCustomMessageResp::InitAsDefaultInstance() {
}

SendCustomMessageResp::SendCustomMessageResp(const SendCustomMessageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SendCustomMessageResp)
}

void SendCustomMessageResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendCustomMessageResp::~SendCustomMessageResp() {
  // @@protoc_insertion_point(destructor:mpcomm.SendCustomMessageResp)
  SharedDtor();
}

void SendCustomMessageResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void SendCustomMessageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendCustomMessageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCustomMessageResp_descriptor_;
}

const SendCustomMessageResp& SendCustomMessageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SendCustomMessageResp* SendCustomMessageResp::default_instance_ = NULL;

SendCustomMessageResp* SendCustomMessageResp::New() const {
  return new SendCustomMessageResp;
}

void SendCustomMessageResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendCustomMessageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SendCustomMessageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SendCustomMessageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SendCustomMessageResp)
  return false;
#undef DO_
}

void SendCustomMessageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SendCustomMessageResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SendCustomMessageResp)
}

::google::protobuf::uint8* SendCustomMessageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SendCustomMessageResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SendCustomMessageResp)
  return target;
}

int SendCustomMessageResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCustomMessageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendCustomMessageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendCustomMessageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCustomMessageResp::MergeFrom(const SendCustomMessageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendCustomMessageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCustomMessageResp::CopyFrom(const SendCustomMessageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCustomMessageResp::IsInitialized() const {

  return true;
}

void SendCustomMessageResp::Swap(SendCustomMessageResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendCustomMessageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendCustomMessageResp_descriptor_;
  metadata.reflection = SendCustomMessageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendFilter::kIsToAllFieldNumber;
const int SendFilter::kTagIdFieldNumber;
#endif  // !_MSC_VER

SendFilter::SendFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SendFilter)
}

void SendFilter::InitAsDefaultInstance() {
}

SendFilter::SendFilter(const SendFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SendFilter)
}

void SendFilter::SharedCtor() {
  _cached_size_ = 0;
  is_to_all_ = false;
  tag_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendFilter::~SendFilter() {
  // @@protoc_insertion_point(destructor:mpcomm.SendFilter)
  SharedDtor();
}

void SendFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendFilter_descriptor_;
}

const SendFilter& SendFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SendFilter* SendFilter::default_instance_ = NULL;

SendFilter* SendFilter::New() const {
  return new SendFilter;
}

void SendFilter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendFilter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tag_id_, is_to_all_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SendFilter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_to_all = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_to_all_)));
          set_has_is_to_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tag_id;
        break;
      }

      // optional uint64 tag_id = 2;
      case 2: {
        if (tag == 16) {
         parse_tag_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_id_)));
          set_has_tag_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SendFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SendFilter)
  return false;
#undef DO_
}

void SendFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SendFilter)
  // optional bool is_to_all = 1;
  if (has_is_to_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_to_all(), output);
  }

  // optional uint64 tag_id = 2;
  if (has_tag_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tag_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SendFilter)
}

::google::protobuf::uint8* SendFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SendFilter)
  // optional bool is_to_all = 1;
  if (has_is_to_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_to_all(), target);
  }

  // optional uint64 tag_id = 2;
  if (has_tag_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tag_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SendFilter)
  return target;
}

int SendFilter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_to_all = 1;
    if (has_is_to_all()) {
      total_size += 1 + 1;
    }

    // optional uint64 tag_id = 2;
    if (has_tag_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendFilter::MergeFrom(const SendFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_to_all()) {
      set_is_to_all(from.is_to_all());
    }
    if (from.has_tag_id()) {
      set_tag_id(from.tag_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFilter::CopyFrom(const SendFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFilter::IsInitialized() const {

  return true;
}

void SendFilter::Swap(SendFilter* other) {
  if (other != this) {
    std::swap(is_to_all_, other->is_to_all_);
    std::swap(tag_id_, other->tag_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendFilter_descriptor_;
  metadata.reflection = SendFilter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassSendAllReq::kAccessTokenFieldNumber;
const int MassSendAllReq::kFilterFieldNumber;
const int MassSendAllReq::kMsgtypeFieldNumber;
const int MassSendAllReq::kTextFieldNumber;
const int MassSendAllReq::kImageFieldNumber;
const int MassSendAllReq::kVoiceFieldNumber;
const int MassSendAllReq::kMpvideoFieldNumber;
const int MassSendAllReq::kMpnewsFieldNumber;
const int MassSendAllReq::kWxcardFieldNumber;
#endif  // !_MSC_VER

MassSendAllReq::MassSendAllReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassSendAllReq)
}

void MassSendAllReq::InitAsDefaultInstance() {
  filter_ = const_cast< ::mpcomm::SendFilter*>(&::mpcomm::SendFilter::default_instance());
  text_ = const_cast< ::mpcomm::Text*>(&::mpcomm::Text::default_instance());
  image_ = const_cast< ::mpcomm::Image*>(&::mpcomm::Image::default_instance());
  voice_ = const_cast< ::mpcomm::Voice*>(&::mpcomm::Voice::default_instance());
  mpvideo_ = const_cast< ::mpcomm::MpVideo*>(&::mpcomm::MpVideo::default_instance());
  mpnews_ = const_cast< ::mpcomm::MpNewsMsg*>(&::mpcomm::MpNewsMsg::default_instance());
  wxcard_ = const_cast< ::mpcomm::WxCard*>(&::mpcomm::WxCard::default_instance());
}

MassSendAllReq::MassSendAllReq(const MassSendAllReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassSendAllReq)
}

void MassSendAllReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filter_ = NULL;
  msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = NULL;
  image_ = NULL;
  voice_ = NULL;
  mpvideo_ = NULL;
  mpnews_ = NULL;
  wxcard_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassSendAllReq::~MassSendAllReq() {
  // @@protoc_insertion_point(destructor:mpcomm.MassSendAllReq)
  SharedDtor();
}

void MassSendAllReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgtype_;
  }
  if (this != default_instance_) {
    delete filter_;
    delete text_;
    delete image_;
    delete voice_;
    delete mpvideo_;
    delete mpnews_;
    delete wxcard_;
  }
}

void MassSendAllReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassSendAllReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassSendAllReq_descriptor_;
}

const MassSendAllReq& MassSendAllReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassSendAllReq* MassSendAllReq::default_instance_ = NULL;

MassSendAllReq* MassSendAllReq::New() const {
  return new MassSendAllReq;
}

void MassSendAllReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_filter()) {
      if (filter_ != NULL) filter_->::mpcomm::SendFilter::Clear();
    }
    if (has_msgtype()) {
      if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgtype_->clear();
      }
    }
    if (has_text()) {
      if (text_ != NULL) text_->::mpcomm::Text::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::mpcomm::Image::Clear();
    }
    if (has_voice()) {
      if (voice_ != NULL) voice_->::mpcomm::Voice::Clear();
    }
    if (has_mpvideo()) {
      if (mpvideo_ != NULL) mpvideo_->::mpcomm::MpVideo::Clear();
    }
    if (has_mpnews()) {
      if (mpnews_ != NULL) mpnews_->::mpcomm::MpNewsMsg::Clear();
    }
  }
  if (has_wxcard()) {
    if (wxcard_ != NULL) wxcard_->::mpcomm::WxCard::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassSendAllReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassSendAllReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // optional .mpcomm.SendFilter filter = 2;
      case 2: {
        if (tag == 18) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgtype;
        break;
      }

      // optional string msgtype = 3;
      case 3: {
        if (tag == 26) {
         parse_msgtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional .mpcomm.Text text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        break;
      }

      // optional .mpcomm.Image image = 5;
      case 5: {
        if (tag == 42) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voice;
        break;
      }

      // optional .mpcomm.Voice voice = 6;
      case 6: {
        if (tag == 50) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_mpvideo;
        break;
      }

      // optional .mpcomm.MpVideo mpvideo = 7;
      case 7: {
        if (tag == 58) {
         parse_mpvideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpvideo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mpnews;
        break;
      }

      // optional .mpcomm.MpNewsMsg mpnews = 8;
      case 8: {
        if (tag == 66) {
         parse_mpnews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpnews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wxcard;
        break;
      }

      // optional .mpcomm.WxCard wxcard = 9;
      case 9: {
        if (tag == 74) {
         parse_wxcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassSendAllReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassSendAllReq)
  return false;
#undef DO_
}

void MassSendAllReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassSendAllReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional .mpcomm.SendFilter filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }

  // optional string msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msgtype(), output);
  }

  // optional .mpcomm.Text text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text(), output);
  }

  // optional .mpcomm.Image image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image(), output);
  }

  // optional .mpcomm.Voice voice = 6;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->voice(), output);
  }

  // optional .mpcomm.MpVideo mpvideo = 7;
  if (has_mpvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mpvideo(), output);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 8;
  if (has_mpnews()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mpnews(), output);
  }

  // optional .mpcomm.WxCard wxcard = 9;
  if (has_wxcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->wxcard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassSendAllReq)
}

::google::protobuf::uint8* MassSendAllReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassSendAllReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional .mpcomm.SendFilter filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }

  // optional string msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgtype(), target);
  }

  // optional .mpcomm.Text text = 4;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text(), target);
  }

  // optional .mpcomm.Image image = 5;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->image(), target);
  }

  // optional .mpcomm.Voice voice = 6;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->voice(), target);
  }

  // optional .mpcomm.MpVideo mpvideo = 7;
  if (has_mpvideo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mpvideo(), target);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 8;
  if (has_mpnews()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mpnews(), target);
  }

  // optional .mpcomm.WxCard wxcard = 9;
  if (has_wxcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->wxcard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassSendAllReq)
  return target;
}

int MassSendAllReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional .mpcomm.SendFilter filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

    // optional string msgtype = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // optional .mpcomm.Text text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .mpcomm.Image image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .mpcomm.Voice voice = 6;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

    // optional .mpcomm.MpVideo mpvideo = 7;
    if (has_mpvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpvideo());
    }

    // optional .mpcomm.MpNewsMsg mpnews = 8;
    if (has_mpnews()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpnews());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mpcomm.WxCard wxcard = 9;
    if (has_wxcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wxcard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassSendAllReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassSendAllReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassSendAllReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassSendAllReq::MergeFrom(const MassSendAllReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_filter()) {
      mutable_filter()->::mpcomm::SendFilter::MergeFrom(from.filter());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_text()) {
      mutable_text()->::mpcomm::Text::MergeFrom(from.text());
    }
    if (from.has_image()) {
      mutable_image()->::mpcomm::Image::MergeFrom(from.image());
    }
    if (from.has_voice()) {
      mutable_voice()->::mpcomm::Voice::MergeFrom(from.voice());
    }
    if (from.has_mpvideo()) {
      mutable_mpvideo()->::mpcomm::MpVideo::MergeFrom(from.mpvideo());
    }
    if (from.has_mpnews()) {
      mutable_mpnews()->::mpcomm::MpNewsMsg::MergeFrom(from.mpnews());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wxcard()) {
      mutable_wxcard()->::mpcomm::WxCard::MergeFrom(from.wxcard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassSendAllReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassSendAllReq::CopyFrom(const MassSendAllReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassSendAllReq::IsInitialized() const {

  return true;
}

void MassSendAllReq::Swap(MassSendAllReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(filter_, other->filter_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(text_, other->text_);
    std::swap(image_, other->image_);
    std::swap(voice_, other->voice_);
    std::swap(mpvideo_, other->mpvideo_);
    std::swap(mpnews_, other->mpnews_);
    std::swap(wxcard_, other->wxcard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassSendAllReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassSendAllReq_descriptor_;
  metadata.reflection = MassSendAllReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassSendAllResp::kErrcodeFieldNumber;
const int MassSendAllResp::kErrmsgFieldNumber;
const int MassSendAllResp::kMsgIdFieldNumber;
const int MassSendAllResp::kMsgDataIdFieldNumber;
#endif  // !_MSC_VER

MassSendAllResp::MassSendAllResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassSendAllResp)
}

void MassSendAllResp::InitAsDefaultInstance() {
}

MassSendAllResp::MassSendAllResp(const MassSendAllResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassSendAllResp)
}

void MassSendAllResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  msg_data_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassSendAllResp::~MassSendAllResp() {
  // @@protoc_insertion_point(destructor:mpcomm.MassSendAllResp)
  SharedDtor();
}

void MassSendAllResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void MassSendAllResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassSendAllResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassSendAllResp_descriptor_;
}

const MassSendAllResp& MassSendAllResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassSendAllResp* MassSendAllResp::default_instance_ = NULL;

MassSendAllResp* MassSendAllResp::New() const {
  return new MassSendAllResp;
}

void MassSendAllResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MassSendAllResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(msg_id_, msg_data_id_);
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassSendAllResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassSendAllResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_data_id;
        break;
      }

      // optional uint64 msg_data_id = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_data_id_)));
          set_has_msg_data_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassSendAllResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassSendAllResp)
  return false;
#undef DO_
}

void MassSendAllResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassSendAllResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // optional uint64 msg_data_id = 4;
  if (has_msg_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_data_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassSendAllResp)
}

::google::protobuf::uint8* MassSendAllResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassSendAllResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // optional uint64 msg_data_id = 4;
  if (has_msg_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msg_data_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassSendAllResp)
  return target;
}

int MassSendAllResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 msg_data_id = 4;
    if (has_msg_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_data_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassSendAllResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassSendAllResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassSendAllResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassSendAllResp::MergeFrom(const MassSendAllResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_data_id()) {
      set_msg_data_id(from.msg_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassSendAllResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassSendAllResp::CopyFrom(const MassSendAllResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassSendAllResp::IsInitialized() const {

  return true;
}

void MassSendAllResp::Swap(MassSendAllResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_data_id_, other->msg_data_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassSendAllResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassSendAllResp_descriptor_;
  metadata.reflection = MassSendAllResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassSendReq::kAccessTokenFieldNumber;
const int MassSendReq::kTouserFieldNumber;
const int MassSendReq::kMsgtypeFieldNumber;
const int MassSendReq::kTextFieldNumber;
const int MassSendReq::kImageFieldNumber;
const int MassSendReq::kVoiceFieldNumber;
const int MassSendReq::kMpnewsFieldNumber;
const int MassSendReq::kWxcardFieldNumber;
const int MassSendReq::kMpvideoFieldNumber;
#endif  // !_MSC_VER

MassSendReq::MassSendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassSendReq)
}

void MassSendReq::InitAsDefaultInstance() {
  text_ = const_cast< ::mpcomm::Text*>(&::mpcomm::Text::default_instance());
  image_ = const_cast< ::mpcomm::Image*>(&::mpcomm::Image::default_instance());
  voice_ = const_cast< ::mpcomm::Voice*>(&::mpcomm::Voice::default_instance());
  mpnews_ = const_cast< ::mpcomm::MpNewsMsg*>(&::mpcomm::MpNewsMsg::default_instance());
  wxcard_ = const_cast< ::mpcomm::WxCard*>(&::mpcomm::WxCard::default_instance());
  mpvideo_ = const_cast< ::mpcomm::MpVideo*>(&::mpcomm::MpVideo::default_instance());
}

MassSendReq::MassSendReq(const MassSendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassSendReq)
}

void MassSendReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = NULL;
  image_ = NULL;
  voice_ = NULL;
  mpnews_ = NULL;
  wxcard_ = NULL;
  mpvideo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassSendReq::~MassSendReq() {
  // @@protoc_insertion_point(destructor:mpcomm.MassSendReq)
  SharedDtor();
}

void MassSendReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgtype_;
  }
  if (this != default_instance_) {
    delete text_;
    delete image_;
    delete voice_;
    delete mpnews_;
    delete wxcard_;
    delete mpvideo_;
  }
}

void MassSendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassSendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassSendReq_descriptor_;
}

const MassSendReq& MassSendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassSendReq* MassSendReq::default_instance_ = NULL;

MassSendReq* MassSendReq::New() const {
  return new MassSendReq;
}

void MassSendReq::Clear() {
  if (_has_bits_[0 / 32] & 253) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_msgtype()) {
      if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgtype_->clear();
      }
    }
    if (has_text()) {
      if (text_ != NULL) text_->::mpcomm::Text::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::mpcomm::Image::Clear();
    }
    if (has_voice()) {
      if (voice_ != NULL) voice_->::mpcomm::Voice::Clear();
    }
    if (has_mpnews()) {
      if (mpnews_ != NULL) mpnews_->::mpcomm::MpNewsMsg::Clear();
    }
    if (has_wxcard()) {
      if (wxcard_ != NULL) wxcard_->::mpcomm::WxCard::Clear();
    }
  }
  if (has_mpvideo()) {
    if (mpvideo_ != NULL) mpvideo_->::mpcomm::MpVideo::Clear();
  }
  touser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassSendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassSendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touser;
        break;
      }

      // repeated string touser = 2;
      case 2: {
        if (tag == 18) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->touser(this->touser_size() - 1).data(),
            this->touser(this->touser_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "touser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touser;
        if (input->ExpectTag(26)) goto parse_msgtype;
        break;
      }

      // optional string msgtype = 3;
      case 3: {
        if (tag == 26) {
         parse_msgtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional .mpcomm.Text text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image;
        break;
      }

      // optional .mpcomm.Image image = 5;
      case 5: {
        if (tag == 42) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_voice;
        break;
      }

      // optional .mpcomm.Voice voice = 6;
      case 6: {
        if (tag == 50) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mpnews;
        break;
      }

      // optional .mpcomm.MpNewsMsg mpnews = 8;
      case 8: {
        if (tag == 66) {
         parse_mpnews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpnews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wxcard;
        break;
      }

      // optional .mpcomm.WxCard wxcard = 9;
      case 9: {
        if (tag == 74) {
         parse_wxcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mpvideo;
        break;
      }

      // optional .mpcomm.MpVideo mpvideo = 10;
      case 10: {
        if (tag == 82) {
         parse_mpvideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpvideo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassSendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassSendReq)
  return false;
#undef DO_
}

void MassSendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassSendReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated string touser = 2;
  for (int i = 0; i < this->touser_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->touser(i).data(), this->touser(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "touser");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->touser(i), output);
  }

  // optional string msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msgtype(), output);
  }

  // optional .mpcomm.Text text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->text(), output);
  }

  // optional .mpcomm.Image image = 5;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->image(), output);
  }

  // optional .mpcomm.Voice voice = 6;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->voice(), output);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 8;
  if (has_mpnews()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mpnews(), output);
  }

  // optional .mpcomm.WxCard wxcard = 9;
  if (has_wxcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->wxcard(), output);
  }

  // optional .mpcomm.MpVideo mpvideo = 10;
  if (has_mpvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mpvideo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassSendReq)
}

::google::protobuf::uint8* MassSendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassSendReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated string touser = 2;
  for (int i = 0; i < this->touser_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser(i).data(), this->touser(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->touser(i), target);
  }

  // optional string msgtype = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgtype(), target);
  }

  // optional .mpcomm.Text text = 4;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->text(), target);
  }

  // optional .mpcomm.Image image = 5;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->image(), target);
  }

  // optional .mpcomm.Voice voice = 6;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->voice(), target);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 8;
  if (has_mpnews()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mpnews(), target);
  }

  // optional .mpcomm.WxCard wxcard = 9;
  if (has_wxcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->wxcard(), target);
  }

  // optional .mpcomm.MpVideo mpvideo = 10;
  if (has_mpvideo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mpvideo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassSendReq)
  return target;
}

int MassSendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string msgtype = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // optional .mpcomm.Text text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .mpcomm.Image image = 5;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .mpcomm.Voice voice = 6;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

    // optional .mpcomm.MpNewsMsg mpnews = 8;
    if (has_mpnews()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpnews());
    }

    // optional .mpcomm.WxCard wxcard = 9;
    if (has_wxcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wxcard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mpcomm.MpVideo mpvideo = 10;
    if (has_mpvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpvideo());
    }

  }
  // repeated string touser = 2;
  total_size += 1 * this->touser_size();
  for (int i = 0; i < this->touser_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->touser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassSendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassSendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassSendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassSendReq::MergeFrom(const MassSendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  touser_.MergeFrom(from.touser_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_text()) {
      mutable_text()->::mpcomm::Text::MergeFrom(from.text());
    }
    if (from.has_image()) {
      mutable_image()->::mpcomm::Image::MergeFrom(from.image());
    }
    if (from.has_voice()) {
      mutable_voice()->::mpcomm::Voice::MergeFrom(from.voice());
    }
    if (from.has_mpnews()) {
      mutable_mpnews()->::mpcomm::MpNewsMsg::MergeFrom(from.mpnews());
    }
    if (from.has_wxcard()) {
      mutable_wxcard()->::mpcomm::WxCard::MergeFrom(from.wxcard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mpvideo()) {
      mutable_mpvideo()->::mpcomm::MpVideo::MergeFrom(from.mpvideo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassSendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassSendReq::CopyFrom(const MassSendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassSendReq::IsInitialized() const {

  return true;
}

void MassSendReq::Swap(MassSendReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    touser_.Swap(&other->touser_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(text_, other->text_);
    std::swap(image_, other->image_);
    std::swap(voice_, other->voice_);
    std::swap(mpnews_, other->mpnews_);
    std::swap(wxcard_, other->wxcard_);
    std::swap(mpvideo_, other->mpvideo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassSendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassSendReq_descriptor_;
  metadata.reflection = MassSendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassSendResp::kErrcodeFieldNumber;
const int MassSendResp::kErrmsgFieldNumber;
const int MassSendResp::kMsgIdFieldNumber;
const int MassSendResp::kMsgDataIdFieldNumber;
#endif  // !_MSC_VER

MassSendResp::MassSendResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassSendResp)
}

void MassSendResp::InitAsDefaultInstance() {
}

MassSendResp::MassSendResp(const MassSendResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassSendResp)
}

void MassSendResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  msg_data_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassSendResp::~MassSendResp() {
  // @@protoc_insertion_point(destructor:mpcomm.MassSendResp)
  SharedDtor();
}

void MassSendResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void MassSendResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassSendResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassSendResp_descriptor_;
}

const MassSendResp& MassSendResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassSendResp* MassSendResp::default_instance_ = NULL;

MassSendResp* MassSendResp::New() const {
  return new MassSendResp;
}

void MassSendResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MassSendResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(msg_id_, msg_data_id_);
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassSendResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassSendResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_data_id;
        break;
      }

      // optional uint64 msg_data_id = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_data_id_)));
          set_has_msg_data_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassSendResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassSendResp)
  return false;
#undef DO_
}

void MassSendResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassSendResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // optional uint64 msg_data_id = 4;
  if (has_msg_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_data_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassSendResp)
}

::google::protobuf::uint8* MassSendResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassSendResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // optional uint64 msg_data_id = 4;
  if (has_msg_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msg_data_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassSendResp)
  return target;
}

int MassSendResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional uint64 msg_data_id = 4;
    if (has_msg_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_data_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassSendResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassSendResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassSendResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassSendResp::MergeFrom(const MassSendResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_data_id()) {
      set_msg_data_id(from.msg_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassSendResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassSendResp::CopyFrom(const MassSendResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassSendResp::IsInitialized() const {

  return true;
}

void MassSendResp::Swap(MassSendResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_data_id_, other->msg_data_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassSendResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassSendResp_descriptor_;
  metadata.reflection = MassSendResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassDeleteReq::kAccessTokenFieldNumber;
const int MassDeleteReq::kMsgIdFieldNumber;
#endif  // !_MSC_VER

MassDeleteReq::MassDeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassDeleteReq)
}

void MassDeleteReq::InitAsDefaultInstance() {
}

MassDeleteReq::MassDeleteReq(const MassDeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassDeleteReq)
}

void MassDeleteReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassDeleteReq::~MassDeleteReq() {
  // @@protoc_insertion_point(destructor:mpcomm.MassDeleteReq)
  SharedDtor();
}

void MassDeleteReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void MassDeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassDeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassDeleteReq_descriptor_;
}

const MassDeleteReq& MassDeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassDeleteReq* MassDeleteReq::default_instance_ = NULL;

MassDeleteReq* MassDeleteReq::New() const {
  return new MassDeleteReq;
}

void MassDeleteReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    msg_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassDeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassDeleteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassDeleteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassDeleteReq)
  return false;
#undef DO_
}

void MassDeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassDeleteReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassDeleteReq)
}

::google::protobuf::uint8* MassDeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassDeleteReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassDeleteReq)
  return target;
}

int MassDeleteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassDeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassDeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassDeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassDeleteReq::MergeFrom(const MassDeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassDeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassDeleteReq::CopyFrom(const MassDeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassDeleteReq::IsInitialized() const {

  return true;
}

void MassDeleteReq::Swap(MassDeleteReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassDeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassDeleteReq_descriptor_;
  metadata.reflection = MassDeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassDeleteResp::kErrcodeFieldNumber;
const int MassDeleteResp::kErrmsgFieldNumber;
const int MassDeleteResp::kMsgIdFieldNumber;
#endif  // !_MSC_VER

MassDeleteResp::MassDeleteResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassDeleteResp)
}

void MassDeleteResp::InitAsDefaultInstance() {
}

MassDeleteResp::MassDeleteResp(const MassDeleteResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassDeleteResp)
}

void MassDeleteResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassDeleteResp::~MassDeleteResp() {
  // @@protoc_insertion_point(destructor:mpcomm.MassDeleteResp)
  SharedDtor();
}

void MassDeleteResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void MassDeleteResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassDeleteResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassDeleteResp_descriptor_;
}

const MassDeleteResp& MassDeleteResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassDeleteResp* MassDeleteResp::default_instance_ = NULL;

MassDeleteResp* MassDeleteResp::New() const {
  return new MassDeleteResp;
}

void MassDeleteResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    msg_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassDeleteResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassDeleteResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassDeleteResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassDeleteResp)
  return false;
#undef DO_
}

void MassDeleteResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassDeleteResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassDeleteResp)
}

::google::protobuf::uint8* MassDeleteResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassDeleteResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassDeleteResp)
  return target;
}

int MassDeleteResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassDeleteResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassDeleteResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassDeleteResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassDeleteResp::MergeFrom(const MassDeleteResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassDeleteResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassDeleteResp::CopyFrom(const MassDeleteResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassDeleteResp::IsInitialized() const {

  return true;
}

void MassDeleteResp::Swap(MassDeleteResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassDeleteResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassDeleteResp_descriptor_;
  metadata.reflection = MassDeleteResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassPreviewReq::kAccessTokenFieldNumber;
const int MassPreviewReq::kTouserFieldNumber;
const int MassPreviewReq::kTowxnameFieldNumber;
const int MassPreviewReq::kMsgtypeFieldNumber;
const int MassPreviewReq::kTextFieldNumber;
const int MassPreviewReq::kImageFieldNumber;
const int MassPreviewReq::kVoiceFieldNumber;
const int MassPreviewReq::kMpnewsFieldNumber;
const int MassPreviewReq::kWxcardFieldNumber;
const int MassPreviewReq::kMpvideoFieldNumber;
#endif  // !_MSC_VER

MassPreviewReq::MassPreviewReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassPreviewReq)
}

void MassPreviewReq::InitAsDefaultInstance() {
  text_ = const_cast< ::mpcomm::Text*>(&::mpcomm::Text::default_instance());
  image_ = const_cast< ::mpcomm::Image*>(&::mpcomm::Image::default_instance());
  voice_ = const_cast< ::mpcomm::Voice*>(&::mpcomm::Voice::default_instance());
  mpnews_ = const_cast< ::mpcomm::MpNewsMsg*>(&::mpcomm::MpNewsMsg::default_instance());
  wxcard_ = const_cast< ::mpcomm::WxCard*>(&::mpcomm::WxCard::default_instance());
  mpvideo_ = const_cast< ::mpcomm::MpVideo*>(&::mpcomm::MpVideo::default_instance());
}

MassPreviewReq::MassPreviewReq(const MassPreviewReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassPreviewReq)
}

void MassPreviewReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  towxname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = NULL;
  image_ = NULL;
  voice_ = NULL;
  mpnews_ = NULL;
  wxcard_ = NULL;
  mpvideo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassPreviewReq::~MassPreviewReq() {
  // @@protoc_insertion_point(destructor:mpcomm.MassPreviewReq)
  SharedDtor();
}

void MassPreviewReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (touser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete touser_;
  }
  if (towxname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete towxname_;
  }
  if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msgtype_;
  }
  if (this != default_instance_) {
    delete text_;
    delete image_;
    delete voice_;
    delete mpnews_;
    delete wxcard_;
    delete mpvideo_;
  }
}

void MassPreviewReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassPreviewReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassPreviewReq_descriptor_;
}

const MassPreviewReq& MassPreviewReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassPreviewReq* MassPreviewReq::default_instance_ = NULL;

MassPreviewReq* MassPreviewReq::New() const {
  return new MassPreviewReq;
}

void MassPreviewReq::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_touser()) {
      if (touser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        touser_->clear();
      }
    }
    if (has_towxname()) {
      if (towxname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        towxname_->clear();
      }
    }
    if (has_msgtype()) {
      if (msgtype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msgtype_->clear();
      }
    }
    if (has_text()) {
      if (text_ != NULL) text_->::mpcomm::Text::Clear();
    }
    if (has_image()) {
      if (image_ != NULL) image_->::mpcomm::Image::Clear();
    }
    if (has_voice()) {
      if (voice_ != NULL) voice_->::mpcomm::Voice::Clear();
    }
    if (has_mpnews()) {
      if (mpnews_ != NULL) mpnews_->::mpcomm::MpNewsMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_wxcard()) {
      if (wxcard_ != NULL) wxcard_->::mpcomm::WxCard::Clear();
    }
    if (has_mpvideo()) {
      if (mpvideo_ != NULL) mpvideo_->::mpcomm::MpVideo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassPreviewReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassPreviewReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touser;
        break;
      }

      // optional string touser = 2;
      case 2: {
        if (tag == 18) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->touser().data(), this->touser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "touser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_towxname;
        break;
      }

      // optional string towxname = 3;
      case 3: {
        if (tag == 26) {
         parse_towxname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_towxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->towxname().data(), this->towxname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "towxname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgtype;
        break;
      }

      // optional string msgtype = 4;
      case 4: {
        if (tag == 34) {
         parse_msgtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtype().data(), this->msgtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgtype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional .mpcomm.Text text = 5;
      case 5: {
        if (tag == 42) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image;
        break;
      }

      // optional .mpcomm.Image image = 6;
      case 6: {
        if (tag == 50) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_voice;
        break;
      }

      // optional .mpcomm.Voice voice = 7;
      case 7: {
        if (tag == 58) {
         parse_voice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_mpnews;
        break;
      }

      // optional .mpcomm.MpNewsMsg mpnews = 8;
      case 8: {
        if (tag == 66) {
         parse_mpnews:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpnews()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_wxcard;
        break;
      }

      // optional .mpcomm.WxCard wxcard = 9;
      case 9: {
        if (tag == 74) {
         parse_wxcard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wxcard()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mpvideo;
        break;
      }

      // optional .mpcomm.MpVideo mpvideo = 10;
      case 10: {
        if (tag == 82) {
         parse_mpvideo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mpvideo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassPreviewReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassPreviewReq)
  return false;
#undef DO_
}

void MassPreviewReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassPreviewReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string touser = 2;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->touser(), output);
  }

  // optional string towxname = 3;
  if (has_towxname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->towxname().data(), this->towxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "towxname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->towxname(), output);
  }

  // optional string msgtype = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msgtype(), output);
  }

  // optional .mpcomm.Text text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->text(), output);
  }

  // optional .mpcomm.Image image = 6;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->image(), output);
  }

  // optional .mpcomm.Voice voice = 7;
  if (has_voice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->voice(), output);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 8;
  if (has_mpnews()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mpnews(), output);
  }

  // optional .mpcomm.WxCard wxcard = 9;
  if (has_wxcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->wxcard(), output);
  }

  // optional .mpcomm.MpVideo mpvideo = 10;
  if (has_mpvideo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mpvideo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassPreviewReq)
}

::google::protobuf::uint8* MassPreviewReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassPreviewReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string touser = 2;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->touser(), target);
  }

  // optional string towxname = 3;
  if (has_towxname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->towxname().data(), this->towxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "towxname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->towxname(), target);
  }

  // optional string msgtype = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), this->msgtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgtype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msgtype(), target);
  }

  // optional .mpcomm.Text text = 5;
  if (has_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->text(), target);
  }

  // optional .mpcomm.Image image = 6;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->image(), target);
  }

  // optional .mpcomm.Voice voice = 7;
  if (has_voice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->voice(), target);
  }

  // optional .mpcomm.MpNewsMsg mpnews = 8;
  if (has_mpnews()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mpnews(), target);
  }

  // optional .mpcomm.WxCard wxcard = 9;
  if (has_wxcard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->wxcard(), target);
  }

  // optional .mpcomm.MpVideo mpvideo = 10;
  if (has_mpvideo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mpvideo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassPreviewReq)
  return target;
}

int MassPreviewReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string touser = 2;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->touser());
    }

    // optional string towxname = 3;
    if (has_towxname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->towxname());
    }

    // optional string msgtype = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // optional .mpcomm.Text text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text());
    }

    // optional .mpcomm.Image image = 6;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .mpcomm.Voice voice = 7;
    if (has_voice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->voice());
    }

    // optional .mpcomm.MpNewsMsg mpnews = 8;
    if (has_mpnews()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpnews());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .mpcomm.WxCard wxcard = 9;
    if (has_wxcard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wxcard());
    }

    // optional .mpcomm.MpVideo mpvideo = 10;
    if (has_mpvideo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mpvideo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassPreviewReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassPreviewReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassPreviewReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassPreviewReq::MergeFrom(const MassPreviewReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_touser()) {
      set_touser(from.touser());
    }
    if (from.has_towxname()) {
      set_towxname(from.towxname());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_text()) {
      mutable_text()->::mpcomm::Text::MergeFrom(from.text());
    }
    if (from.has_image()) {
      mutable_image()->::mpcomm::Image::MergeFrom(from.image());
    }
    if (from.has_voice()) {
      mutable_voice()->::mpcomm::Voice::MergeFrom(from.voice());
    }
    if (from.has_mpnews()) {
      mutable_mpnews()->::mpcomm::MpNewsMsg::MergeFrom(from.mpnews());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wxcard()) {
      mutable_wxcard()->::mpcomm::WxCard::MergeFrom(from.wxcard());
    }
    if (from.has_mpvideo()) {
      mutable_mpvideo()->::mpcomm::MpVideo::MergeFrom(from.mpvideo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassPreviewReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassPreviewReq::CopyFrom(const MassPreviewReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassPreviewReq::IsInitialized() const {

  return true;
}

void MassPreviewReq::Swap(MassPreviewReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(touser_, other->touser_);
    std::swap(towxname_, other->towxname_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(text_, other->text_);
    std::swap(image_, other->image_);
    std::swap(voice_, other->voice_);
    std::swap(mpnews_, other->mpnews_);
    std::swap(wxcard_, other->wxcard_);
    std::swap(mpvideo_, other->mpvideo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassPreviewReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassPreviewReq_descriptor_;
  metadata.reflection = MassPreviewReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassPreviewResp::kErrcodeFieldNumber;
const int MassPreviewResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

MassPreviewResp::MassPreviewResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassPreviewResp)
}

void MassPreviewResp::InitAsDefaultInstance() {
}

MassPreviewResp::MassPreviewResp(const MassPreviewResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassPreviewResp)
}

void MassPreviewResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassPreviewResp::~MassPreviewResp() {
  // @@protoc_insertion_point(destructor:mpcomm.MassPreviewResp)
  SharedDtor();
}

void MassPreviewResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void MassPreviewResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassPreviewResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassPreviewResp_descriptor_;
}

const MassPreviewResp& MassPreviewResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassPreviewResp* MassPreviewResp::default_instance_ = NULL;

MassPreviewResp* MassPreviewResp::New() const {
  return new MassPreviewResp;
}

void MassPreviewResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassPreviewResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassPreviewResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassPreviewResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassPreviewResp)
  return false;
#undef DO_
}

void MassPreviewResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassPreviewResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassPreviewResp)
}

::google::protobuf::uint8* MassPreviewResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassPreviewResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassPreviewResp)
  return target;
}

int MassPreviewResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassPreviewResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassPreviewResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassPreviewResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassPreviewResp::MergeFrom(const MassPreviewResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassPreviewResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassPreviewResp::CopyFrom(const MassPreviewResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassPreviewResp::IsInitialized() const {

  return true;
}

void MassPreviewResp::Swap(MassPreviewResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassPreviewResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassPreviewResp_descriptor_;
  metadata.reflection = MassPreviewResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassGetReq::kAccessTokenFieldNumber;
const int MassGetReq::kMsgIdFieldNumber;
#endif  // !_MSC_VER

MassGetReq::MassGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassGetReq)
}

void MassGetReq::InitAsDefaultInstance() {
}

MassGetReq::MassGetReq(const MassGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassGetReq)
}

void MassGetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassGetReq::~MassGetReq() {
  // @@protoc_insertion_point(destructor:mpcomm.MassGetReq)
  SharedDtor();
}

void MassGetReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void MassGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassGetReq_descriptor_;
}

const MassGetReq& MassGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassGetReq* MassGetReq::default_instance_ = NULL;

MassGetReq* MassGetReq::New() const {
  return new MassGetReq;
}

void MassGetReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    msg_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassGetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassGetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassGetReq)
  return false;
#undef DO_
}

void MassGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassGetReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassGetReq)
}

::google::protobuf::uint8* MassGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassGetReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional uint64 msg_id = 2;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassGetReq)
  return target;
}

int MassGetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 msg_id = 2;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassGetReq::MergeFrom(const MassGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassGetReq::CopyFrom(const MassGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassGetReq::IsInitialized() const {

  return true;
}

void MassGetReq::Swap(MassGetReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassGetReq_descriptor_;
  metadata.reflection = MassGetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MassGetResp::kErrcodeFieldNumber;
const int MassGetResp::kErrmsgFieldNumber;
const int MassGetResp::kMsgIdFieldNumber;
const int MassGetResp::kMsgStatusFieldNumber;
#endif  // !_MSC_VER

MassGetResp::MassGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MassGetResp)
}

void MassGetResp::InitAsDefaultInstance() {
}

MassGetResp::MassGetResp(const MassGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MassGetResp)
}

void MassGetResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  msg_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MassGetResp::~MassGetResp() {
  // @@protoc_insertion_point(destructor:mpcomm.MassGetResp)
  SharedDtor();
}

void MassGetResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (msg_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_status_;
  }
  if (this != default_instance_) {
  }
}

void MassGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MassGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MassGetResp_descriptor_;
}

const MassGetResp& MassGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MassGetResp* MassGetResp::default_instance_ = NULL;

MassGetResp* MassGetResp::New() const {
  return new MassGetResp;
}

void MassGetResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    msg_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg_status()) {
      if (msg_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MassGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MassGetResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 3;
      case 3: {
        if (tag == 24) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_status;
        break;
      }

      // optional string msg_status = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg_status().data(), this->msg_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MassGetResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MassGetResp)
  return false;
#undef DO_
}

void MassGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MassGetResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msg_id(), output);
  }

  // optional string msg_status = 4;
  if (has_msg_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_status().data(), this->msg_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MassGetResp)
}

::google::protobuf::uint8* MassGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MassGetResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 msg_id = 3;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msg_id(), target);
  }

  // optional string msg_status = 4;
  if (has_msg_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg_status().data(), this->msg_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MassGetResp)
  return target;
}

int MassGetResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 msg_id = 3;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional string msg_status = 4;
    if (has_msg_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MassGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MassGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MassGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MassGetResp::MergeFrom(const MassGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_status()) {
      set_msg_status(from.msg_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MassGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MassGetResp::CopyFrom(const MassGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MassGetResp::IsInitialized() const {

  return true;
}

void MassGetResp::Swap(MassGetResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_status_, other->msg_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MassGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MassGetResp_descriptor_;
  metadata.reflection = MassGetResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetIndustryReq::kAccessTokenFieldNumber;
const int SetIndustryReq::kIndustryId1FieldNumber;
const int SetIndustryReq::kIndustryId2FieldNumber;
#endif  // !_MSC_VER

SetIndustryReq::SetIndustryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SetIndustryReq)
}

void SetIndustryReq::InitAsDefaultInstance() {
}

SetIndustryReq::SetIndustryReq(const SetIndustryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SetIndustryReq)
}

void SetIndustryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industry_id1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  industry_id2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetIndustryReq::~SetIndustryReq() {
  // @@protoc_insertion_point(destructor:mpcomm.SetIndustryReq)
  SharedDtor();
}

void SetIndustryReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (industry_id1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete industry_id1_;
  }
  if (industry_id2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete industry_id2_;
  }
  if (this != default_instance_) {
  }
}

void SetIndustryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIndustryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetIndustryReq_descriptor_;
}

const SetIndustryReq& SetIndustryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SetIndustryReq* SetIndustryReq::default_instance_ = NULL;

SetIndustryReq* SetIndustryReq::New() const {
  return new SetIndustryReq;
}

void SetIndustryReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_industry_id1()) {
      if (industry_id1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        industry_id1_->clear();
      }
    }
    if (has_industry_id2()) {
      if (industry_id2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        industry_id2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetIndustryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SetIndustryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_industry_id1;
        break;
      }

      // optional string industry_id1 = 2;
      case 2: {
        if (tag == 18) {
         parse_industry_id1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_industry_id1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->industry_id1().data(), this->industry_id1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "industry_id1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_industry_id2;
        break;
      }

      // optional string industry_id2 = 3;
      case 3: {
        if (tag == 26) {
         parse_industry_id2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_industry_id2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->industry_id2().data(), this->industry_id2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "industry_id2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SetIndustryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SetIndustryReq)
  return false;
#undef DO_
}

void SetIndustryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SetIndustryReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string industry_id1 = 2;
  if (has_industry_id1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industry_id1().data(), this->industry_id1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "industry_id1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->industry_id1(), output);
  }

  // optional string industry_id2 = 3;
  if (has_industry_id2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industry_id2().data(), this->industry_id2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "industry_id2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->industry_id2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SetIndustryReq)
}

::google::protobuf::uint8* SetIndustryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SetIndustryReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string industry_id1 = 2;
  if (has_industry_id1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industry_id1().data(), this->industry_id1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "industry_id1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->industry_id1(), target);
  }

  // optional string industry_id2 = 3;
  if (has_industry_id2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->industry_id2().data(), this->industry_id2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "industry_id2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->industry_id2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SetIndustryReq)
  return target;
}

int SetIndustryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string industry_id1 = 2;
    if (has_industry_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->industry_id1());
    }

    // optional string industry_id2 = 3;
    if (has_industry_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->industry_id2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIndustryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetIndustryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetIndustryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetIndustryReq::MergeFrom(const SetIndustryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_industry_id1()) {
      set_industry_id1(from.industry_id1());
    }
    if (from.has_industry_id2()) {
      set_industry_id2(from.industry_id2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetIndustryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIndustryReq::CopyFrom(const SetIndustryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIndustryReq::IsInitialized() const {

  return true;
}

void SetIndustryReq::Swap(SetIndustryReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(industry_id1_, other->industry_id1_);
    std::swap(industry_id2_, other->industry_id2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetIndustryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetIndustryReq_descriptor_;
  metadata.reflection = SetIndustryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetIndustryResp::kErrcodeFieldNumber;
const int SetIndustryResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

SetIndustryResp::SetIndustryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SetIndustryResp)
}

void SetIndustryResp::InitAsDefaultInstance() {
}

SetIndustryResp::SetIndustryResp(const SetIndustryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SetIndustryResp)
}

void SetIndustryResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetIndustryResp::~SetIndustryResp() {
  // @@protoc_insertion_point(destructor:mpcomm.SetIndustryResp)
  SharedDtor();
}

void SetIndustryResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void SetIndustryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetIndustryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetIndustryResp_descriptor_;
}

const SetIndustryResp& SetIndustryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SetIndustryResp* SetIndustryResp::default_instance_ = NULL;

SetIndustryResp* SetIndustryResp::New() const {
  return new SetIndustryResp;
}

void SetIndustryResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetIndustryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SetIndustryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SetIndustryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SetIndustryResp)
  return false;
#undef DO_
}

void SetIndustryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SetIndustryResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SetIndustryResp)
}

::google::protobuf::uint8* SetIndustryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SetIndustryResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SetIndustryResp)
  return target;
}

int SetIndustryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetIndustryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetIndustryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetIndustryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetIndustryResp::MergeFrom(const SetIndustryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetIndustryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetIndustryResp::CopyFrom(const SetIndustryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetIndustryResp::IsInitialized() const {

  return true;
}

void SetIndustryResp::Swap(SetIndustryResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetIndustryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetIndustryResp_descriptor_;
  metadata.reflection = SetIndustryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIndustryReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetIndustryReq::GetIndustryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetIndustryReq)
}

void GetIndustryReq::InitAsDefaultInstance() {
}

GetIndustryReq::GetIndustryReq(const GetIndustryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetIndustryReq)
}

void GetIndustryReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIndustryReq::~GetIndustryReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetIndustryReq)
  SharedDtor();
}

void GetIndustryReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetIndustryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIndustryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIndustryReq_descriptor_;
}

const GetIndustryReq& GetIndustryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetIndustryReq* GetIndustryReq::default_instance_ = NULL;

GetIndustryReq* GetIndustryReq::New() const {
  return new GetIndustryReq;
}

void GetIndustryReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIndustryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetIndustryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetIndustryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetIndustryReq)
  return false;
#undef DO_
}

void GetIndustryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetIndustryReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetIndustryReq)
}

::google::protobuf::uint8* GetIndustryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetIndustryReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetIndustryReq)
  return target;
}

int GetIndustryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIndustryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIndustryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIndustryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIndustryReq::MergeFrom(const GetIndustryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIndustryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndustryReq::CopyFrom(const GetIndustryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndustryReq::IsInitialized() const {

  return true;
}

void GetIndustryReq::Swap(GetIndustryReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIndustryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIndustryReq_descriptor_;
  metadata.reflection = GetIndustryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Industry::kFirstClassFieldNumber;
const int Industry::kSecondClassFieldNumber;
#endif  // !_MSC_VER

Industry::Industry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Industry)
}

void Industry::InitAsDefaultInstance() {
}

Industry::Industry(const Industry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Industry)
}

void Industry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  first_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Industry::~Industry() {
  // @@protoc_insertion_point(destructor:mpcomm.Industry)
  SharedDtor();
}

void Industry::SharedDtor() {
  if (first_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete first_class_;
  }
  if (second_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete second_class_;
  }
  if (this != default_instance_) {
  }
}

void Industry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Industry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Industry_descriptor_;
}

const Industry& Industry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Industry* Industry::default_instance_ = NULL;

Industry* Industry::New() const {
  return new Industry;
}

void Industry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_first_class()) {
      if (first_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        first_class_->clear();
      }
    }
    if (has_second_class()) {
      if (second_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        second_class_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Industry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Industry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string first_class = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_first_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_class().data(), this->first_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "first_class");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_second_class;
        break;
      }

      // optional string second_class = 2;
      case 2: {
        if (tag == 18) {
         parse_second_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->second_class().data(), this->second_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "second_class");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Industry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Industry)
  return false;
#undef DO_
}

void Industry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Industry)
  // optional string first_class = 1;
  if (has_first_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_class().data(), this->first_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "first_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->first_class(), output);
  }

  // optional string second_class = 2;
  if (has_second_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_class().data(), this->second_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "second_class");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->second_class(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Industry)
}

::google::protobuf::uint8* Industry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Industry)
  // optional string first_class = 1;
  if (has_first_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_class().data(), this->first_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "first_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->first_class(), target);
  }

  // optional string second_class = 2;
  if (has_second_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_class().data(), this->second_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "second_class");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->second_class(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Industry)
  return target;
}

int Industry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string first_class = 1;
    if (has_first_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->first_class());
    }

    // optional string second_class = 2;
    if (has_second_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->second_class());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Industry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Industry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Industry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Industry::MergeFrom(const Industry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_class()) {
      set_first_class(from.first_class());
    }
    if (from.has_second_class()) {
      set_second_class(from.second_class());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Industry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Industry::CopyFrom(const Industry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Industry::IsInitialized() const {

  return true;
}

void Industry::Swap(Industry* other) {
  if (other != this) {
    std::swap(first_class_, other->first_class_);
    std::swap(second_class_, other->second_class_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Industry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Industry_descriptor_;
  metadata.reflection = Industry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIndustryResp::kErrcodeFieldNumber;
const int GetIndustryResp::kErrmsgFieldNumber;
const int GetIndustryResp::kPrimaryIndustryFieldNumber;
const int GetIndustryResp::kSecondaryIndustryFieldNumber;
#endif  // !_MSC_VER

GetIndustryResp::GetIndustryResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetIndustryResp)
}

void GetIndustryResp::InitAsDefaultInstance() {
  primary_industry_ = const_cast< ::mpcomm::Industry*>(&::mpcomm::Industry::default_instance());
  secondary_industry_ = const_cast< ::mpcomm::Industry*>(&::mpcomm::Industry::default_instance());
}

GetIndustryResp::GetIndustryResp(const GetIndustryResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetIndustryResp)
}

void GetIndustryResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_industry_ = NULL;
  secondary_industry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIndustryResp::~GetIndustryResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetIndustryResp)
  SharedDtor();
}

void GetIndustryResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete primary_industry_;
    delete secondary_industry_;
  }
}

void GetIndustryResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIndustryResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIndustryResp_descriptor_;
}

const GetIndustryResp& GetIndustryResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetIndustryResp* GetIndustryResp::default_instance_ = NULL;

GetIndustryResp* GetIndustryResp::New() const {
  return new GetIndustryResp;
}

void GetIndustryResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_primary_industry()) {
      if (primary_industry_ != NULL) primary_industry_->::mpcomm::Industry::Clear();
    }
    if (has_secondary_industry()) {
      if (secondary_industry_ != NULL) secondary_industry_->::mpcomm::Industry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIndustryResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetIndustryResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_primary_industry;
        break;
      }

      // optional .mpcomm.Industry primary_industry = 3;
      case 3: {
        if (tag == 26) {
         parse_primary_industry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_primary_industry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_secondary_industry;
        break;
      }

      // optional .mpcomm.Industry secondary_industry = 4;
      case 4: {
        if (tag == 34) {
         parse_secondary_industry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secondary_industry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetIndustryResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetIndustryResp)
  return false;
#undef DO_
}

void GetIndustryResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetIndustryResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional .mpcomm.Industry primary_industry = 3;
  if (has_primary_industry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->primary_industry(), output);
  }

  // optional .mpcomm.Industry secondary_industry = 4;
  if (has_secondary_industry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->secondary_industry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetIndustryResp)
}

::google::protobuf::uint8* GetIndustryResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetIndustryResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional .mpcomm.Industry primary_industry = 3;
  if (has_primary_industry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->primary_industry(), target);
  }

  // optional .mpcomm.Industry secondary_industry = 4;
  if (has_secondary_industry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->secondary_industry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetIndustryResp)
  return target;
}

int GetIndustryResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional .mpcomm.Industry primary_industry = 3;
    if (has_primary_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->primary_industry());
    }

    // optional .mpcomm.Industry secondary_industry = 4;
    if (has_secondary_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secondary_industry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIndustryResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIndustryResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIndustryResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIndustryResp::MergeFrom(const GetIndustryResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_primary_industry()) {
      mutable_primary_industry()->::mpcomm::Industry::MergeFrom(from.primary_industry());
    }
    if (from.has_secondary_industry()) {
      mutable_secondary_industry()->::mpcomm::Industry::MergeFrom(from.secondary_industry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIndustryResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndustryResp::CopyFrom(const GetIndustryResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndustryResp::IsInitialized() const {

  return true;
}

void GetIndustryResp::Swap(GetIndustryResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(primary_industry_, other->primary_industry_);
    std::swap(secondary_industry_, other->secondary_industry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIndustryResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIndustryResp_descriptor_;
  metadata.reflection = GetIndustryResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTemplateReq::kAccessTokenFieldNumber;
const int AddTemplateReq::kTemplateIdShortFieldNumber;
#endif  // !_MSC_VER

AddTemplateReq::AddTemplateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddTemplateReq)
}

void AddTemplateReq::InitAsDefaultInstance() {
}

AddTemplateReq::AddTemplateReq(const AddTemplateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddTemplateReq)
}

void AddTemplateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_short_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTemplateReq::~AddTemplateReq() {
  // @@protoc_insertion_point(destructor:mpcomm.AddTemplateReq)
  SharedDtor();
}

void AddTemplateReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (template_id_short_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template_id_short_;
  }
  if (this != default_instance_) {
  }
}

void AddTemplateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTemplateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTemplateReq_descriptor_;
}

const AddTemplateReq& AddTemplateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddTemplateReq* AddTemplateReq::default_instance_ = NULL;

AddTemplateReq* AddTemplateReq::New() const {
  return new AddTemplateReq;
}

void AddTemplateReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_template_id_short()) {
      if (template_id_short_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template_id_short_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTemplateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddTemplateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template_id_short;
        break;
      }

      // optional string template_id_short = 2;
      case 2: {
        if (tag == 18) {
         parse_template_id_short:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id_short()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_id_short().data(), this->template_id_short().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_id_short");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddTemplateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddTemplateReq)
  return false;
#undef DO_
}

void AddTemplateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddTemplateReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string template_id_short = 2;
  if (has_template_id_short()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id_short().data(), this->template_id_short().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id_short");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->template_id_short(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddTemplateReq)
}

::google::protobuf::uint8* AddTemplateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddTemplateReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string template_id_short = 2;
  if (has_template_id_short()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id_short().data(), this->template_id_short().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id_short");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->template_id_short(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddTemplateReq)
  return target;
}

int AddTemplateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string template_id_short = 2;
    if (has_template_id_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_id_short());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTemplateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTemplateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTemplateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTemplateReq::MergeFrom(const AddTemplateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_template_id_short()) {
      set_template_id_short(from.template_id_short());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTemplateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTemplateReq::CopyFrom(const AddTemplateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTemplateReq::IsInitialized() const {

  return true;
}

void AddTemplateReq::Swap(AddTemplateReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(template_id_short_, other->template_id_short_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTemplateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTemplateReq_descriptor_;
  metadata.reflection = AddTemplateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTemplateResp::kErrcodeFieldNumber;
const int AddTemplateResp::kErrmsgFieldNumber;
const int AddTemplateResp::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

AddTemplateResp::AddTemplateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddTemplateResp)
}

void AddTemplateResp::InitAsDefaultInstance() {
}

AddTemplateResp::AddTemplateResp(const AddTemplateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddTemplateResp)
}

void AddTemplateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTemplateResp::~AddTemplateResp() {
  // @@protoc_insertion_point(destructor:mpcomm.AddTemplateResp)
  SharedDtor();
}

void AddTemplateResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template_id_;
  }
  if (this != default_instance_) {
  }
}

void AddTemplateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTemplateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTemplateResp_descriptor_;
}

const AddTemplateResp& AddTemplateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddTemplateResp* AddTemplateResp::default_instance_ = NULL;

AddTemplateResp* AddTemplateResp::New() const {
  return new AddTemplateResp;
}

void AddTemplateResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_template_id()) {
      if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTemplateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddTemplateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template_id;
        break;
      }

      // optional string template_id = 3;
      case 3: {
        if (tag == 26) {
         parse_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_id().data(), this->template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddTemplateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddTemplateResp)
  return false;
#undef DO_
}

void AddTemplateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddTemplateResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddTemplateResp)
}

::google::protobuf::uint8* AddTemplateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddTemplateResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddTemplateResp)
  return target;
}

int AddTemplateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTemplateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTemplateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTemplateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTemplateResp::MergeFrom(const AddTemplateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTemplateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTemplateResp::CopyFrom(const AddTemplateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTemplateResp::IsInitialized() const {

  return true;
}

void AddTemplateResp::Swap(AddTemplateResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTemplateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTemplateResp_descriptor_;
  metadata.reflection = AddTemplateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllPrivateTemplateReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetAllPrivateTemplateReq::GetAllPrivateTemplateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetAllPrivateTemplateReq)
}

void GetAllPrivateTemplateReq::InitAsDefaultInstance() {
}

GetAllPrivateTemplateReq::GetAllPrivateTemplateReq(const GetAllPrivateTemplateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetAllPrivateTemplateReq)
}

void GetAllPrivateTemplateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPrivateTemplateReq::~GetAllPrivateTemplateReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetAllPrivateTemplateReq)
  SharedDtor();
}

void GetAllPrivateTemplateReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetAllPrivateTemplateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllPrivateTemplateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllPrivateTemplateReq_descriptor_;
}

const GetAllPrivateTemplateReq& GetAllPrivateTemplateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetAllPrivateTemplateReq* GetAllPrivateTemplateReq::default_instance_ = NULL;

GetAllPrivateTemplateReq* GetAllPrivateTemplateReq::New() const {
  return new GetAllPrivateTemplateReq;
}

void GetAllPrivateTemplateReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllPrivateTemplateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetAllPrivateTemplateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetAllPrivateTemplateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetAllPrivateTemplateReq)
  return false;
#undef DO_
}

void GetAllPrivateTemplateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetAllPrivateTemplateReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetAllPrivateTemplateReq)
}

::google::protobuf::uint8* GetAllPrivateTemplateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetAllPrivateTemplateReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetAllPrivateTemplateReq)
  return target;
}

int GetAllPrivateTemplateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPrivateTemplateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllPrivateTemplateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllPrivateTemplateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllPrivateTemplateReq::MergeFrom(const GetAllPrivateTemplateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllPrivateTemplateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllPrivateTemplateReq::CopyFrom(const GetAllPrivateTemplateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPrivateTemplateReq::IsInitialized() const {

  return true;
}

void GetAllPrivateTemplateReq::Swap(GetAllPrivateTemplateReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllPrivateTemplateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllPrivateTemplateReq_descriptor_;
  metadata.reflection = GetAllPrivateTemplateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateTemplate::kTemplateIdFieldNumber;
const int PrivateTemplate::kTitleFieldNumber;
const int PrivateTemplate::kPrimaryIndustryFieldNumber;
const int PrivateTemplate::kDeputyIndustryFieldNumber;
const int PrivateTemplate::kContentFieldNumber;
const int PrivateTemplate::kExampleFieldNumber;
#endif  // !_MSC_VER

PrivateTemplate::PrivateTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.PrivateTemplate)
}

void PrivateTemplate::InitAsDefaultInstance() {
}

PrivateTemplate::PrivateTemplate(const PrivateTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.PrivateTemplate)
}

void PrivateTemplate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_industry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deputy_industry_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  example_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateTemplate::~PrivateTemplate() {
  // @@protoc_insertion_point(destructor:mpcomm.PrivateTemplate)
  SharedDtor();
}

void PrivateTemplate::SharedDtor() {
  if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template_id_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (primary_industry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete primary_industry_;
  }
  if (deputy_industry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deputy_industry_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (example_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete example_;
  }
  if (this != default_instance_) {
  }
}

void PrivateTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateTemplate_descriptor_;
}

const PrivateTemplate& PrivateTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

PrivateTemplate* PrivateTemplate::default_instance_ = NULL;

PrivateTemplate* PrivateTemplate::New() const {
  return new PrivateTemplate;
}

void PrivateTemplate::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_template_id()) {
      if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template_id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_primary_industry()) {
      if (primary_industry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        primary_industry_->clear();
      }
    }
    if (has_deputy_industry()) {
      if (deputy_industry_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deputy_industry_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_example()) {
      if (example_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        example_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivateTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.PrivateTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string template_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_id().data(), this->template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_primary_industry;
        break;
      }

      // optional string primary_industry = 3;
      case 3: {
        if (tag == 26) {
         parse_primary_industry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_industry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->primary_industry().data(), this->primary_industry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "primary_industry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deputy_industry;
        break;
      }

      // optional string deputy_industry = 4;
      case 4: {
        if (tag == 34) {
         parse_deputy_industry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deputy_industry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deputy_industry().data(), this->deputy_industry().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deputy_industry");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_example;
        break;
      }

      // optional string example = 6;
      case 6: {
        if (tag == 50) {
         parse_example:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_example()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->example().data(), this->example().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "example");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.PrivateTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.PrivateTemplate)
  return false;
#undef DO_
}

void PrivateTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.PrivateTemplate)
  // optional string template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->template_id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string primary_industry = 3;
  if (has_primary_industry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_industry().data(), this->primary_industry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "primary_industry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->primary_industry(), output);
  }

  // optional string deputy_industry = 4;
  if (has_deputy_industry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deputy_industry().data(), this->deputy_industry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deputy_industry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->deputy_industry(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional string example = 6;
  if (has_example()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->example().data(), this->example().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->example(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.PrivateTemplate)
}

::google::protobuf::uint8* PrivateTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.PrivateTemplate)
  // optional string template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->template_id(), target);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string primary_industry = 3;
  if (has_primary_industry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->primary_industry().data(), this->primary_industry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "primary_industry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->primary_industry(), target);
  }

  // optional string deputy_industry = 4;
  if (has_deputy_industry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deputy_industry().data(), this->deputy_industry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deputy_industry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deputy_industry(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional string example = 6;
  if (has_example()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->example().data(), this->example().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->example(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.PrivateTemplate)
  return target;
}

int PrivateTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string primary_industry = 3;
    if (has_primary_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primary_industry());
    }

    // optional string deputy_industry = 4;
    if (has_deputy_industry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deputy_industry());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string example = 6;
    if (has_example()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->example());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateTemplate::MergeFrom(const PrivateTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_primary_industry()) {
      set_primary_industry(from.primary_industry());
    }
    if (from.has_deputy_industry()) {
      set_deputy_industry(from.deputy_industry());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_example()) {
      set_example(from.example());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivateTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateTemplate::CopyFrom(const PrivateTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateTemplate::IsInitialized() const {

  return true;
}

void PrivateTemplate::Swap(PrivateTemplate* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(title_, other->title_);
    std::swap(primary_industry_, other->primary_industry_);
    std::swap(deputy_industry_, other->deputy_industry_);
    std::swap(content_, other->content_);
    std::swap(example_, other->example_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivateTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateTemplate_descriptor_;
  metadata.reflection = PrivateTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllPrivateTemplateResp::kErrcodeFieldNumber;
const int GetAllPrivateTemplateResp::kErrmsgFieldNumber;
const int GetAllPrivateTemplateResp::kTemplateListFieldNumber;
#endif  // !_MSC_VER

GetAllPrivateTemplateResp::GetAllPrivateTemplateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetAllPrivateTemplateResp)
}

void GetAllPrivateTemplateResp::InitAsDefaultInstance() {
}

GetAllPrivateTemplateResp::GetAllPrivateTemplateResp(const GetAllPrivateTemplateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetAllPrivateTemplateResp)
}

void GetAllPrivateTemplateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllPrivateTemplateResp::~GetAllPrivateTemplateResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetAllPrivateTemplateResp)
  SharedDtor();
}

void GetAllPrivateTemplateResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void GetAllPrivateTemplateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllPrivateTemplateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllPrivateTemplateResp_descriptor_;
}

const GetAllPrivateTemplateResp& GetAllPrivateTemplateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetAllPrivateTemplateResp* GetAllPrivateTemplateResp::default_instance_ = NULL;

GetAllPrivateTemplateResp* GetAllPrivateTemplateResp::New() const {
  return new GetAllPrivateTemplateResp;
}

void GetAllPrivateTemplateResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  template_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllPrivateTemplateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetAllPrivateTemplateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template_list;
        break;
      }

      // repeated .mpcomm.PrivateTemplate template_list = 3;
      case 3: {
        if (tag == 26) {
         parse_template_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_template_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetAllPrivateTemplateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetAllPrivateTemplateResp)
  return false;
#undef DO_
}

void GetAllPrivateTemplateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetAllPrivateTemplateResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated .mpcomm.PrivateTemplate template_list = 3;
  for (int i = 0; i < this->template_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->template_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetAllPrivateTemplateResp)
}

::google::protobuf::uint8* GetAllPrivateTemplateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetAllPrivateTemplateResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated .mpcomm.PrivateTemplate template_list = 3;
  for (int i = 0; i < this->template_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->template_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetAllPrivateTemplateResp)
  return target;
}

int GetAllPrivateTemplateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .mpcomm.PrivateTemplate template_list = 3;
  total_size += 1 * this->template_list_size();
  for (int i = 0; i < this->template_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->template_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllPrivateTemplateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllPrivateTemplateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllPrivateTemplateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllPrivateTemplateResp::MergeFrom(const GetAllPrivateTemplateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  template_list_.MergeFrom(from.template_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllPrivateTemplateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllPrivateTemplateResp::CopyFrom(const GetAllPrivateTemplateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllPrivateTemplateResp::IsInitialized() const {

  return true;
}

void GetAllPrivateTemplateResp::Swap(GetAllPrivateTemplateResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    template_list_.Swap(&other->template_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllPrivateTemplateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllPrivateTemplateResp_descriptor_;
  metadata.reflection = GetAllPrivateTemplateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelPrivateTemplateReq::kAccessTokenFieldNumber;
const int DelPrivateTemplateReq::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

DelPrivateTemplateReq::DelPrivateTemplateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DelPrivateTemplateReq)
}

void DelPrivateTemplateReq::InitAsDefaultInstance() {
}

DelPrivateTemplateReq::DelPrivateTemplateReq(const DelPrivateTemplateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DelPrivateTemplateReq)
}

void DelPrivateTemplateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelPrivateTemplateReq::~DelPrivateTemplateReq() {
  // @@protoc_insertion_point(destructor:mpcomm.DelPrivateTemplateReq)
  SharedDtor();
}

void DelPrivateTemplateReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template_id_;
  }
  if (this != default_instance_) {
  }
}

void DelPrivateTemplateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPrivateTemplateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPrivateTemplateReq_descriptor_;
}

const DelPrivateTemplateReq& DelPrivateTemplateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DelPrivateTemplateReq* DelPrivateTemplateReq::default_instance_ = NULL;

DelPrivateTemplateReq* DelPrivateTemplateReq::New() const {
  return new DelPrivateTemplateReq;
}

void DelPrivateTemplateReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_template_id()) {
      if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelPrivateTemplateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DelPrivateTemplateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_template_id;
        break;
      }

      // optional string template_id = 2;
      case 2: {
        if (tag == 18) {
         parse_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_id().data(), this->template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DelPrivateTemplateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DelPrivateTemplateReq)
  return false;
#undef DO_
}

void DelPrivateTemplateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DelPrivateTemplateReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DelPrivateTemplateReq)
}

::google::protobuf::uint8* DelPrivateTemplateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DelPrivateTemplateReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DelPrivateTemplateReq)
  return target;
}

int DelPrivateTemplateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPrivateTemplateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelPrivateTemplateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelPrivateTemplateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelPrivateTemplateReq::MergeFrom(const DelPrivateTemplateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelPrivateTemplateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPrivateTemplateReq::CopyFrom(const DelPrivateTemplateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPrivateTemplateReq::IsInitialized() const {

  return true;
}

void DelPrivateTemplateReq::Swap(DelPrivateTemplateReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelPrivateTemplateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPrivateTemplateReq_descriptor_;
  metadata.reflection = DelPrivateTemplateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelPrivateTemplateResp::kErrcodeFieldNumber;
const int DelPrivateTemplateResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

DelPrivateTemplateResp::DelPrivateTemplateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DelPrivateTemplateResp)
}

void DelPrivateTemplateResp::InitAsDefaultInstance() {
}

DelPrivateTemplateResp::DelPrivateTemplateResp(const DelPrivateTemplateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DelPrivateTemplateResp)
}

void DelPrivateTemplateResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelPrivateTemplateResp::~DelPrivateTemplateResp() {
  // @@protoc_insertion_point(destructor:mpcomm.DelPrivateTemplateResp)
  SharedDtor();
}

void DelPrivateTemplateResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void DelPrivateTemplateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelPrivateTemplateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelPrivateTemplateResp_descriptor_;
}

const DelPrivateTemplateResp& DelPrivateTemplateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DelPrivateTemplateResp* DelPrivateTemplateResp::default_instance_ = NULL;

DelPrivateTemplateResp* DelPrivateTemplateResp::New() const {
  return new DelPrivateTemplateResp;
}

void DelPrivateTemplateResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelPrivateTemplateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DelPrivateTemplateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DelPrivateTemplateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DelPrivateTemplateResp)
  return false;
#undef DO_
}

void DelPrivateTemplateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DelPrivateTemplateResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DelPrivateTemplateResp)
}

::google::protobuf::uint8* DelPrivateTemplateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DelPrivateTemplateResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DelPrivateTemplateResp)
  return target;
}

int DelPrivateTemplateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelPrivateTemplateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelPrivateTemplateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelPrivateTemplateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelPrivateTemplateResp::MergeFrom(const DelPrivateTemplateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelPrivateTemplateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelPrivateTemplateResp::CopyFrom(const DelPrivateTemplateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelPrivateTemplateResp::IsInitialized() const {

  return true;
}

void DelPrivateTemplateResp::Swap(DelPrivateTemplateResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelPrivateTemplateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelPrivateTemplateResp_descriptor_;
  metadata.reflection = DelPrivateTemplateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Json::kContentFieldNumber;
#endif  // !_MSC_VER

Json::Json()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Json)
}

void Json::InitAsDefaultInstance() {
}

Json::Json(const Json& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Json)
}

void Json::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Json::~Json() {
  // @@protoc_insertion_point(destructor:mpcomm.Json)
  SharedDtor();
}

void Json::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Json::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Json::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Json_descriptor_;
}

const Json& Json::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Json* Json::default_instance_ = NULL;

Json* Json::New() const {
  return new Json;
}

void Json::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Json::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Json)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Json)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Json)
  return false;
#undef DO_
}

void Json::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Json)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Json)
}

::google::protobuf::uint8* Json::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Json)
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Json)
  return target;
}

int Json::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Json::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Json* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Json*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Json::MergeFrom(const Json& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Json::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Json::CopyFrom(const Json& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Json::IsInitialized() const {

  return true;
}

void Json::Swap(Json* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Json::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Json_descriptor_;
  metadata.reflection = Json_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendTemplateMessageReq::kAccessTokenFieldNumber;
const int SendTemplateMessageReq::kTouserFieldNumber;
const int SendTemplateMessageReq::kTemplateIdFieldNumber;
const int SendTemplateMessageReq::kUrlFieldNumber;
const int SendTemplateMessageReq::kDataFieldNumber;
#endif  // !_MSC_VER

SendTemplateMessageReq::SendTemplateMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SendTemplateMessageReq)
}

void SendTemplateMessageReq::InitAsDefaultInstance() {
  data_ = const_cast< ::mpcomm::Json*>(&::mpcomm::Json::default_instance());
}

SendTemplateMessageReq::SendTemplateMessageReq(const SendTemplateMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SendTemplateMessageReq)
}

void SendTemplateMessageReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touser_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendTemplateMessageReq::~SendTemplateMessageReq() {
  // @@protoc_insertion_point(destructor:mpcomm.SendTemplateMessageReq)
  SharedDtor();
}

void SendTemplateMessageReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (touser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete touser_;
  }
  if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete template_id_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void SendTemplateMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendTemplateMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendTemplateMessageReq_descriptor_;
}

const SendTemplateMessageReq& SendTemplateMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SendTemplateMessageReq* SendTemplateMessageReq::default_instance_ = NULL;

SendTemplateMessageReq* SendTemplateMessageReq::New() const {
  return new SendTemplateMessageReq;
}

void SendTemplateMessageReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_touser()) {
      if (touser_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        touser_->clear();
      }
    }
    if (has_template_id()) {
      if (template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        template_id_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::mpcomm::Json::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendTemplateMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SendTemplateMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_touser;
        break;
      }

      // optional string touser = 2;
      case 2: {
        if (tag == 18) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->touser().data(), this->touser().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "touser");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_template_id;
        break;
      }

      // optional string template_id = 3;
      case 3: {
        if (tag == 26) {
         parse_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->template_id().data(), this->template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .mpcomm.Json data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SendTemplateMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SendTemplateMessageReq)
  return false;
#undef DO_
}

void SendTemplateMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SendTemplateMessageReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string touser = 2;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->touser(), output);
  }

  // optional string template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->template_id(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // optional .mpcomm.Json data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SendTemplateMessageReq)
}

::google::protobuf::uint8* SendTemplateMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SendTemplateMessageReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string touser = 2;
  if (has_touser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->touser().data(), this->touser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "touser");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->touser(), target);
  }

  // optional string template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->template_id().data(), this->template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->template_id(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // optional .mpcomm.Json data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SendTemplateMessageReq)
  return target;
}

int SendTemplateMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string touser = 2;
    if (has_touser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->touser());
    }

    // optional string template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->template_id());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .mpcomm.Json data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendTemplateMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendTemplateMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendTemplateMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendTemplateMessageReq::MergeFrom(const SendTemplateMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_touser()) {
      set_touser(from.touser());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_data()) {
      mutable_data()->::mpcomm::Json::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendTemplateMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTemplateMessageReq::CopyFrom(const SendTemplateMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTemplateMessageReq::IsInitialized() const {

  return true;
}

void SendTemplateMessageReq::Swap(SendTemplateMessageReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(touser_, other->touser_);
    std::swap(template_id_, other->template_id_);
    std::swap(url_, other->url_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendTemplateMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendTemplateMessageReq_descriptor_;
  metadata.reflection = SendTemplateMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendTemplateMessageResp::kErrcodeFieldNumber;
const int SendTemplateMessageResp::kErrmsgFieldNumber;
const int SendTemplateMessageResp::kMsgidFieldNumber;
#endif  // !_MSC_VER

SendTemplateMessageResp::SendTemplateMessageResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.SendTemplateMessageResp)
}

void SendTemplateMessageResp::InitAsDefaultInstance() {
}

SendTemplateMessageResp::SendTemplateMessageResp(const SendTemplateMessageResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.SendTemplateMessageResp)
}

void SendTemplateMessageResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendTemplateMessageResp::~SendTemplateMessageResp() {
  // @@protoc_insertion_point(destructor:mpcomm.SendTemplateMessageResp)
  SharedDtor();
}

void SendTemplateMessageResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void SendTemplateMessageResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendTemplateMessageResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendTemplateMessageResp_descriptor_;
}

const SendTemplateMessageResp& SendTemplateMessageResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

SendTemplateMessageResp* SendTemplateMessageResp::default_instance_ = NULL;

SendTemplateMessageResp* SendTemplateMessageResp::New() const {
  return new SendTemplateMessageResp;
}

void SendTemplateMessageResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    msgid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendTemplateMessageResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.SendTemplateMessageResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgid;
        break;
      }

      // optional uint64 msgid = 3;
      case 3: {
        if (tag == 24) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.SendTemplateMessageResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.SendTemplateMessageResp)
  return false;
#undef DO_
}

void SendTemplateMessageResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.SendTemplateMessageResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 msgid = 3;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.SendTemplateMessageResp)
}

::google::protobuf::uint8* SendTemplateMessageResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.SendTemplateMessageResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 msgid = 3;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.SendTemplateMessageResp)
  return target;
}

int SendTemplateMessageResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 msgid = 3;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendTemplateMessageResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendTemplateMessageResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendTemplateMessageResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendTemplateMessageResp::MergeFrom(const SendTemplateMessageResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendTemplateMessageResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTemplateMessageResp::CopyFrom(const SendTemplateMessageResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTemplateMessageResp::IsInitialized() const {

  return true;
}

void SendTemplateMessageResp::Swap(SendTemplateMessageResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendTemplateMessageResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendTemplateMessageResp_descriptor_;
  metadata.reflection = SendTemplateMessageResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MediaFile::kFileNameFieldNumber;
const int MediaFile::kBufferFieldNumber;
#endif  // !_MSC_VER

MediaFile::MediaFile()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MediaFile)
}

void MediaFile::InitAsDefaultInstance() {
}

MediaFile::MediaFile(const MediaFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MediaFile)
}

void MediaFile::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MediaFile::~MediaFile() {
  // @@protoc_insertion_point(destructor:mpcomm.MediaFile)
  SharedDtor();
}

void MediaFile::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_name_;
  }
  if (buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buffer_;
  }
  if (this != default_instance_) {
  }
}

void MediaFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaFile_descriptor_;
}

const MediaFile& MediaFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MediaFile* MediaFile::default_instance_ = NULL;

MediaFile* MediaFile::New() const {
  return new MediaFile;
}

void MediaFile::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_name_->clear();
      }
    }
    if (has_buffer()) {
      if (buffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MediaFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MediaFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }

      // optional string buffer = 2;
      case 2: {
        if (tag == 18) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buffer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->buffer().data(), this->buffer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "buffer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MediaFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MediaFile)
  return false;
#undef DO_
}

void MediaFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MediaFile)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional string buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buffer().data(), this->buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->buffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MediaFile)
}

::google::protobuf::uint8* MediaFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MediaFile)
  // optional string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->buffer().data(), this->buffer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "buffer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->buffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MediaFile)
  return target;
}

int MediaFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional string buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MediaFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MediaFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MediaFile::MergeFrom(const MediaFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_buffer()) {
      set_buffer(from.buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MediaFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaFile::CopyFrom(const MediaFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaFile::IsInitialized() const {

  return true;
}

void MediaFile::Swap(MediaFile* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(buffer_, other->buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MediaFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaFile_descriptor_;
  metadata.reflection = MediaFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewsItem::kTitleFieldNumber;
const int NewsItem::kAuthorFieldNumber;
const int NewsItem::kDigestFieldNumber;
const int NewsItem::kContentFieldNumber;
const int NewsItem::kContentSourceUrlFieldNumber;
const int NewsItem::kThumbMediaIdFieldNumber;
const int NewsItem::kShowCoverPicFieldNumber;
const int NewsItem::kUrlFieldNumber;
const int NewsItem::kThumbUrlFieldNumber;
#endif  // !_MSC_VER

NewsItem::NewsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.NewsItem)
}

void NewsItem::InitAsDefaultInstance() {
}

NewsItem::NewsItem(const NewsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.NewsItem)
}

void NewsItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  author_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_source_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumb_media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_cover_pic_ = GOOGLE_LONGLONG(0);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thumb_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewsItem::~NewsItem() {
  // @@protoc_insertion_point(destructor:mpcomm.NewsItem)
  SharedDtor();
}

void NewsItem::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete author_;
  }
  if (digest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete digest_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content_source_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_source_url_;
  }
  if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_media_id_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (thumb_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_url_;
  }
  if (this != default_instance_) {
  }
}

void NewsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewsItem_descriptor_;
}

const NewsItem& NewsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

NewsItem* NewsItem::default_instance_ = NULL;

NewsItem* NewsItem::New() const {
  return new NewsItem;
}

void NewsItem::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_author()) {
      if (author_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        author_->clear();
      }
    }
    if (has_digest()) {
      if (digest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        digest_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_content_source_url()) {
      if (content_source_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_source_url_->clear();
      }
    }
    if (has_thumb_media_id()) {
      if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumb_media_id_->clear();
      }
    }
    show_cover_pic_ = GOOGLE_LONGLONG(0);
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  if (has_thumb_url()) {
    if (thumb_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      thumb_url_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.NewsItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_author;
        break;
      }

      // optional string author = 2;
      case 2: {
        if (tag == 18) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_digest;
        break;
      }

      // optional string digest = 3;
      case 3: {
        if (tag == 26) {
         parse_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->digest().data(), this->digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "digest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content_source_url;
        break;
      }

      // optional string content_source_url = 5;
      case 5: {
        if (tag == 42) {
         parse_content_source_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content_source_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content_source_url().data(), this->content_source_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content_source_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_thumb_media_id;
        break;
      }

      // optional string thumb_media_id = 6;
      case 6: {
        if (tag == 50) {
         parse_thumb_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_media_id().data(), this->thumb_media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_show_cover_pic;
        break;
      }

      // optional int64 show_cover_pic = 7;
      case 7: {
        if (tag == 56) {
         parse_show_cover_pic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &show_cover_pic_)));
          set_has_show_cover_pic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }

      // optional string url = 8;
      case 8: {
        if (tag == 66) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_thumb_url;
        break;
      }

      // optional string thumb_url = 9;
      case 9: {
        if (tag == 74) {
         parse_thumb_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_url().data(), this->thumb_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.NewsItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.NewsItem)
  return false;
#undef DO_
}

void NewsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.NewsItem)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->author(), output);
  }

  // optional string digest = 3;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->digest(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  // optional string content_source_url = 5;
  if (has_content_source_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_source_url().data(), this->content_source_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_source_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content_source_url(), output);
  }

  // optional string thumb_media_id = 6;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->thumb_media_id(), output);
  }

  // optional int64 show_cover_pic = 7;
  if (has_show_cover_pic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->show_cover_pic(), output);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url(), output);
  }

  // optional string thumb_url = 9;
  if (has_thumb_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_url().data(), this->thumb_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->thumb_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.NewsItem)
}

::google::protobuf::uint8* NewsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.NewsItem)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string author = 2;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->author(), target);
  }

  // optional string digest = 3;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "digest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->digest(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional string content_source_url = 5;
  if (has_content_source_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content_source_url().data(), this->content_source_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content_source_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content_source_url(), target);
  }

  // optional string thumb_media_id = 6;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->thumb_media_id(), target);
  }

  // optional int64 show_cover_pic = 7;
  if (has_show_cover_pic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->show_cover_pic(), target);
  }

  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }

  // optional string thumb_url = 9;
  if (has_thumb_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_url().data(), this->thumb_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->thumb_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.NewsItem)
  return target;
}

int NewsItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string author = 2;
    if (has_author()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->author());
    }

    // optional string digest = 3;
    if (has_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string content_source_url = 5;
    if (has_content_source_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content_source_url());
    }

    // optional string thumb_media_id = 6;
    if (has_thumb_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_media_id());
    }

    // optional int64 show_cover_pic = 7;
    if (has_show_cover_pic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->show_cover_pic());
    }

    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string thumb_url = 9;
    if (has_thumb_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewsItem::MergeFrom(const NewsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_author()) {
      set_author(from.author());
    }
    if (from.has_digest()) {
      set_digest(from.digest());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_content_source_url()) {
      set_content_source_url(from.content_source_url());
    }
    if (from.has_thumb_media_id()) {
      set_thumb_media_id(from.thumb_media_id());
    }
    if (from.has_show_cover_pic()) {
      set_show_cover_pic(from.show_cover_pic());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_thumb_url()) {
      set_thumb_url(from.thumb_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsItem::CopyFrom(const NewsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsItem::IsInitialized() const {

  return true;
}

void NewsItem::Swap(NewsItem* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(author_, other->author_);
    std::swap(digest_, other->digest_);
    std::swap(content_, other->content_);
    std::swap(content_source_url_, other->content_source_url_);
    std::swap(thumb_media_id_, other->thumb_media_id_);
    std::swap(show_cover_pic_, other->show_cover_pic_);
    std::swap(url_, other->url_);
    std::swap(thumb_url_, other->thumb_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewsItem_descriptor_;
  metadata.reflection = NewsItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewsInfo::kNewsItemFieldNumber;
#endif  // !_MSC_VER

NewsInfo::NewsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.NewsInfo)
}

void NewsInfo::InitAsDefaultInstance() {
}

NewsInfo::NewsInfo(const NewsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.NewsInfo)
}

void NewsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewsInfo::~NewsInfo() {
  // @@protoc_insertion_point(destructor:mpcomm.NewsInfo)
  SharedDtor();
}

void NewsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewsInfo_descriptor_;
}

const NewsInfo& NewsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

NewsInfo* NewsInfo::default_instance_ = NULL;

NewsInfo* NewsInfo::New() const {
  return new NewsInfo;
}

void NewsInfo::Clear() {
  news_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.NewsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mpcomm.NewsItem news_item = 1;
      case 1: {
        if (tag == 10) {
         parse_news_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_news_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_news_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.NewsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.NewsInfo)
  return false;
#undef DO_
}

void NewsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.NewsInfo)
  // repeated .mpcomm.NewsItem news_item = 1;
  for (int i = 0; i < this->news_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->news_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.NewsInfo)
}

::google::protobuf::uint8* NewsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.NewsInfo)
  // repeated .mpcomm.NewsItem news_item = 1;
  for (int i = 0; i < this->news_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->news_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.NewsInfo)
  return target;
}

int NewsInfo::ByteSize() const {
  int total_size = 0;

  // repeated .mpcomm.NewsItem news_item = 1;
  total_size += 1 * this->news_item_size();
  for (int i = 0; i < this->news_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->news_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewsInfo::MergeFrom(const NewsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  news_item_.MergeFrom(from.news_item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsInfo::CopyFrom(const NewsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsInfo::IsInitialized() const {

  return true;
}

void NewsInfo::Swap(NewsInfo* other) {
  if (other != this) {
    news_item_.Swap(&other->news_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewsInfo_descriptor_;
  metadata.reflection = NewsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadImgReq::kAccessTokenFieldNumber;
const int UploadImgReq::kMediaFieldNumber;
#endif  // !_MSC_VER

UploadImgReq::UploadImgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UploadImgReq)
}

void UploadImgReq::InitAsDefaultInstance() {
  media_ = const_cast< ::mpcomm::MediaFile*>(&::mpcomm::MediaFile::default_instance());
}

UploadImgReq::UploadImgReq(const UploadImgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UploadImgReq)
}

void UploadImgReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadImgReq::~UploadImgReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UploadImgReq)
  SharedDtor();
}

void UploadImgReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
    delete media_;
  }
}

void UploadImgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadImgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadImgReq_descriptor_;
}

const UploadImgReq& UploadImgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UploadImgReq* UploadImgReq::default_instance_ = NULL;

UploadImgReq* UploadImgReq::New() const {
  return new UploadImgReq;
}

void UploadImgReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_media()) {
      if (media_ != NULL) media_->::mpcomm::MediaFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadImgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UploadImgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media;
        break;
      }

      // optional .mpcomm.MediaFile media = 2;
      case 2: {
        if (tag == 18) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UploadImgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UploadImgReq)
  return false;
#undef DO_
}

void UploadImgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UploadImgReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional .mpcomm.MediaFile media = 2;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->media(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UploadImgReq)
}

::google::protobuf::uint8* UploadImgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UploadImgReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional .mpcomm.MediaFile media = 2;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->media(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UploadImgReq)
  return target;
}

int UploadImgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional .mpcomm.MediaFile media = 2;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadImgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadImgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadImgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadImgReq::MergeFrom(const UploadImgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_media()) {
      mutable_media()->::mpcomm::MediaFile::MergeFrom(from.media());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadImgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadImgReq::CopyFrom(const UploadImgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadImgReq::IsInitialized() const {

  return true;
}

void UploadImgReq::Swap(UploadImgReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(media_, other->media_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadImgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadImgReq_descriptor_;
  metadata.reflection = UploadImgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadImgResp::kErrcodeFieldNumber;
const int UploadImgResp::kErrmsgFieldNumber;
const int UploadImgResp::kUrlFieldNumber;
#endif  // !_MSC_VER

UploadImgResp::UploadImgResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UploadImgResp)
}

void UploadImgResp::InitAsDefaultInstance() {
}

UploadImgResp::UploadImgResp(const UploadImgResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UploadImgResp)
}

void UploadImgResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadImgResp::~UploadImgResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UploadImgResp)
  SharedDtor();
}

void UploadImgResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void UploadImgResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadImgResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadImgResp_descriptor_;
}

const UploadImgResp& UploadImgResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UploadImgResp* UploadImgResp::default_instance_ = NULL;

UploadImgResp* UploadImgResp::New() const {
  return new UploadImgResp;
}

void UploadImgResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadImgResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UploadImgResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (tag == 26) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UploadImgResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UploadImgResp)
  return false;
#undef DO_
}

void UploadImgResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UploadImgResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UploadImgResp)
}

::google::protobuf::uint8* UploadImgResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UploadImgResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UploadImgResp)
  return target;
}

int UploadImgResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadImgResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadImgResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadImgResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadImgResp::MergeFrom(const UploadImgResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadImgResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadImgResp::CopyFrom(const UploadImgResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadImgResp::IsInitialized() const {

  return true;
}

void UploadImgResp::Swap(UploadImgResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadImgResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadImgResp_descriptor_;
  metadata.reflection = UploadImgResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadNewsReq::kAccessTokenFieldNumber;
const int UploadNewsReq::kArticlesFieldNumber;
#endif  // !_MSC_VER

UploadNewsReq::UploadNewsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UploadNewsReq)
}

void UploadNewsReq::InitAsDefaultInstance() {
}

UploadNewsReq::UploadNewsReq(const UploadNewsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UploadNewsReq)
}

void UploadNewsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadNewsReq::~UploadNewsReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UploadNewsReq)
  SharedDtor();
}

void UploadNewsReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void UploadNewsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadNewsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadNewsReq_descriptor_;
}

const UploadNewsReq& UploadNewsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UploadNewsReq* UploadNewsReq::default_instance_ = NULL;

UploadNewsReq* UploadNewsReq::New() const {
  return new UploadNewsReq;
}

void UploadNewsReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  articles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadNewsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UploadNewsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_articles;
        break;
      }

      // repeated .mpcomm.NewsItem articles = 2;
      case 2: {
        if (tag == 18) {
         parse_articles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_articles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_articles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UploadNewsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UploadNewsReq)
  return false;
#undef DO_
}

void UploadNewsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UploadNewsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated .mpcomm.NewsItem articles = 2;
  for (int i = 0; i < this->articles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->articles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UploadNewsReq)
}

::google::protobuf::uint8* UploadNewsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UploadNewsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated .mpcomm.NewsItem articles = 2;
  for (int i = 0; i < this->articles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->articles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UploadNewsReq)
  return target;
}

int UploadNewsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  // repeated .mpcomm.NewsItem articles = 2;
  total_size += 1 * this->articles_size();
  for (int i = 0; i < this->articles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->articles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadNewsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadNewsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadNewsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadNewsReq::MergeFrom(const UploadNewsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  articles_.MergeFrom(from.articles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadNewsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadNewsReq::CopyFrom(const UploadNewsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadNewsReq::IsInitialized() const {

  return true;
}

void UploadNewsReq::Swap(UploadNewsReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    articles_.Swap(&other->articles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadNewsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadNewsReq_descriptor_;
  metadata.reflection = UploadNewsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadNewsResp::kErrcodeFieldNumber;
const int UploadNewsResp::kErrmsgFieldNumber;
const int UploadNewsResp::kTypeFieldNumber;
const int UploadNewsResp::kMediaIdFieldNumber;
const int UploadNewsResp::kCreatedAtFieldNumber;
#endif  // !_MSC_VER

UploadNewsResp::UploadNewsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UploadNewsResp)
}

void UploadNewsResp::InitAsDefaultInstance() {
}

UploadNewsResp::UploadNewsResp(const UploadNewsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UploadNewsResp)
}

void UploadNewsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_at_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadNewsResp::~UploadNewsResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UploadNewsResp)
  SharedDtor();
}

void UploadNewsResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void UploadNewsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadNewsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadNewsResp_descriptor_;
}

const UploadNewsResp& UploadNewsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UploadNewsResp* UploadNewsResp::default_instance_ = NULL;

UploadNewsResp* UploadNewsResp::New() const {
  return new UploadNewsResp;
}

void UploadNewsResp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
    created_at_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadNewsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UploadNewsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_media_id;
        break;
      }

      // optional string media_id = 4;
      case 4: {
        if (tag == 34) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_created_at;
        break;
      }

      // optional uint64 created_at = 5;
      case 5: {
        if (tag == 40) {
         parse_created_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_at_)));
          set_has_created_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UploadNewsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UploadNewsResp)
  return false;
#undef DO_
}

void UploadNewsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UploadNewsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string media_id = 4;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->media_id(), output);
  }

  // optional uint64 created_at = 5;
  if (has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->created_at(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UploadNewsResp)
}

::google::protobuf::uint8* UploadNewsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UploadNewsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string media_id = 4;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->media_id(), target);
  }

  // optional uint64 created_at = 5;
  if (has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->created_at(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UploadNewsResp)
  return target;
}

int UploadNewsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string media_id = 4;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

    // optional uint64 created_at = 5;
    if (has_created_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->created_at());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadNewsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadNewsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadNewsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadNewsResp::MergeFrom(const UploadNewsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
    if (from.has_created_at()) {
      set_created_at(from.created_at());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadNewsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadNewsResp::CopyFrom(const UploadNewsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadNewsResp::IsInitialized() const {

  return true;
}

void UploadNewsResp::Swap(UploadNewsResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(type_, other->type_);
    std::swap(media_id_, other->media_id_);
    std::swap(created_at_, other->created_at_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadNewsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadNewsResp_descriptor_;
  metadata.reflection = UploadNewsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadMediaReq::kAccessTokenFieldNumber;
const int UploadMediaReq::kTypeFieldNumber;
const int UploadMediaReq::kMediaFieldNumber;
#endif  // !_MSC_VER

UploadMediaReq::UploadMediaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UploadMediaReq)
}

void UploadMediaReq::InitAsDefaultInstance() {
  media_ = const_cast< ::mpcomm::MediaFile*>(&::mpcomm::MediaFile::default_instance());
}

UploadMediaReq::UploadMediaReq(const UploadMediaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UploadMediaReq)
}

void UploadMediaReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadMediaReq::~UploadMediaReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UploadMediaReq)
  SharedDtor();
}

void UploadMediaReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete media_;
  }
}

void UploadMediaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadMediaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadMediaReq_descriptor_;
}

const UploadMediaReq& UploadMediaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UploadMediaReq* UploadMediaReq::default_instance_ = NULL;

UploadMediaReq* UploadMediaReq::New() const {
  return new UploadMediaReq;
}

void UploadMediaReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_media()) {
      if (media_ != NULL) media_->::mpcomm::MediaFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadMediaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UploadMediaReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media;
        break;
      }

      // optional .mpcomm.MediaFile media = 3;
      case 3: {
        if (tag == 26) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UploadMediaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UploadMediaReq)
  return false;
#undef DO_
}

void UploadMediaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UploadMediaReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional .mpcomm.MediaFile media = 3;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->media(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UploadMediaReq)
}

::google::protobuf::uint8* UploadMediaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UploadMediaReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .mpcomm.MediaFile media = 3;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->media(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UploadMediaReq)
  return target;
}

int UploadMediaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .mpcomm.MediaFile media = 3;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadMediaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadMediaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadMediaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadMediaReq::MergeFrom(const UploadMediaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_media()) {
      mutable_media()->::mpcomm::MediaFile::MergeFrom(from.media());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadMediaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadMediaReq::CopyFrom(const UploadMediaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMediaReq::IsInitialized() const {

  return true;
}

void UploadMediaReq::Swap(UploadMediaReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(type_, other->type_);
    std::swap(media_, other->media_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadMediaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadMediaReq_descriptor_;
  metadata.reflection = UploadMediaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadMediaResp::kErrcodeFieldNumber;
const int UploadMediaResp::kErrmsgFieldNumber;
const int UploadMediaResp::kTypeFieldNumber;
const int UploadMediaResp::kMediaIdFieldNumber;
const int UploadMediaResp::kCreatedAtFieldNumber;
const int UploadMediaResp::kThumbMediaIdFieldNumber;
#endif  // !_MSC_VER

UploadMediaResp::UploadMediaResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UploadMediaResp)
}

void UploadMediaResp::InitAsDefaultInstance() {
}

UploadMediaResp::UploadMediaResp(const UploadMediaResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UploadMediaResp)
}

void UploadMediaResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  created_at_ = GOOGLE_ULONGLONG(0);
  thumb_media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadMediaResp::~UploadMediaResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UploadMediaResp)
  SharedDtor();
}

void UploadMediaResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thumb_media_id_;
  }
  if (this != default_instance_) {
  }
}

void UploadMediaResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadMediaResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadMediaResp_descriptor_;
}

const UploadMediaResp& UploadMediaResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UploadMediaResp* UploadMediaResp::default_instance_ = NULL;

UploadMediaResp* UploadMediaResp::New() const {
  return new UploadMediaResp;
}

void UploadMediaResp::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
    created_at_ = GOOGLE_ULONGLONG(0);
    if (has_thumb_media_id()) {
      if (thumb_media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thumb_media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadMediaResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UploadMediaResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_media_id;
        break;
      }

      // optional string media_id = 4;
      case 4: {
        if (tag == 34) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_created_at;
        break;
      }

      // optional uint64 created_at = 5;
      case 5: {
        if (tag == 40) {
         parse_created_at:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &created_at_)));
          set_has_created_at();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_thumb_media_id;
        break;
      }

      // optional string thumb_media_id = 6;
      case 6: {
        if (tag == 50) {
         parse_thumb_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thumb_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thumb_media_id().data(), this->thumb_media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thumb_media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UploadMediaResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UploadMediaResp)
  return false;
#undef DO_
}

void UploadMediaResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UploadMediaResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string media_id = 4;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->media_id(), output);
  }

  // optional uint64 created_at = 5;
  if (has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->created_at(), output);
  }

  // optional string thumb_media_id = 6;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->thumb_media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UploadMediaResp)
}

::google::protobuf::uint8* UploadMediaResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UploadMediaResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string media_id = 4;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->media_id(), target);
  }

  // optional uint64 created_at = 5;
  if (has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->created_at(), target);
  }

  // optional string thumb_media_id = 6;
  if (has_thumb_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thumb_media_id().data(), this->thumb_media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thumb_media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->thumb_media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UploadMediaResp)
  return target;
}

int UploadMediaResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string media_id = 4;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

    // optional uint64 created_at = 5;
    if (has_created_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->created_at());
    }

    // optional string thumb_media_id = 6;
    if (has_thumb_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thumb_media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadMediaResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadMediaResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadMediaResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadMediaResp::MergeFrom(const UploadMediaResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
    if (from.has_created_at()) {
      set_created_at(from.created_at());
    }
    if (from.has_thumb_media_id()) {
      set_thumb_media_id(from.thumb_media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadMediaResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadMediaResp::CopyFrom(const UploadMediaResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMediaResp::IsInitialized() const {

  return true;
}

void UploadMediaResp::Swap(UploadMediaResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(type_, other->type_);
    std::swap(media_id_, other->media_id_);
    std::swap(created_at_, other->created_at_);
    std::swap(thumb_media_id_, other->thumb_media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadMediaResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadMediaResp_descriptor_;
  metadata.reflection = UploadMediaResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMediaReq::kAccessTokenFieldNumber;
const int GetMediaReq::kMediaIdFieldNumber;
#endif  // !_MSC_VER

GetMediaReq::GetMediaReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMediaReq)
}

void GetMediaReq::InitAsDefaultInstance() {
}

GetMediaReq::GetMediaReq(const GetMediaReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMediaReq)
}

void GetMediaReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMediaReq::~GetMediaReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMediaReq)
  SharedDtor();
}

void GetMediaReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void GetMediaReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMediaReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMediaReq_descriptor_;
}

const GetMediaReq& GetMediaReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMediaReq* GetMediaReq::default_instance_ = NULL;

GetMediaReq* GetMediaReq::New() const {
  return new GetMediaReq;
}

void GetMediaReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMediaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMediaReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_id;
        break;
      }

      // optional string media_id = 2;
      case 2: {
        if (tag == 18) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMediaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMediaReq)
  return false;
#undef DO_
}

void GetMediaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMediaReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMediaReq)
}

::google::protobuf::uint8* GetMediaReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMediaReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMediaReq)
  return target;
}

int GetMediaReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string media_id = 2;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMediaReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMediaReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMediaReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMediaReq::MergeFrom(const GetMediaReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMediaReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMediaReq::CopyFrom(const GetMediaReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaReq::IsInitialized() const {

  return true;
}

void GetMediaReq::Swap(GetMediaReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMediaReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMediaReq_descriptor_;
  metadata.reflection = GetMediaReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMediaResp::kErrcodeFieldNumber;
const int GetMediaResp::kErrmsgFieldNumber;
const int GetMediaResp::kMediaFieldNumber;
#endif  // !_MSC_VER

GetMediaResp::GetMediaResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMediaResp)
}

void GetMediaResp::InitAsDefaultInstance() {
  media_ = const_cast< ::mpcomm::MediaFile*>(&::mpcomm::MediaFile::default_instance());
}

GetMediaResp::GetMediaResp(const GetMediaResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMediaResp)
}

void GetMediaResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMediaResp::~GetMediaResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMediaResp)
  SharedDtor();
}

void GetMediaResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete media_;
  }
}

void GetMediaResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMediaResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMediaResp_descriptor_;
}

const GetMediaResp& GetMediaResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMediaResp* GetMediaResp::default_instance_ = NULL;

GetMediaResp* GetMediaResp::New() const {
  return new GetMediaResp;
}

void GetMediaResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_media()) {
      if (media_ != NULL) media_->::mpcomm::MediaFile::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMediaResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMediaResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media;
        break;
      }

      // optional .mpcomm.MediaFile media = 3;
      case 3: {
        if (tag == 26) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMediaResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMediaResp)
  return false;
#undef DO_
}

void GetMediaResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMediaResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional .mpcomm.MediaFile media = 3;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->media(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMediaResp)
}

::google::protobuf::uint8* GetMediaResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMediaResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional .mpcomm.MediaFile media = 3;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->media(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMediaResp)
  return target;
}

int GetMediaResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional .mpcomm.MediaFile media = 3;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMediaResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMediaResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMediaResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMediaResp::MergeFrom(const GetMediaResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_media()) {
      mutable_media()->::mpcomm::MediaFile::MergeFrom(from.media());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMediaResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMediaResp::CopyFrom(const GetMediaResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaResp::IsInitialized() const {

  return true;
}

void GetMediaResp::Swap(GetMediaResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(media_, other->media_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMediaResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMediaResp_descriptor_;
  metadata.reflection = GetMediaResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialVideoDescription::kTitleFieldNumber;
const int MaterialVideoDescription::kIntroductionFieldNumber;
#endif  // !_MSC_VER

MaterialVideoDescription::MaterialVideoDescription()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MaterialVideoDescription)
}

void MaterialVideoDescription::InitAsDefaultInstance() {
}

MaterialVideoDescription::MaterialVideoDescription(const MaterialVideoDescription& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MaterialVideoDescription)
}

void MaterialVideoDescription::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  introduction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialVideoDescription::~MaterialVideoDescription() {
  // @@protoc_insertion_point(destructor:mpcomm.MaterialVideoDescription)
  SharedDtor();
}

void MaterialVideoDescription::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (introduction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete introduction_;
  }
  if (this != default_instance_) {
  }
}

void MaterialVideoDescription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialVideoDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialVideoDescription_descriptor_;
}

const MaterialVideoDescription& MaterialVideoDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MaterialVideoDescription* MaterialVideoDescription::default_instance_ = NULL;

MaterialVideoDescription* MaterialVideoDescription::New() const {
  return new MaterialVideoDescription;
}

void MaterialVideoDescription::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_introduction()) {
      if (introduction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        introduction_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialVideoDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MaterialVideoDescription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_introduction;
        break;
      }

      // optional string introduction = 2;
      case 2: {
        if (tag == 18) {
         parse_introduction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_introduction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->introduction().data(), this->introduction().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "introduction");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MaterialVideoDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MaterialVideoDescription)
  return false;
#undef DO_
}

void MaterialVideoDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MaterialVideoDescription)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string introduction = 2;
  if (has_introduction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "introduction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->introduction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MaterialVideoDescription)
}

::google::protobuf::uint8* MaterialVideoDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MaterialVideoDescription)
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string introduction = 2;
  if (has_introduction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->introduction().data(), this->introduction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "introduction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->introduction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MaterialVideoDescription)
  return target;
}

int MaterialVideoDescription::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string introduction = 2;
    if (has_introduction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->introduction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialVideoDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialVideoDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialVideoDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialVideoDescription::MergeFrom(const MaterialVideoDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_introduction()) {
      set_introduction(from.introduction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialVideoDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialVideoDescription::CopyFrom(const MaterialVideoDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialVideoDescription::IsInitialized() const {

  return true;
}

void MaterialVideoDescription::Swap(MaterialVideoDescription* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(introduction_, other->introduction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialVideoDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialVideoDescription_descriptor_;
  metadata.reflection = MaterialVideoDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewsMaterialReq::kAccessTokenFieldNumber;
const int AddNewsMaterialReq::kArticlesFieldNumber;
#endif  // !_MSC_VER

AddNewsMaterialReq::AddNewsMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddNewsMaterialReq)
}

void AddNewsMaterialReq::InitAsDefaultInstance() {
}

AddNewsMaterialReq::AddNewsMaterialReq(const AddNewsMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddNewsMaterialReq)
}

void AddNewsMaterialReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewsMaterialReq::~AddNewsMaterialReq() {
  // @@protoc_insertion_point(destructor:mpcomm.AddNewsMaterialReq)
  SharedDtor();
}

void AddNewsMaterialReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void AddNewsMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewsMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewsMaterialReq_descriptor_;
}

const AddNewsMaterialReq& AddNewsMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddNewsMaterialReq* AddNewsMaterialReq::default_instance_ = NULL;

AddNewsMaterialReq* AddNewsMaterialReq::New() const {
  return new AddNewsMaterialReq;
}

void AddNewsMaterialReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  articles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewsMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddNewsMaterialReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_articles;
        break;
      }

      // repeated .mpcomm.NewsItem articles = 2;
      case 2: {
        if (tag == 18) {
         parse_articles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_articles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_articles;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddNewsMaterialReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddNewsMaterialReq)
  return false;
#undef DO_
}

void AddNewsMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddNewsMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated .mpcomm.NewsItem articles = 2;
  for (int i = 0; i < this->articles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->articles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddNewsMaterialReq)
}

::google::protobuf::uint8* AddNewsMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddNewsMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated .mpcomm.NewsItem articles = 2;
  for (int i = 0; i < this->articles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->articles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddNewsMaterialReq)
  return target;
}

int AddNewsMaterialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  // repeated .mpcomm.NewsItem articles = 2;
  total_size += 1 * this->articles_size();
  for (int i = 0; i < this->articles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->articles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewsMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewsMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewsMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewsMaterialReq::MergeFrom(const AddNewsMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  articles_.MergeFrom(from.articles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewsMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewsMaterialReq::CopyFrom(const AddNewsMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewsMaterialReq::IsInitialized() const {

  return true;
}

void AddNewsMaterialReq::Swap(AddNewsMaterialReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    articles_.Swap(&other->articles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewsMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewsMaterialReq_descriptor_;
  metadata.reflection = AddNewsMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewsMaterialResp::kErrcodeFieldNumber;
const int AddNewsMaterialResp::kErrmsgFieldNumber;
const int AddNewsMaterialResp::kMediaIdFieldNumber;
#endif  // !_MSC_VER

AddNewsMaterialResp::AddNewsMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddNewsMaterialResp)
}

void AddNewsMaterialResp::InitAsDefaultInstance() {
}

AddNewsMaterialResp::AddNewsMaterialResp(const AddNewsMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddNewsMaterialResp)
}

void AddNewsMaterialResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewsMaterialResp::~AddNewsMaterialResp() {
  // @@protoc_insertion_point(destructor:mpcomm.AddNewsMaterialResp)
  SharedDtor();
}

void AddNewsMaterialResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void AddNewsMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewsMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewsMaterialResp_descriptor_;
}

const AddNewsMaterialResp& AddNewsMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddNewsMaterialResp* AddNewsMaterialResp::default_instance_ = NULL;

AddNewsMaterialResp* AddNewsMaterialResp::New() const {
  return new AddNewsMaterialResp;
}

void AddNewsMaterialResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewsMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddNewsMaterialResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media_id;
        break;
      }

      // optional string media_id = 3;
      case 3: {
        if (tag == 26) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddNewsMaterialResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddNewsMaterialResp)
  return false;
#undef DO_
}

void AddNewsMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddNewsMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string media_id = 3;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddNewsMaterialResp)
}

::google::protobuf::uint8* AddNewsMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddNewsMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string media_id = 3;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddNewsMaterialResp)
  return target;
}

int AddNewsMaterialResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string media_id = 3;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewsMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewsMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewsMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewsMaterialResp::MergeFrom(const AddNewsMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewsMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewsMaterialResp::CopyFrom(const AddNewsMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewsMaterialResp::IsInitialized() const {

  return true;
}

void AddNewsMaterialResp::Swap(AddNewsMaterialResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewsMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewsMaterialResp_descriptor_;
  metadata.reflection = AddNewsMaterialResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMaterialReq::kAccessTokenFieldNumber;
const int AddMaterialReq::kTypeFieldNumber;
const int AddMaterialReq::kMediaFieldNumber;
const int AddMaterialReq::kDescriptionFieldNumber;
#endif  // !_MSC_VER

AddMaterialReq::AddMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddMaterialReq)
}

void AddMaterialReq::InitAsDefaultInstance() {
  media_ = const_cast< ::mpcomm::MediaFile*>(&::mpcomm::MediaFile::default_instance());
  description_ = const_cast< ::mpcomm::MaterialVideoDescription*>(&::mpcomm::MaterialVideoDescription::default_instance());
}

AddMaterialReq::AddMaterialReq(const AddMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddMaterialReq)
}

void AddMaterialReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_ = NULL;
  description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMaterialReq::~AddMaterialReq() {
  // @@protoc_insertion_point(destructor:mpcomm.AddMaterialReq)
  SharedDtor();
}

void AddMaterialReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
    delete media_;
    delete description_;
  }
}

void AddMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMaterialReq_descriptor_;
}

const AddMaterialReq& AddMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddMaterialReq* AddMaterialReq::default_instance_ = NULL;

AddMaterialReq* AddMaterialReq::New() const {
  return new AddMaterialReq;
}

void AddMaterialReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_media()) {
      if (media_ != NULL) media_->::mpcomm::MediaFile::Clear();
    }
    if (has_description()) {
      if (description_ != NULL) description_->::mpcomm::MaterialVideoDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddMaterialReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media;
        break;
      }

      // optional .mpcomm.MediaFile media = 3;
      case 3: {
        if (tag == 26) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional .mpcomm.MaterialVideoDescription description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddMaterialReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddMaterialReq)
  return false;
#undef DO_
}

void AddMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional .mpcomm.MediaFile media = 3;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->media(), output);
  }

  // optional .mpcomm.MaterialVideoDescription description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddMaterialReq)
}

::google::protobuf::uint8* AddMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .mpcomm.MediaFile media = 3;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->media(), target);
  }

  // optional .mpcomm.MaterialVideoDescription description = 4;
  if (has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddMaterialReq)
  return target;
}

int AddMaterialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .mpcomm.MediaFile media = 3;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

    // optional .mpcomm.MaterialVideoDescription description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMaterialReq::MergeFrom(const AddMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_media()) {
      mutable_media()->::mpcomm::MediaFile::MergeFrom(from.media());
    }
    if (from.has_description()) {
      mutable_description()->::mpcomm::MaterialVideoDescription::MergeFrom(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMaterialReq::CopyFrom(const AddMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMaterialReq::IsInitialized() const {

  return true;
}

void AddMaterialReq::Swap(AddMaterialReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(type_, other->type_);
    std::swap(media_, other->media_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMaterialReq_descriptor_;
  metadata.reflection = AddMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMaterialResp::kErrcodeFieldNumber;
const int AddMaterialResp::kErrmsgFieldNumber;
const int AddMaterialResp::kMediaIdFieldNumber;
const int AddMaterialResp::kUrlFieldNumber;
#endif  // !_MSC_VER

AddMaterialResp::AddMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.AddMaterialResp)
}

void AddMaterialResp::InitAsDefaultInstance() {
}

AddMaterialResp::AddMaterialResp(const AddMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.AddMaterialResp)
}

void AddMaterialResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMaterialResp::~AddMaterialResp() {
  // @@protoc_insertion_point(destructor:mpcomm.AddMaterialResp)
  SharedDtor();
}

void AddMaterialResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void AddMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMaterialResp_descriptor_;
}

const AddMaterialResp& AddMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

AddMaterialResp* AddMaterialResp::default_instance_ = NULL;

AddMaterialResp* AddMaterialResp::New() const {
  return new AddMaterialResp;
}

void AddMaterialResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.AddMaterialResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_media_id;
        break;
      }

      // optional string media_id = 3;
      case 3: {
        if (tag == 26) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional string url = 4;
      case 4: {
        if (tag == 34) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.AddMaterialResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.AddMaterialResp)
  return false;
#undef DO_
}

void AddMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.AddMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional string media_id = 3;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->media_id(), output);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.AddMaterialResp)
}

::google::protobuf::uint8* AddMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.AddMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional string media_id = 3;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->media_id(), target);
  }

  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.AddMaterialResp)
  return target;
}

int AddMaterialResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string media_id = 3;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMaterialResp::MergeFrom(const AddMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMaterialResp::CopyFrom(const AddMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMaterialResp::IsInitialized() const {

  return true;
}

void AddMaterialResp::Swap(AddMaterialResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(media_id_, other->media_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMaterialResp_descriptor_;
  metadata.reflection = AddMaterialResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMaterialReq::kAccessTokenFieldNumber;
const int GetMaterialReq::kMediaIdFieldNumber;
#endif  // !_MSC_VER

GetMaterialReq::GetMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMaterialReq)
}

void GetMaterialReq::InitAsDefaultInstance() {
}

GetMaterialReq::GetMaterialReq(const GetMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMaterialReq)
}

void GetMaterialReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMaterialReq::~GetMaterialReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMaterialReq)
  SharedDtor();
}

void GetMaterialReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void GetMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMaterialReq_descriptor_;
}

const GetMaterialReq& GetMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMaterialReq* GetMaterialReq::default_instance_ = NULL;

GetMaterialReq* GetMaterialReq::New() const {
  return new GetMaterialReq;
}

void GetMaterialReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMaterialReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_id;
        break;
      }

      // optional string media_id = 2;
      case 2: {
        if (tag == 18) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMaterialReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMaterialReq)
  return false;
#undef DO_
}

void GetMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMaterialReq)
}

::google::protobuf::uint8* GetMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMaterialReq)
  return target;
}

int GetMaterialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string media_id = 2;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMaterialReq::MergeFrom(const GetMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMaterialReq::CopyFrom(const GetMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaterialReq::IsInitialized() const {

  return true;
}

void GetMaterialReq::Swap(GetMaterialReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMaterialReq_descriptor_;
  metadata.reflection = GetMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMaterialResp::kErrcodeFieldNumber;
const int GetMaterialResp::kErrmsgFieldNumber;
const int GetMaterialResp::kNewsItemFieldNumber;
const int GetMaterialResp::kTitleFieldNumber;
const int GetMaterialResp::kDescriptionFieldNumber;
const int GetMaterialResp::kDownUrlFieldNumber;
const int GetMaterialResp::kMediaFieldNumber;
#endif  // !_MSC_VER

GetMaterialResp::GetMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMaterialResp)
}

void GetMaterialResp::InitAsDefaultInstance() {
  media_ = const_cast< ::mpcomm::MediaFile*>(&::mpcomm::MediaFile::default_instance());
}

GetMaterialResp::GetMaterialResp(const GetMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMaterialResp)
}

void GetMaterialResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  down_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMaterialResp::~GetMaterialResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMaterialResp)
  SharedDtor();
}

void GetMaterialResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (down_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete down_url_;
  }
  if (this != default_instance_) {
    delete media_;
  }
}

void GetMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMaterialResp_descriptor_;
}

const GetMaterialResp& GetMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMaterialResp* GetMaterialResp::default_instance_ = NULL;

GetMaterialResp* GetMaterialResp::New() const {
  return new GetMaterialResp;
}

void GetMaterialResp::Clear() {
  if (_has_bits_[0 / 32] & 123) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_down_url()) {
      if (down_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        down_url_->clear();
      }
    }
    if (has_media()) {
      if (media_ != NULL) media_->::mpcomm::MediaFile::Clear();
    }
  }
  news_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMaterialResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_news_item;
        break;
      }

      // repeated .mpcomm.NewsItem news_item = 3;
      case 3: {
        if (tag == 26) {
         parse_news_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_news_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_news_item;
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (tag == 34) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_down_url;
        break;
      }

      // optional string down_url = 6;
      case 6: {
        if (tag == 50) {
         parse_down_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_down_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->down_url().data(), this->down_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "down_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_media;
        break;
      }

      // optional .mpcomm.MediaFile media = 7;
      case 7: {
        if (tag == 58) {
         parse_media:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_media()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMaterialResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMaterialResp)
  return false;
#undef DO_
}

void GetMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated .mpcomm.NewsItem news_item = 3;
  for (int i = 0; i < this->news_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->news_item(i), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional string down_url = 6;
  if (has_down_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->down_url().data(), this->down_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "down_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->down_url(), output);
  }

  // optional .mpcomm.MediaFile media = 7;
  if (has_media()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->media(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMaterialResp)
}

::google::protobuf::uint8* GetMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated .mpcomm.NewsItem news_item = 3;
  for (int i = 0; i < this->news_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->news_item(i), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string description = 5;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional string down_url = 6;
  if (has_down_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->down_url().data(), this->down_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "down_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->down_url(), target);
  }

  // optional .mpcomm.MediaFile media = 7;
  if (has_media()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->media(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMaterialResp)
  return target;
}

int GetMaterialResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 5;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string down_url = 6;
    if (has_down_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->down_url());
    }

    // optional .mpcomm.MediaFile media = 7;
    if (has_media()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->media());
    }

  }
  // repeated .mpcomm.NewsItem news_item = 3;
  total_size += 1 * this->news_item_size();
  for (int i = 0; i < this->news_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->news_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMaterialResp::MergeFrom(const GetMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  news_item_.MergeFrom(from.news_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_down_url()) {
      set_down_url(from.down_url());
    }
    if (from.has_media()) {
      mutable_media()->::mpcomm::MediaFile::MergeFrom(from.media());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMaterialResp::CopyFrom(const GetMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaterialResp::IsInitialized() const {

  return true;
}

void GetMaterialResp::Swap(GetMaterialResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    news_item_.Swap(&other->news_item_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(down_url_, other->down_url_);
    std::swap(media_, other->media_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMaterialResp_descriptor_;
  metadata.reflection = GetMaterialResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelMaterialReq::kAccessTokenFieldNumber;
const int DelMaterialReq::kMediaIdFieldNumber;
#endif  // !_MSC_VER

DelMaterialReq::DelMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DelMaterialReq)
}

void DelMaterialReq::InitAsDefaultInstance() {
}

DelMaterialReq::DelMaterialReq(const DelMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DelMaterialReq)
}

void DelMaterialReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelMaterialReq::~DelMaterialReq() {
  // @@protoc_insertion_point(destructor:mpcomm.DelMaterialReq)
  SharedDtor();
}

void DelMaterialReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
  }
}

void DelMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelMaterialReq_descriptor_;
}

const DelMaterialReq& DelMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DelMaterialReq* DelMaterialReq::default_instance_ = NULL;

DelMaterialReq* DelMaterialReq::New() const {
  return new DelMaterialReq;
}

void DelMaterialReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DelMaterialReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_id;
        break;
      }

      // optional string media_id = 2;
      case 2: {
        if (tag == 18) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DelMaterialReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DelMaterialReq)
  return false;
#undef DO_
}

void DelMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DelMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DelMaterialReq)
}

::google::protobuf::uint8* DelMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DelMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->media_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DelMaterialReq)
  return target;
}

int DelMaterialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string media_id = 2;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelMaterialReq::MergeFrom(const DelMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMaterialReq::CopyFrom(const DelMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMaterialReq::IsInitialized() const {

  return true;
}

void DelMaterialReq::Swap(DelMaterialReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(media_id_, other->media_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelMaterialReq_descriptor_;
  metadata.reflection = DelMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelMaterialResp::kErrcodeFieldNumber;
const int DelMaterialResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

DelMaterialResp::DelMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DelMaterialResp)
}

void DelMaterialResp::InitAsDefaultInstance() {
}

DelMaterialResp::DelMaterialResp(const DelMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DelMaterialResp)
}

void DelMaterialResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelMaterialResp::~DelMaterialResp() {
  // @@protoc_insertion_point(destructor:mpcomm.DelMaterialResp)
  SharedDtor();
}

void DelMaterialResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void DelMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelMaterialResp_descriptor_;
}

const DelMaterialResp& DelMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DelMaterialResp* DelMaterialResp::default_instance_ = NULL;

DelMaterialResp* DelMaterialResp::New() const {
  return new DelMaterialResp;
}

void DelMaterialResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DelMaterialResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DelMaterialResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DelMaterialResp)
  return false;
#undef DO_
}

void DelMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DelMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DelMaterialResp)
}

::google::protobuf::uint8* DelMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DelMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DelMaterialResp)
  return target;
}

int DelMaterialResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelMaterialResp::MergeFrom(const DelMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelMaterialResp::CopyFrom(const DelMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelMaterialResp::IsInitialized() const {

  return true;
}

void DelMaterialResp::Swap(DelMaterialResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelMaterialResp_descriptor_;
  metadata.reflection = DelMaterialResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateNewsReq::kAccessTokenFieldNumber;
const int UpdateNewsReq::kMediaIdFieldNumber;
const int UpdateNewsReq::kIndexFieldNumber;
const int UpdateNewsReq::kArticlesFieldNumber;
#endif  // !_MSC_VER

UpdateNewsReq::UpdateNewsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateNewsReq)
}

void UpdateNewsReq::InitAsDefaultInstance() {
  articles_ = const_cast< ::mpcomm::NewsItem*>(&::mpcomm::NewsItem::default_instance());
}

UpdateNewsReq::UpdateNewsReq(const UpdateNewsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateNewsReq)
}

void UpdateNewsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = GOOGLE_ULONGLONG(0);
  articles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateNewsReq::~UpdateNewsReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateNewsReq)
  SharedDtor();
}

void UpdateNewsReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (this != default_instance_) {
    delete articles_;
  }
}

void UpdateNewsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateNewsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateNewsReq_descriptor_;
}

const UpdateNewsReq& UpdateNewsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateNewsReq* UpdateNewsReq::default_instance_ = NULL;

UpdateNewsReq* UpdateNewsReq::New() const {
  return new UpdateNewsReq;
}

void UpdateNewsReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
    index_ = GOOGLE_ULONGLONG(0);
    if (has_articles()) {
      if (articles_ != NULL) articles_->::mpcomm::NewsItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateNewsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateNewsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_media_id;
        break;
      }

      // optional string media_id = 2;
      case 2: {
        if (tag == 18) {
         parse_media_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint64 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_articles;
        break;
      }

      // optional .mpcomm.NewsItem articles = 4;
      case 4: {
        if (tag == 34) {
         parse_articles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_articles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateNewsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateNewsReq)
  return false;
#undef DO_
}

void UpdateNewsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateNewsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_id(), output);
  }

  // optional uint64 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }

  // optional .mpcomm.NewsItem articles = 4;
  if (has_articles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->articles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateNewsReq)
}

::google::protobuf::uint8* UpdateNewsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateNewsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string media_id = 2;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->media_id(), target);
  }

  // optional uint64 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }

  // optional .mpcomm.NewsItem articles = 4;
  if (has_articles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->articles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateNewsReq)
  return target;
}

int UpdateNewsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string media_id = 2;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

    // optional uint64 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional .mpcomm.NewsItem articles = 4;
    if (has_articles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->articles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateNewsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateNewsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateNewsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateNewsReq::MergeFrom(const UpdateNewsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_articles()) {
      mutable_articles()->::mpcomm::NewsItem::MergeFrom(from.articles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateNewsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNewsReq::CopyFrom(const UpdateNewsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNewsReq::IsInitialized() const {

  return true;
}

void UpdateNewsReq::Swap(UpdateNewsReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(media_id_, other->media_id_);
    std::swap(index_, other->index_);
    std::swap(articles_, other->articles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateNewsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateNewsReq_descriptor_;
  metadata.reflection = UpdateNewsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateNewsResp::kErrcodeFieldNumber;
const int UpdateNewsResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

UpdateNewsResp::UpdateNewsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateNewsResp)
}

void UpdateNewsResp::InitAsDefaultInstance() {
}

UpdateNewsResp::UpdateNewsResp(const UpdateNewsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateNewsResp)
}

void UpdateNewsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateNewsResp::~UpdateNewsResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateNewsResp)
  SharedDtor();
}

void UpdateNewsResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void UpdateNewsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateNewsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateNewsResp_descriptor_;
}

const UpdateNewsResp& UpdateNewsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateNewsResp* UpdateNewsResp::default_instance_ = NULL;

UpdateNewsResp* UpdateNewsResp::New() const {
  return new UpdateNewsResp;
}

void UpdateNewsResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateNewsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateNewsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateNewsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateNewsResp)
  return false;
#undef DO_
}

void UpdateNewsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateNewsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateNewsResp)
}

::google::protobuf::uint8* UpdateNewsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateNewsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateNewsResp)
  return target;
}

int UpdateNewsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateNewsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateNewsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateNewsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateNewsResp::MergeFrom(const UpdateNewsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateNewsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNewsResp::CopyFrom(const UpdateNewsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNewsResp::IsInitialized() const {

  return true;
}

void UpdateNewsResp::Swap(UpdateNewsResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateNewsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateNewsResp_descriptor_;
  metadata.reflection = UpdateNewsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMaterialCountReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetMaterialCountReq::GetMaterialCountReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMaterialCountReq)
}

void GetMaterialCountReq::InitAsDefaultInstance() {
}

GetMaterialCountReq::GetMaterialCountReq(const GetMaterialCountReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMaterialCountReq)
}

void GetMaterialCountReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMaterialCountReq::~GetMaterialCountReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMaterialCountReq)
  SharedDtor();
}

void GetMaterialCountReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetMaterialCountReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMaterialCountReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMaterialCountReq_descriptor_;
}

const GetMaterialCountReq& GetMaterialCountReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMaterialCountReq* GetMaterialCountReq::default_instance_ = NULL;

GetMaterialCountReq* GetMaterialCountReq::New() const {
  return new GetMaterialCountReq;
}

void GetMaterialCountReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMaterialCountReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMaterialCountReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMaterialCountReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMaterialCountReq)
  return false;
#undef DO_
}

void GetMaterialCountReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMaterialCountReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMaterialCountReq)
}

::google::protobuf::uint8* GetMaterialCountReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMaterialCountReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMaterialCountReq)
  return target;
}

int GetMaterialCountReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMaterialCountReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMaterialCountReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMaterialCountReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMaterialCountReq::MergeFrom(const GetMaterialCountReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMaterialCountReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMaterialCountReq::CopyFrom(const GetMaterialCountReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaterialCountReq::IsInitialized() const {

  return true;
}

void GetMaterialCountReq::Swap(GetMaterialCountReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMaterialCountReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMaterialCountReq_descriptor_;
  metadata.reflection = GetMaterialCountReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetMaterialCountResp::kErrcodeFieldNumber;
const int GetMaterialCountResp::kErrmsgFieldNumber;
const int GetMaterialCountResp::kVoiceCountFieldNumber;
const int GetMaterialCountResp::kVideoCountFieldNumber;
const int GetMaterialCountResp::kImageCountFieldNumber;
const int GetMaterialCountResp::kNewsCountFieldNumber;
#endif  // !_MSC_VER

GetMaterialCountResp::GetMaterialCountResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetMaterialCountResp)
}

void GetMaterialCountResp::InitAsDefaultInstance() {
}

GetMaterialCountResp::GetMaterialCountResp(const GetMaterialCountResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetMaterialCountResp)
}

void GetMaterialCountResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  voice_count_ = GOOGLE_ULONGLONG(0);
  video_count_ = GOOGLE_ULONGLONG(0);
  image_count_ = GOOGLE_ULONGLONG(0);
  news_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetMaterialCountResp::~GetMaterialCountResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetMaterialCountResp)
  SharedDtor();
}

void GetMaterialCountResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void GetMaterialCountResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMaterialCountResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetMaterialCountResp_descriptor_;
}

const GetMaterialCountResp& GetMaterialCountResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetMaterialCountResp* GetMaterialCountResp::default_instance_ = NULL;

GetMaterialCountResp* GetMaterialCountResp::New() const {
  return new GetMaterialCountResp;
}

void GetMaterialCountResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetMaterialCountResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(voice_count_, news_count_);
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetMaterialCountResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetMaterialCountResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_voice_count;
        break;
      }

      // optional uint64 voice_count = 3;
      case 3: {
        if (tag == 24) {
         parse_voice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &voice_count_)));
          set_has_voice_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_video_count;
        break;
      }

      // optional uint64 video_count = 4;
      case 4: {
        if (tag == 32) {
         parse_video_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_count_)));
          set_has_video_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_image_count;
        break;
      }

      // optional uint64 image_count = 5;
      case 5: {
        if (tag == 40) {
         parse_image_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &image_count_)));
          set_has_image_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_news_count;
        break;
      }

      // optional uint64 news_count = 6;
      case 6: {
        if (tag == 48) {
         parse_news_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &news_count_)));
          set_has_news_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetMaterialCountResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetMaterialCountResp)
  return false;
#undef DO_
}

void GetMaterialCountResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetMaterialCountResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 voice_count = 3;
  if (has_voice_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->voice_count(), output);
  }

  // optional uint64 video_count = 4;
  if (has_video_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->video_count(), output);
  }

  // optional uint64 image_count = 5;
  if (has_image_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->image_count(), output);
  }

  // optional uint64 news_count = 6;
  if (has_news_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->news_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetMaterialCountResp)
}

::google::protobuf::uint8* GetMaterialCountResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetMaterialCountResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 voice_count = 3;
  if (has_voice_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->voice_count(), target);
  }

  // optional uint64 video_count = 4;
  if (has_video_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->video_count(), target);
  }

  // optional uint64 image_count = 5;
  if (has_image_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->image_count(), target);
  }

  // optional uint64 news_count = 6;
  if (has_news_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->news_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetMaterialCountResp)
  return target;
}

int GetMaterialCountResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 voice_count = 3;
    if (has_voice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->voice_count());
    }

    // optional uint64 video_count = 4;
    if (has_video_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->video_count());
    }

    // optional uint64 image_count = 5;
    if (has_image_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->image_count());
    }

    // optional uint64 news_count = 6;
    if (has_news_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->news_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMaterialCountResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetMaterialCountResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetMaterialCountResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetMaterialCountResp::MergeFrom(const GetMaterialCountResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_voice_count()) {
      set_voice_count(from.voice_count());
    }
    if (from.has_video_count()) {
      set_video_count(from.video_count());
    }
    if (from.has_image_count()) {
      set_image_count(from.image_count());
    }
    if (from.has_news_count()) {
      set_news_count(from.news_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetMaterialCountResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMaterialCountResp::CopyFrom(const GetMaterialCountResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMaterialCountResp::IsInitialized() const {

  return true;
}

void GetMaterialCountResp::Swap(GetMaterialCountResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(voice_count_, other->voice_count_);
    std::swap(video_count_, other->video_count_);
    std::swap(image_count_, other->image_count_);
    std::swap(news_count_, other->news_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetMaterialCountResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetMaterialCountResp_descriptor_;
  metadata.reflection = GetMaterialCountResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetMaterialReq::kAccessTokenFieldNumber;
const int BatchGetMaterialReq::kTypeFieldNumber;
const int BatchGetMaterialReq::kOffsetFieldNumber;
const int BatchGetMaterialReq::kCountFieldNumber;
#endif  // !_MSC_VER

BatchGetMaterialReq::BatchGetMaterialReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchGetMaterialReq)
}

void BatchGetMaterialReq::InitAsDefaultInstance() {
}

BatchGetMaterialReq::BatchGetMaterialReq(const BatchGetMaterialReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchGetMaterialReq)
}

void BatchGetMaterialReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = GOOGLE_ULONGLONG(0);
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetMaterialReq::~BatchGetMaterialReq() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchGetMaterialReq)
  SharedDtor();
}

void BatchGetMaterialReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void BatchGetMaterialReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetMaterialReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetMaterialReq_descriptor_;
}

const BatchGetMaterialReq& BatchGetMaterialReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchGetMaterialReq* BatchGetMaterialReq::default_instance_ = NULL;

BatchGetMaterialReq* BatchGetMaterialReq::New() const {
  return new BatchGetMaterialReq;
}

void BatchGetMaterialReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatchGetMaterialReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(offset_, count_);
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetMaterialReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchGetMaterialReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional uint64 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint64 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchGetMaterialReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchGetMaterialReq)
  return false;
#undef DO_
}

void BatchGetMaterialReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchGetMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // optional uint64 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  // optional uint64 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchGetMaterialReq)
}

::google::protobuf::uint8* BatchGetMaterialReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchGetMaterialReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional uint64 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  // optional uint64 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchGetMaterialReq)
  return target;
}

int BatchGetMaterialReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional uint64 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional uint64 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetMaterialReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetMaterialReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetMaterialReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetMaterialReq::MergeFrom(const BatchGetMaterialReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetMaterialReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetMaterialReq::CopyFrom(const BatchGetMaterialReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetMaterialReq::IsInitialized() const {

  return true;
}

void BatchGetMaterialReq::Swap(BatchGetMaterialReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(type_, other->type_);
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetMaterialReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetMaterialReq_descriptor_;
  metadata.reflection = BatchGetMaterialReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaterialItem::kMediaIdFieldNumber;
const int MaterialItem::kNameFieldNumber;
const int MaterialItem::kContentFieldNumber;
const int MaterialItem::kUpdateTimeFieldNumber;
const int MaterialItem::kBindTemplateIdFieldNumber;
const int MaterialItem::kUrlFieldNumber;
#endif  // !_MSC_VER

MaterialItem::MaterialItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.MaterialItem)
}

void MaterialItem::InitAsDefaultInstance() {
  content_ = const_cast< ::mpcomm::NewsInfo*>(&::mpcomm::NewsInfo::default_instance());
}

MaterialItem::MaterialItem(const MaterialItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.MaterialItem)
}

void MaterialItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  media_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = NULL;
  update_time_ = GOOGLE_ULONGLONG(0);
  bind_template_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaterialItem::~MaterialItem() {
  // @@protoc_insertion_point(destructor:mpcomm.MaterialItem)
  SharedDtor();
}

void MaterialItem::SharedDtor() {
  if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete media_id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bind_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bind_template_id_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void MaterialItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaterialItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaterialItem_descriptor_;
}

const MaterialItem& MaterialItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

MaterialItem* MaterialItem::default_instance_ = NULL;

MaterialItem* MaterialItem::New() const {
  return new MaterialItem;
}

void MaterialItem::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_media_id()) {
      if (media_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        media_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_content()) {
      if (content_ != NULL) content_->::mpcomm::NewsInfo::Clear();
    }
    update_time_ = GOOGLE_ULONGLONG(0);
    if (has_bind_template_id()) {
      if (bind_template_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bind_template_id_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaterialItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.MaterialItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string media_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "media_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional .mpcomm.NewsInfo content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // optional uint64 update_time = 4;
      case 4: {
        if (tag == 32) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bind_template_id;
        break;
      }

      // optional string bind_template_id = 5;
      case 5: {
        if (tag == 42) {
         parse_bind_template_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_template_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bind_template_id().data(), this->bind_template_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bind_template_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_url;
        break;
      }

      // optional string url = 6;
      case 6: {
        if (tag == 50) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.MaterialItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.MaterialItem)
  return false;
#undef DO_
}

void MaterialItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.MaterialItem)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .mpcomm.NewsInfo content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->content(), output);
  }

  // optional uint64 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->update_time(), output);
  }

  // optional string bind_template_id = 5;
  if (has_bind_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bind_template_id().data(), this->bind_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bind_template_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bind_template_id(), output);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.MaterialItem)
}

::google::protobuf::uint8* MaterialItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.MaterialItem)
  // optional string media_id = 1;
  if (has_media_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->media_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .mpcomm.NewsInfo content = 3;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->content(), target);
  }

  // optional uint64 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->update_time(), target);
  }

  // optional string bind_template_id = 5;
  if (has_bind_template_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bind_template_id().data(), this->bind_template_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bind_template_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bind_template_id(), target);
  }

  // optional string url = 6;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.MaterialItem)
  return target;
}

int MaterialItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string media_id = 1;
    if (has_media_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->media_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .mpcomm.NewsInfo content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint64 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->update_time());
    }

    // optional string bind_template_id = 5;
    if (has_bind_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_template_id());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaterialItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaterialItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaterialItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaterialItem::MergeFrom(const MaterialItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_media_id()) {
      set_media_id(from.media_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_content()) {
      mutable_content()->::mpcomm::NewsInfo::MergeFrom(from.content());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_bind_template_id()) {
      set_bind_template_id(from.bind_template_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaterialItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaterialItem::CopyFrom(const MaterialItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaterialItem::IsInitialized() const {

  return true;
}

void MaterialItem::Swap(MaterialItem* other) {
  if (other != this) {
    std::swap(media_id_, other->media_id_);
    std::swap(name_, other->name_);
    std::swap(content_, other->content_);
    std::swap(update_time_, other->update_time_);
    std::swap(bind_template_id_, other->bind_template_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaterialItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaterialItem_descriptor_;
  metadata.reflection = MaterialItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetMaterialResp::kErrcodeFieldNumber;
const int BatchGetMaterialResp::kErrmsgFieldNumber;
const int BatchGetMaterialResp::kItemFieldNumber;
const int BatchGetMaterialResp::kTotalCountFieldNumber;
const int BatchGetMaterialResp::kItemCountFieldNumber;
#endif  // !_MSC_VER

BatchGetMaterialResp::BatchGetMaterialResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchGetMaterialResp)
}

void BatchGetMaterialResp::InitAsDefaultInstance() {
}

BatchGetMaterialResp::BatchGetMaterialResp(const BatchGetMaterialResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchGetMaterialResp)
}

void BatchGetMaterialResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_count_ = GOOGLE_ULONGLONG(0);
  item_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetMaterialResp::~BatchGetMaterialResp() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchGetMaterialResp)
  SharedDtor();
}

void BatchGetMaterialResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void BatchGetMaterialResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetMaterialResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetMaterialResp_descriptor_;
}

const BatchGetMaterialResp& BatchGetMaterialResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchGetMaterialResp* BatchGetMaterialResp::default_instance_ = NULL;

BatchGetMaterialResp* BatchGetMaterialResp::New() const {
  return new BatchGetMaterialResp;
}

void BatchGetMaterialResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BatchGetMaterialResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(total_count_, item_count_);
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetMaterialResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchGetMaterialResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .mpcomm.MaterialItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_total_count;
        break;
      }

      // optional uint64 total_count = 4;
      case 4: {
        if (tag == 32) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // optional uint64 item_count = 5;
      case 5: {
        if (tag == 40) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchGetMaterialResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchGetMaterialResp)
  return false;
#undef DO_
}

void BatchGetMaterialResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchGetMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated .mpcomm.MaterialItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional uint64 total_count = 4;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->total_count(), output);
  }

  // optional uint64 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchGetMaterialResp)
}

::google::protobuf::uint8* BatchGetMaterialResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchGetMaterialResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated .mpcomm.MaterialItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional uint64 total_count = 4;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->total_count(), target);
  }

  // optional uint64 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchGetMaterialResp)
  return target;
}

int BatchGetMaterialResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 total_count = 4;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total_count());
    }

    // optional uint64 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_count());
    }

  }
  // repeated .mpcomm.MaterialItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetMaterialResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetMaterialResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetMaterialResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetMaterialResp::MergeFrom(const BatchGetMaterialResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetMaterialResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetMaterialResp::CopyFrom(const BatchGetMaterialResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetMaterialResp::IsInitialized() const {

  return true;
}

void BatchGetMaterialResp::Swap(BatchGetMaterialResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    item_.Swap(&other->item_);
    std::swap(total_count_, other->total_count_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetMaterialResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetMaterialResp_descriptor_;
  metadata.reflection = BatchGetMaterialResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tag::kIdFieldNumber;
const int Tag::kNameFieldNumber;
const int Tag::kCountFieldNumber;
#endif  // !_MSC_VER

Tag::Tag()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.Tag)
}

void Tag::InitAsDefaultInstance() {
}

Tag::Tag(const Tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.Tag)
}

void Tag::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tag::~Tag() {
  // @@protoc_insertion_point(destructor:mpcomm.Tag)
  SharedDtor();
}

void Tag::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tag_descriptor_;
}

const Tag& Tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

Tag* Tag::default_instance_ = NULL;

Tag* Tag::New() const {
  return new Tag;
}

void Tag::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint64 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.Tag)
  return false;
#undef DO_
}

void Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.Tag)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.Tag)
}

::google::protobuf::uint8* Tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.Tag)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.Tag)
  return target;
}

int Tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tag::MergeFrom(const Tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tag::CopyFrom(const Tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tag::IsInitialized() const {

  return true;
}

void Tag::Swap(Tag* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tag_descriptor_;
  metadata.reflection = Tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTagsReq::kAccessTokenFieldNumber;
const int CreateTagsReq::kTagFieldNumber;
#endif  // !_MSC_VER

CreateTagsReq::CreateTagsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CreateTagsReq)
}

void CreateTagsReq::InitAsDefaultInstance() {
  tag_ = const_cast< ::mpcomm::Tag*>(&::mpcomm::Tag::default_instance());
}

CreateTagsReq::CreateTagsReq(const CreateTagsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CreateTagsReq)
}

void CreateTagsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTagsReq::~CreateTagsReq() {
  // @@protoc_insertion_point(destructor:mpcomm.CreateTagsReq)
  SharedDtor();
}

void CreateTagsReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
    delete tag_;
  }
}

void CreateTagsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTagsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTagsReq_descriptor_;
}

const CreateTagsReq& CreateTagsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CreateTagsReq* CreateTagsReq::default_instance_ = NULL;

CreateTagsReq* CreateTagsReq::New() const {
  return new CreateTagsReq;
}

void CreateTagsReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != NULL) tag_->::mpcomm::Tag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTagsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CreateTagsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional .mpcomm.Tag tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CreateTagsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CreateTagsReq)
  return false;
#undef DO_
}

void CreateTagsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CreateTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional .mpcomm.Tag tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CreateTagsReq)
}

::google::protobuf::uint8* CreateTagsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CreateTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional .mpcomm.Tag tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CreateTagsReq)
  return target;
}

int CreateTagsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional .mpcomm.Tag tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTagsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTagsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTagsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTagsReq::MergeFrom(const CreateTagsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_tag()) {
      mutable_tag()->::mpcomm::Tag::MergeFrom(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTagsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTagsReq::CopyFrom(const CreateTagsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTagsReq::IsInitialized() const {

  return true;
}

void CreateTagsReq::Swap(CreateTagsReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTagsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTagsReq_descriptor_;
  metadata.reflection = CreateTagsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTagsResp::kErrcodeFieldNumber;
const int CreateTagsResp::kErrmsgFieldNumber;
const int CreateTagsResp::kTagFieldNumber;
#endif  // !_MSC_VER

CreateTagsResp::CreateTagsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.CreateTagsResp)
}

void CreateTagsResp::InitAsDefaultInstance() {
  tag_ = const_cast< ::mpcomm::Tag*>(&::mpcomm::Tag::default_instance());
}

CreateTagsResp::CreateTagsResp(const CreateTagsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.CreateTagsResp)
}

void CreateTagsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTagsResp::~CreateTagsResp() {
  // @@protoc_insertion_point(destructor:mpcomm.CreateTagsResp)
  SharedDtor();
}

void CreateTagsResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
    delete tag_;
  }
}

void CreateTagsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTagsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTagsResp_descriptor_;
}

const CreateTagsResp& CreateTagsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

CreateTagsResp* CreateTagsResp::default_instance_ = NULL;

CreateTagsResp* CreateTagsResp::New() const {
  return new CreateTagsResp;
}

void CreateTagsResp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != NULL) tag_->::mpcomm::Tag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTagsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.CreateTagsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional .mpcomm.Tag tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.CreateTagsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.CreateTagsResp)
  return false;
#undef DO_
}

void CreateTagsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.CreateTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional .mpcomm.Tag tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.CreateTagsResp)
}

::google::protobuf::uint8* CreateTagsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.CreateTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional .mpcomm.Tag tag = 3;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.CreateTagsResp)
  return target;
}

int CreateTagsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional .mpcomm.Tag tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTagsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTagsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTagsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTagsResp::MergeFrom(const CreateTagsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_tag()) {
      mutable_tag()->::mpcomm::Tag::MergeFrom(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTagsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTagsResp::CopyFrom(const CreateTagsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTagsResp::IsInitialized() const {

  return true;
}

void CreateTagsResp::Swap(CreateTagsResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTagsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTagsResp_descriptor_;
  metadata.reflection = CreateTagsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagsReq::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

GetTagsReq::GetTagsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetTagsReq)
}

void GetTagsReq::InitAsDefaultInstance() {
}

GetTagsReq::GetTagsReq(const GetTagsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetTagsReq)
}

void GetTagsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagsReq::~GetTagsReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetTagsReq)
  SharedDtor();
}

void GetTagsReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void GetTagsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagsReq_descriptor_;
}

const GetTagsReq& GetTagsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetTagsReq* GetTagsReq::default_instance_ = NULL;

GetTagsReq* GetTagsReq::New() const {
  return new GetTagsReq;
}

void GetTagsReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetTagsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetTagsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetTagsReq)
  return false;
#undef DO_
}

void GetTagsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetTagsReq)
}

::google::protobuf::uint8* GetTagsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetTagsReq)
  return target;
}

int GetTagsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagsReq::MergeFrom(const GetTagsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagsReq::CopyFrom(const GetTagsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagsReq::IsInitialized() const {

  return true;
}

void GetTagsReq::Swap(GetTagsReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagsReq_descriptor_;
  metadata.reflection = GetTagsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagsResp::kErrcodeFieldNumber;
const int GetTagsResp::kErrmsgFieldNumber;
const int GetTagsResp::kTagsFieldNumber;
#endif  // !_MSC_VER

GetTagsResp::GetTagsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetTagsResp)
}

void GetTagsResp::InitAsDefaultInstance() {
}

GetTagsResp::GetTagsResp(const GetTagsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetTagsResp)
}

void GetTagsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagsResp::~GetTagsResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetTagsResp)
  SharedDtor();
}

void GetTagsResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void GetTagsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagsResp_descriptor_;
}

const GetTagsResp& GetTagsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetTagsResp* GetTagsResp::default_instance_ = NULL;

GetTagsResp* GetTagsResp::New() const {
  return new GetTagsResp;
}

void GetTagsResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetTagsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        break;
      }

      // repeated .mpcomm.Tag tags = 3;
      case 3: {
        if (tag == 26) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetTagsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetTagsResp)
  return false;
#undef DO_
}

void GetTagsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated .mpcomm.Tag tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetTagsResp)
}

::google::protobuf::uint8* GetTagsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated .mpcomm.Tag tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetTagsResp)
  return target;
}

int GetTagsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .mpcomm.Tag tags = 3;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagsResp::MergeFrom(const GetTagsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagsResp::CopyFrom(const GetTagsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagsResp::IsInitialized() const {

  return true;
}

void GetTagsResp::Swap(GetTagsResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagsResp_descriptor_;
  metadata.reflection = GetTagsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTagsReq::kAccessTokenFieldNumber;
const int UpdateTagsReq::kTagFieldNumber;
#endif  // !_MSC_VER

UpdateTagsReq::UpdateTagsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateTagsReq)
}

void UpdateTagsReq::InitAsDefaultInstance() {
  tag_ = const_cast< ::mpcomm::Tag*>(&::mpcomm::Tag::default_instance());
}

UpdateTagsReq::UpdateTagsReq(const UpdateTagsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateTagsReq)
}

void UpdateTagsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTagsReq::~UpdateTagsReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateTagsReq)
  SharedDtor();
}

void UpdateTagsReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
    delete tag_;
  }
}

void UpdateTagsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTagsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTagsReq_descriptor_;
}

const UpdateTagsReq& UpdateTagsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateTagsReq* UpdateTagsReq::default_instance_ = NULL;

UpdateTagsReq* UpdateTagsReq::New() const {
  return new UpdateTagsReq;
}

void UpdateTagsReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != NULL) tag_->::mpcomm::Tag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTagsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateTagsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional .mpcomm.Tag tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateTagsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateTagsReq)
  return false;
#undef DO_
}

void UpdateTagsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional .mpcomm.Tag tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateTagsReq)
}

::google::protobuf::uint8* UpdateTagsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional .mpcomm.Tag tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateTagsReq)
  return target;
}

int UpdateTagsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional .mpcomm.Tag tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTagsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTagsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTagsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTagsReq::MergeFrom(const UpdateTagsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_tag()) {
      mutable_tag()->::mpcomm::Tag::MergeFrom(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTagsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagsReq::CopyFrom(const UpdateTagsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagsReq::IsInitialized() const {

  return true;
}

void UpdateTagsReq::Swap(UpdateTagsReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTagsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTagsReq_descriptor_;
  metadata.reflection = UpdateTagsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTagsResp::kErrcodeFieldNumber;
const int UpdateTagsResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

UpdateTagsResp::UpdateTagsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateTagsResp)
}

void UpdateTagsResp::InitAsDefaultInstance() {
}

UpdateTagsResp::UpdateTagsResp(const UpdateTagsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateTagsResp)
}

void UpdateTagsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTagsResp::~UpdateTagsResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateTagsResp)
  SharedDtor();
}

void UpdateTagsResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void UpdateTagsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTagsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTagsResp_descriptor_;
}

const UpdateTagsResp& UpdateTagsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateTagsResp* UpdateTagsResp::default_instance_ = NULL;

UpdateTagsResp* UpdateTagsResp::New() const {
  return new UpdateTagsResp;
}

void UpdateTagsResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTagsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateTagsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateTagsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateTagsResp)
  return false;
#undef DO_
}

void UpdateTagsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateTagsResp)
}

::google::protobuf::uint8* UpdateTagsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateTagsResp)
  return target;
}

int UpdateTagsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTagsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTagsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTagsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTagsResp::MergeFrom(const UpdateTagsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTagsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagsResp::CopyFrom(const UpdateTagsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagsResp::IsInitialized() const {

  return true;
}

void UpdateTagsResp::Swap(UpdateTagsResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTagsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTagsResp_descriptor_;
  metadata.reflection = UpdateTagsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTagsMembersReq::kAccessTokenFieldNumber;
const int UpdateTagsMembersReq::kOpenidFieldNumber;
const int UpdateTagsMembersReq::kToTagidFieldNumber;
#endif  // !_MSC_VER

UpdateTagsMembersReq::UpdateTagsMembersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateTagsMembersReq)
}

void UpdateTagsMembersReq::InitAsDefaultInstance() {
}

UpdateTagsMembersReq::UpdateTagsMembersReq(const UpdateTagsMembersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateTagsMembersReq)
}

void UpdateTagsMembersReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_tagid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTagsMembersReq::~UpdateTagsMembersReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateTagsMembersReq)
  SharedDtor();
}

void UpdateTagsMembersReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (to_tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_tagid_;
  }
  if (this != default_instance_) {
  }
}

void UpdateTagsMembersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTagsMembersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTagsMembersReq_descriptor_;
}

const UpdateTagsMembersReq& UpdateTagsMembersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateTagsMembersReq* UpdateTagsMembersReq::default_instance_ = NULL;

UpdateTagsMembersReq* UpdateTagsMembersReq::New() const {
  return new UpdateTagsMembersReq;
}

void UpdateTagsMembersReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_to_tagid()) {
      if (to_tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_tagid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTagsMembersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateTagsMembersReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_tagid;
        break;
      }

      // optional string to_tagid = 3;
      case 3: {
        if (tag == 26) {
         parse_to_tagid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_tagid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_tagid().data(), this->to_tagid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_tagid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateTagsMembersReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateTagsMembersReq)
  return false;
#undef DO_
}

void UpdateTagsMembersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateTagsMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // optional string to_tagid = 3;
  if (has_to_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_tagid().data(), this->to_tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_tagid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_tagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateTagsMembersReq)
}

::google::protobuf::uint8* UpdateTagsMembersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateTagsMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional string to_tagid = 3;
  if (has_to_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_tagid().data(), this->to_tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_tagid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_tagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateTagsMembersReq)
  return target;
}

int UpdateTagsMembersReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string to_tagid = 3;
    if (has_to_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_tagid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTagsMembersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTagsMembersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTagsMembersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTagsMembersReq::MergeFrom(const UpdateTagsMembersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_to_tagid()) {
      set_to_tagid(from.to_tagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTagsMembersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagsMembersReq::CopyFrom(const UpdateTagsMembersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagsMembersReq::IsInitialized() const {

  return true;
}

void UpdateTagsMembersReq::Swap(UpdateTagsMembersReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(openid_, other->openid_);
    std::swap(to_tagid_, other->to_tagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTagsMembersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTagsMembersReq_descriptor_;
  metadata.reflection = UpdateTagsMembersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTagsMembersResp::kErrcodeFieldNumber;
const int UpdateTagsMembersResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

UpdateTagsMembersResp::UpdateTagsMembersResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateTagsMembersResp)
}

void UpdateTagsMembersResp::InitAsDefaultInstance() {
}

UpdateTagsMembersResp::UpdateTagsMembersResp(const UpdateTagsMembersResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateTagsMembersResp)
}

void UpdateTagsMembersResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTagsMembersResp::~UpdateTagsMembersResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateTagsMembersResp)
  SharedDtor();
}

void UpdateTagsMembersResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void UpdateTagsMembersResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTagsMembersResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTagsMembersResp_descriptor_;
}

const UpdateTagsMembersResp& UpdateTagsMembersResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateTagsMembersResp* UpdateTagsMembersResp::default_instance_ = NULL;

UpdateTagsMembersResp* UpdateTagsMembersResp::New() const {
  return new UpdateTagsMembersResp;
}

void UpdateTagsMembersResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTagsMembersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateTagsMembersResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateTagsMembersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateTagsMembersResp)
  return false;
#undef DO_
}

void UpdateTagsMembersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateTagsMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateTagsMembersResp)
}

::google::protobuf::uint8* UpdateTagsMembersResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateTagsMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateTagsMembersResp)
  return target;
}

int UpdateTagsMembersResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTagsMembersResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTagsMembersResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTagsMembersResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTagsMembersResp::MergeFrom(const UpdateTagsMembersResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTagsMembersResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTagsMembersResp::CopyFrom(const UpdateTagsMembersResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTagsMembersResp::IsInitialized() const {

  return true;
}

void UpdateTagsMembersResp::Swap(UpdateTagsMembersResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTagsMembersResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTagsMembersResp_descriptor_;
  metadata.reflection = UpdateTagsMembersResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchUpdateTagsMembersReq::kAccessTokenFieldNumber;
const int BatchUpdateTagsMembersReq::kOpenidListFieldNumber;
const int BatchUpdateTagsMembersReq::kToTagidFieldNumber;
#endif  // !_MSC_VER

BatchUpdateTagsMembersReq::BatchUpdateTagsMembersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchUpdateTagsMembersReq)
}

void BatchUpdateTagsMembersReq::InitAsDefaultInstance() {
}

BatchUpdateTagsMembersReq::BatchUpdateTagsMembersReq(const BatchUpdateTagsMembersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchUpdateTagsMembersReq)
}

void BatchUpdateTagsMembersReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_tagid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchUpdateTagsMembersReq::~BatchUpdateTagsMembersReq() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchUpdateTagsMembersReq)
  SharedDtor();
}

void BatchUpdateTagsMembersReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (to_tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete to_tagid_;
  }
  if (this != default_instance_) {
  }
}

void BatchUpdateTagsMembersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchUpdateTagsMembersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchUpdateTagsMembersReq_descriptor_;
}

const BatchUpdateTagsMembersReq& BatchUpdateTagsMembersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchUpdateTagsMembersReq* BatchUpdateTagsMembersReq::default_instance_ = NULL;

BatchUpdateTagsMembersReq* BatchUpdateTagsMembersReq::New() const {
  return new BatchUpdateTagsMembersReq;
}

void BatchUpdateTagsMembersReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_to_tagid()) {
      if (to_tagid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        to_tagid_->clear();
      }
    }
  }
  openid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchUpdateTagsMembersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchUpdateTagsMembersReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_list;
        break;
      }

      // repeated string openid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_openid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_list(this->openid_list_size() - 1).data(),
            this->openid_list(this->openid_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_list;
        if (input->ExpectTag(26)) goto parse_to_tagid;
        break;
      }

      // optional string to_tagid = 3;
      case 3: {
        if (tag == 26) {
         parse_to_tagid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_tagid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_tagid().data(), this->to_tagid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "to_tagid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchUpdateTagsMembersReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchUpdateTagsMembersReq)
  return false;
#undef DO_
}

void BatchUpdateTagsMembersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchUpdateTagsMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated string openid_list = 2;
  for (int i = 0; i < this->openid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid_list(i).data(), this->openid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "openid_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid_list(i), output);
  }

  // optional string to_tagid = 3;
  if (has_to_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_tagid().data(), this->to_tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_tagid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_tagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchUpdateTagsMembersReq)
}

::google::protobuf::uint8* BatchUpdateTagsMembersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchUpdateTagsMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated string openid_list = 2;
  for (int i = 0; i < this->openid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_list(i).data(), this->openid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->openid_list(i), target);
  }

  // optional string to_tagid = 3;
  if (has_to_tagid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_tagid().data(), this->to_tagid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "to_tagid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_tagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchUpdateTagsMembersReq)
  return target;
}

int BatchUpdateTagsMembersReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string to_tagid = 3;
    if (has_to_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_tagid());
    }

  }
  // repeated string openid_list = 2;
  total_size += 1 * this->openid_list_size();
  for (int i = 0; i < this->openid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchUpdateTagsMembersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchUpdateTagsMembersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchUpdateTagsMembersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchUpdateTagsMembersReq::MergeFrom(const BatchUpdateTagsMembersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  openid_list_.MergeFrom(from.openid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_to_tagid()) {
      set_to_tagid(from.to_tagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchUpdateTagsMembersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUpdateTagsMembersReq::CopyFrom(const BatchUpdateTagsMembersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUpdateTagsMembersReq::IsInitialized() const {

  return true;
}

void BatchUpdateTagsMembersReq::Swap(BatchUpdateTagsMembersReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    openid_list_.Swap(&other->openid_list_);
    std::swap(to_tagid_, other->to_tagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchUpdateTagsMembersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchUpdateTagsMembersReq_descriptor_;
  metadata.reflection = BatchUpdateTagsMembersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchUpdateTagsMembersResp::kErrcodeFieldNumber;
const int BatchUpdateTagsMembersResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

BatchUpdateTagsMembersResp::BatchUpdateTagsMembersResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchUpdateTagsMembersResp)
}

void BatchUpdateTagsMembersResp::InitAsDefaultInstance() {
}

BatchUpdateTagsMembersResp::BatchUpdateTagsMembersResp(const BatchUpdateTagsMembersResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchUpdateTagsMembersResp)
}

void BatchUpdateTagsMembersResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchUpdateTagsMembersResp::~BatchUpdateTagsMembersResp() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchUpdateTagsMembersResp)
  SharedDtor();
}

void BatchUpdateTagsMembersResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void BatchUpdateTagsMembersResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchUpdateTagsMembersResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchUpdateTagsMembersResp_descriptor_;
}

const BatchUpdateTagsMembersResp& BatchUpdateTagsMembersResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchUpdateTagsMembersResp* BatchUpdateTagsMembersResp::default_instance_ = NULL;

BatchUpdateTagsMembersResp* BatchUpdateTagsMembersResp::New() const {
  return new BatchUpdateTagsMembersResp;
}

void BatchUpdateTagsMembersResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchUpdateTagsMembersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchUpdateTagsMembersResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchUpdateTagsMembersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchUpdateTagsMembersResp)
  return false;
#undef DO_
}

void BatchUpdateTagsMembersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchUpdateTagsMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchUpdateTagsMembersResp)
}

::google::protobuf::uint8* BatchUpdateTagsMembersResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchUpdateTagsMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchUpdateTagsMembersResp)
  return target;
}

int BatchUpdateTagsMembersResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchUpdateTagsMembersResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchUpdateTagsMembersResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchUpdateTagsMembersResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchUpdateTagsMembersResp::MergeFrom(const BatchUpdateTagsMembersResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchUpdateTagsMembersResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUpdateTagsMembersResp::CopyFrom(const BatchUpdateTagsMembersResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUpdateTagsMembersResp::IsInitialized() const {

  return true;
}

void BatchUpdateTagsMembersResp::Swap(BatchUpdateTagsMembersResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchUpdateTagsMembersResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchUpdateTagsMembersResp_descriptor_;
  metadata.reflection = BatchUpdateTagsMembersResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTagsReq::kAccessTokenFieldNumber;
const int DeleteTagsReq::kTagFieldNumber;
#endif  // !_MSC_VER

DeleteTagsReq::DeleteTagsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DeleteTagsReq)
}

void DeleteTagsReq::InitAsDefaultInstance() {
  tag_ = const_cast< ::mpcomm::Tag*>(&::mpcomm::Tag::default_instance());
}

DeleteTagsReq::DeleteTagsReq(const DeleteTagsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DeleteTagsReq)
}

void DeleteTagsReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTagsReq::~DeleteTagsReq() {
  // @@protoc_insertion_point(destructor:mpcomm.DeleteTagsReq)
  SharedDtor();
}

void DeleteTagsReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
    delete tag_;
  }
}

void DeleteTagsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTagsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTagsReq_descriptor_;
}

const DeleteTagsReq& DeleteTagsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DeleteTagsReq* DeleteTagsReq::default_instance_ = NULL;

DeleteTagsReq* DeleteTagsReq::New() const {
  return new DeleteTagsReq;
}

void DeleteTagsReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != NULL) tag_->::mpcomm::Tag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTagsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DeleteTagsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional .mpcomm.Tag tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DeleteTagsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DeleteTagsReq)
  return false;
#undef DO_
}

void DeleteTagsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DeleteTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional .mpcomm.Tag tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DeleteTagsReq)
}

::google::protobuf::uint8* DeleteTagsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DeleteTagsReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional .mpcomm.Tag tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DeleteTagsReq)
  return target;
}

int DeleteTagsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional .mpcomm.Tag tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTagsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTagsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTagsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTagsReq::MergeFrom(const DeleteTagsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_tag()) {
      mutable_tag()->::mpcomm::Tag::MergeFrom(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTagsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTagsReq::CopyFrom(const DeleteTagsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTagsReq::IsInitialized() const {

  return true;
}

void DeleteTagsReq::Swap(DeleteTagsReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTagsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTagsReq_descriptor_;
  metadata.reflection = DeleteTagsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteTagsResp::kErrcodeFieldNumber;
const int DeleteTagsResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

DeleteTagsResp::DeleteTagsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.DeleteTagsResp)
}

void DeleteTagsResp::InitAsDefaultInstance() {
}

DeleteTagsResp::DeleteTagsResp(const DeleteTagsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.DeleteTagsResp)
}

void DeleteTagsResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteTagsResp::~DeleteTagsResp() {
  // @@protoc_insertion_point(destructor:mpcomm.DeleteTagsResp)
  SharedDtor();
}

void DeleteTagsResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void DeleteTagsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTagsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteTagsResp_descriptor_;
}

const DeleteTagsResp& DeleteTagsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

DeleteTagsResp* DeleteTagsResp::default_instance_ = NULL;

DeleteTagsResp* DeleteTagsResp::New() const {
  return new DeleteTagsResp;
}

void DeleteTagsResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteTagsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.DeleteTagsResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.DeleteTagsResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.DeleteTagsResp)
  return false;
#undef DO_
}

void DeleteTagsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.DeleteTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.DeleteTagsResp)
}

::google::protobuf::uint8* DeleteTagsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.DeleteTagsResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.DeleteTagsResp)
  return target;
}

int DeleteTagsResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTagsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteTagsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteTagsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteTagsResp::MergeFrom(const DeleteTagsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteTagsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTagsResp::CopyFrom(const DeleteTagsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTagsResp::IsInitialized() const {

  return true;
}

void DeleteTagsResp::Swap(DeleteTagsResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteTagsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteTagsResp_descriptor_;
  metadata.reflection = DeleteTagsResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TagUserData::kOpenidFieldNumber;
#endif  // !_MSC_VER

TagUserData::TagUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.TagUserData)
}

void TagUserData::InitAsDefaultInstance() {
}

TagUserData::TagUserData(const TagUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.TagUserData)
}

void TagUserData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagUserData::~TagUserData() {
  // @@protoc_insertion_point(destructor:mpcomm.TagUserData)
  SharedDtor();
}

void TagUserData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TagUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TagUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TagUserData_descriptor_;
}

const TagUserData& TagUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

TagUserData* TagUserData::default_instance_ = NULL;

TagUserData* TagUserData::New() const {
  return new TagUserData;
}

void TagUserData::Clear() {
  openid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TagUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.TagUserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string openid = 1;
      case 1: {
        if (tag == 10) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid(this->openid_size() - 1).data(),
            this->openid(this->openid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_openid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.TagUserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.TagUserData)
  return false;
#undef DO_
}

void TagUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.TagUserData)
  // repeated string openid = 1;
  for (int i = 0; i < this->openid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid(i).data(), this->openid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "openid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.TagUserData)
}

::google::protobuf::uint8* TagUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.TagUserData)
  // repeated string openid = 1;
  for (int i = 0; i < this->openid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid(i).data(), this->openid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->openid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.TagUserData)
  return target;
}

int TagUserData::ByteSize() const {
  int total_size = 0;

  // repeated string openid = 1;
  total_size += 1 * this->openid_size();
  for (int i = 0; i < this->openid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TagUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TagUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TagUserData::MergeFrom(const TagUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  openid_.MergeFrom(from.openid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TagUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagUserData::CopyFrom(const TagUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagUserData::IsInitialized() const {

  return true;
}

void TagUserData::Swap(TagUserData* other) {
  if (other != this) {
    openid_.Swap(&other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TagUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TagUserData_descriptor_;
  metadata.reflection = TagUserData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagUserReq::kAccessTokenFieldNumber;
const int GetTagUserReq::kTagidFieldNumber;
const int GetTagUserReq::kNextOpenidFieldNumber;
#endif  // !_MSC_VER

GetTagUserReq::GetTagUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetTagUserReq)
}

void GetTagUserReq::InitAsDefaultInstance() {
}

GetTagUserReq::GetTagUserReq(const GetTagUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetTagUserReq)
}

void GetTagUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_ = GOOGLE_ULONGLONG(0);
  next_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagUserReq::~GetTagUserReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetTagUserReq)
  SharedDtor();
}

void GetTagUserReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete next_openid_;
  }
  if (this != default_instance_) {
  }
}

void GetTagUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagUserReq_descriptor_;
}

const GetTagUserReq& GetTagUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetTagUserReq* GetTagUserReq::default_instance_ = NULL;

GetTagUserReq* GetTagUserReq::New() const {
  return new GetTagUserReq;
}

void GetTagUserReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    tagid_ = GOOGLE_ULONGLONG(0);
    if (has_next_openid()) {
      if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        next_openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetTagUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tagid;
        break;
      }

      // optional uint64 tagid = 2;
      case 2: {
        if (tag == 16) {
         parse_tagid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tagid_)));
          set_has_tagid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_next_openid;
        break;
      }

      // optional string next_openid = 3;
      case 3: {
        if (tag == 26) {
         parse_next_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next_openid().data(), this->next_openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "next_openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetTagUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetTagUserReq)
  return false;
#undef DO_
}

void GetTagUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetTagUserReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional uint64 tagid = 2;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tagid(), output);
  }

  // optional string next_openid = 3;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->next_openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetTagUserReq)
}

::google::protobuf::uint8* GetTagUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetTagUserReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional uint64 tagid = 2;
  if (has_tagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tagid(), target);
  }

  // optional string next_openid = 3;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->next_openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetTagUserReq)
  return target;
}

int GetTagUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 tagid = 2;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tagid());
    }

    // optional string next_openid = 3;
    if (has_next_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagUserReq::MergeFrom(const GetTagUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_tagid()) {
      set_tagid(from.tagid());
    }
    if (from.has_next_openid()) {
      set_next_openid(from.next_openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagUserReq::CopyFrom(const GetTagUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagUserReq::IsInitialized() const {

  return true;
}

void GetTagUserReq::Swap(GetTagUserReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(tagid_, other->tagid_);
    std::swap(next_openid_, other->next_openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagUserReq_descriptor_;
  metadata.reflection = GetTagUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagUserResp::kErrcodeFieldNumber;
const int GetTagUserResp::kErrmsgFieldNumber;
const int GetTagUserResp::kCountFieldNumber;
const int GetTagUserResp::kDataFieldNumber;
const int GetTagUserResp::kNextOpenidFieldNumber;
#endif  // !_MSC_VER

GetTagUserResp::GetTagUserResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetTagUserResp)
}

void GetTagUserResp::InitAsDefaultInstance() {
  data_ = const_cast< ::mpcomm::TagUserData*>(&::mpcomm::TagUserData::default_instance());
}

GetTagUserResp::GetTagUserResp(const GetTagUserResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetTagUserResp)
}

void GetTagUserResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  next_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagUserResp::~GetTagUserResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetTagUserResp)
  SharedDtor();
}

void GetTagUserResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete next_openid_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void GetTagUserResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagUserResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagUserResp_descriptor_;
}

const GetTagUserResp& GetTagUserResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetTagUserResp* GetTagUserResp::default_instance_ = NULL;

GetTagUserResp* GetTagUserResp::New() const {
  return new GetTagUserResp;
}

void GetTagUserResp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    count_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::mpcomm::TagUserData::Clear();
    }
    if (has_next_openid()) {
      if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        next_openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagUserResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetTagUserResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint64 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .mpcomm.TagUserData data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_next_openid;
        break;
      }

      // optional string next_openid = 5;
      case 5: {
        if (tag == 42) {
         parse_next_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next_openid().data(), this->next_openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "next_openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetTagUserResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetTagUserResp)
  return false;
#undef DO_
}

void GetTagUserResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetTagUserResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  // optional .mpcomm.TagUserData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional string next_openid = 5;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->next_openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetTagUserResp)
}

::google::protobuf::uint8* GetTagUserResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetTagUserResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  // optional .mpcomm.TagUserData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional string next_openid = 5;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->next_openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetTagUserResp)
  return target;
}

int GetTagUserResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

    // optional .mpcomm.TagUserData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional string next_openid = 5;
    if (has_next_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagUserResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagUserResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagUserResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagUserResp::MergeFrom(const GetTagUserResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_data()) {
      mutable_data()->::mpcomm::TagUserData::MergeFrom(from.data());
    }
    if (from.has_next_openid()) {
      set_next_openid(from.next_openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagUserResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagUserResp::CopyFrom(const GetTagUserResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagUserResp::IsInitialized() const {

  return true;
}

void GetTagUserResp::Swap(GetTagUserResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(count_, other->count_);
    std::swap(data_, other->data_);
    std::swap(next_openid_, other->next_openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagUserResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagUserResp_descriptor_;
  metadata.reflection = GetTagUserResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchTaggingMembersReq::kAccessTokenFieldNumber;
const int BatchTaggingMembersReq::kOpenidListFieldNumber;
const int BatchTaggingMembersReq::kTagidFieldNumber;
#endif  // !_MSC_VER

BatchTaggingMembersReq::BatchTaggingMembersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchTaggingMembersReq)
}

void BatchTaggingMembersReq::InitAsDefaultInstance() {
}

BatchTaggingMembersReq::BatchTaggingMembersReq(const BatchTaggingMembersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchTaggingMembersReq)
}

void BatchTaggingMembersReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchTaggingMembersReq::~BatchTaggingMembersReq() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchTaggingMembersReq)
  SharedDtor();
}

void BatchTaggingMembersReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void BatchTaggingMembersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchTaggingMembersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchTaggingMembersReq_descriptor_;
}

const BatchTaggingMembersReq& BatchTaggingMembersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchTaggingMembersReq* BatchTaggingMembersReq::default_instance_ = NULL;

BatchTaggingMembersReq* BatchTaggingMembersReq::New() const {
  return new BatchTaggingMembersReq;
}

void BatchTaggingMembersReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    tagid_ = GOOGLE_ULONGLONG(0);
  }
  openid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchTaggingMembersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchTaggingMembersReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_list;
        break;
      }

      // repeated string openid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_openid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_list(this->openid_list_size() - 1).data(),
            this->openid_list(this->openid_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_list;
        if (input->ExpectTag(24)) goto parse_tagid;
        break;
      }

      // optional uint64 tagid = 3;
      case 3: {
        if (tag == 24) {
         parse_tagid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tagid_)));
          set_has_tagid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchTaggingMembersReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchTaggingMembersReq)
  return false;
#undef DO_
}

void BatchTaggingMembersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchTaggingMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated string openid_list = 2;
  for (int i = 0; i < this->openid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid_list(i).data(), this->openid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "openid_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid_list(i), output);
  }

  // optional uint64 tagid = 3;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchTaggingMembersReq)
}

::google::protobuf::uint8* BatchTaggingMembersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchTaggingMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated string openid_list = 2;
  for (int i = 0; i < this->openid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_list(i).data(), this->openid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->openid_list(i), target);
  }

  // optional uint64 tagid = 3;
  if (has_tagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchTaggingMembersReq)
  return target;
}

int BatchTaggingMembersReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 tagid = 3;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tagid());
    }

  }
  // repeated string openid_list = 2;
  total_size += 1 * this->openid_list_size();
  for (int i = 0; i < this->openid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchTaggingMembersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchTaggingMembersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchTaggingMembersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchTaggingMembersReq::MergeFrom(const BatchTaggingMembersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  openid_list_.MergeFrom(from.openid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_tagid()) {
      set_tagid(from.tagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchTaggingMembersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTaggingMembersReq::CopyFrom(const BatchTaggingMembersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTaggingMembersReq::IsInitialized() const {

  return true;
}

void BatchTaggingMembersReq::Swap(BatchTaggingMembersReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    openid_list_.Swap(&other->openid_list_);
    std::swap(tagid_, other->tagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchTaggingMembersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchTaggingMembersReq_descriptor_;
  metadata.reflection = BatchTaggingMembersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchTaggingMembersResp::kErrcodeFieldNumber;
const int BatchTaggingMembersResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

BatchTaggingMembersResp::BatchTaggingMembersResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchTaggingMembersResp)
}

void BatchTaggingMembersResp::InitAsDefaultInstance() {
}

BatchTaggingMembersResp::BatchTaggingMembersResp(const BatchTaggingMembersResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchTaggingMembersResp)
}

void BatchTaggingMembersResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchTaggingMembersResp::~BatchTaggingMembersResp() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchTaggingMembersResp)
  SharedDtor();
}

void BatchTaggingMembersResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void BatchTaggingMembersResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchTaggingMembersResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchTaggingMembersResp_descriptor_;
}

const BatchTaggingMembersResp& BatchTaggingMembersResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchTaggingMembersResp* BatchTaggingMembersResp::default_instance_ = NULL;

BatchTaggingMembersResp* BatchTaggingMembersResp::New() const {
  return new BatchTaggingMembersResp;
}

void BatchTaggingMembersResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchTaggingMembersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchTaggingMembersResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchTaggingMembersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchTaggingMembersResp)
  return false;
#undef DO_
}

void BatchTaggingMembersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchTaggingMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchTaggingMembersResp)
}

::google::protobuf::uint8* BatchTaggingMembersResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchTaggingMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchTaggingMembersResp)
  return target;
}

int BatchTaggingMembersResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchTaggingMembersResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchTaggingMembersResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchTaggingMembersResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchTaggingMembersResp::MergeFrom(const BatchTaggingMembersResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchTaggingMembersResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchTaggingMembersResp::CopyFrom(const BatchTaggingMembersResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchTaggingMembersResp::IsInitialized() const {

  return true;
}

void BatchTaggingMembersResp::Swap(BatchTaggingMembersResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchTaggingMembersResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchTaggingMembersResp_descriptor_;
  metadata.reflection = BatchTaggingMembersResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchUnTaggingMembersReq::kAccessTokenFieldNumber;
const int BatchUnTaggingMembersReq::kOpenidListFieldNumber;
const int BatchUnTaggingMembersReq::kTagidFieldNumber;
#endif  // !_MSC_VER

BatchUnTaggingMembersReq::BatchUnTaggingMembersReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchUnTaggingMembersReq)
}

void BatchUnTaggingMembersReq::InitAsDefaultInstance() {
}

BatchUnTaggingMembersReq::BatchUnTaggingMembersReq(const BatchUnTaggingMembersReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchUnTaggingMembersReq)
}

void BatchUnTaggingMembersReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tagid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchUnTaggingMembersReq::~BatchUnTaggingMembersReq() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchUnTaggingMembersReq)
  SharedDtor();
}

void BatchUnTaggingMembersReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void BatchUnTaggingMembersReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchUnTaggingMembersReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchUnTaggingMembersReq_descriptor_;
}

const BatchUnTaggingMembersReq& BatchUnTaggingMembersReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchUnTaggingMembersReq* BatchUnTaggingMembersReq::default_instance_ = NULL;

BatchUnTaggingMembersReq* BatchUnTaggingMembersReq::New() const {
  return new BatchUnTaggingMembersReq;
}

void BatchUnTaggingMembersReq::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    tagid_ = GOOGLE_ULONGLONG(0);
  }
  openid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchUnTaggingMembersReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchUnTaggingMembersReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_list;
        break;
      }

      // repeated string openid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_openid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid_list(this->openid_list_size() - 1).data(),
            this->openid_list(this->openid_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid_list;
        if (input->ExpectTag(24)) goto parse_tagid;
        break;
      }

      // optional uint64 tagid = 3;
      case 3: {
        if (tag == 24) {
         parse_tagid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tagid_)));
          set_has_tagid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchUnTaggingMembersReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchUnTaggingMembersReq)
  return false;
#undef DO_
}

void BatchUnTaggingMembersReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchUnTaggingMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated string openid_list = 2;
  for (int i = 0; i < this->openid_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid_list(i).data(), this->openid_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "openid_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid_list(i), output);
  }

  // optional uint64 tagid = 3;
  if (has_tagid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tagid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchUnTaggingMembersReq)
}

::google::protobuf::uint8* BatchUnTaggingMembersReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchUnTaggingMembersReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated string openid_list = 2;
  for (int i = 0; i < this->openid_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid_list(i).data(), this->openid_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->openid_list(i), target);
  }

  // optional uint64 tagid = 3;
  if (has_tagid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tagid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchUnTaggingMembersReq)
  return target;
}

int BatchUnTaggingMembersReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional uint64 tagid = 3;
    if (has_tagid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tagid());
    }

  }
  // repeated string openid_list = 2;
  total_size += 1 * this->openid_list_size();
  for (int i = 0; i < this->openid_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchUnTaggingMembersReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchUnTaggingMembersReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchUnTaggingMembersReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchUnTaggingMembersReq::MergeFrom(const BatchUnTaggingMembersReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  openid_list_.MergeFrom(from.openid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_tagid()) {
      set_tagid(from.tagid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchUnTaggingMembersReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUnTaggingMembersReq::CopyFrom(const BatchUnTaggingMembersReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUnTaggingMembersReq::IsInitialized() const {

  return true;
}

void BatchUnTaggingMembersReq::Swap(BatchUnTaggingMembersReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    openid_list_.Swap(&other->openid_list_);
    std::swap(tagid_, other->tagid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchUnTaggingMembersReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchUnTaggingMembersReq_descriptor_;
  metadata.reflection = BatchUnTaggingMembersReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchUnTaggingMembersResp::kErrcodeFieldNumber;
const int BatchUnTaggingMembersResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

BatchUnTaggingMembersResp::BatchUnTaggingMembersResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchUnTaggingMembersResp)
}

void BatchUnTaggingMembersResp::InitAsDefaultInstance() {
}

BatchUnTaggingMembersResp::BatchUnTaggingMembersResp(const BatchUnTaggingMembersResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchUnTaggingMembersResp)
}

void BatchUnTaggingMembersResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchUnTaggingMembersResp::~BatchUnTaggingMembersResp() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchUnTaggingMembersResp)
  SharedDtor();
}

void BatchUnTaggingMembersResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void BatchUnTaggingMembersResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchUnTaggingMembersResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchUnTaggingMembersResp_descriptor_;
}

const BatchUnTaggingMembersResp& BatchUnTaggingMembersResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchUnTaggingMembersResp* BatchUnTaggingMembersResp::default_instance_ = NULL;

BatchUnTaggingMembersResp* BatchUnTaggingMembersResp::New() const {
  return new BatchUnTaggingMembersResp;
}

void BatchUnTaggingMembersResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchUnTaggingMembersResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchUnTaggingMembersResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchUnTaggingMembersResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchUnTaggingMembersResp)
  return false;
#undef DO_
}

void BatchUnTaggingMembersResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchUnTaggingMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchUnTaggingMembersResp)
}

::google::protobuf::uint8* BatchUnTaggingMembersResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchUnTaggingMembersResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchUnTaggingMembersResp)
  return target;
}

int BatchUnTaggingMembersResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchUnTaggingMembersResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchUnTaggingMembersResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchUnTaggingMembersResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchUnTaggingMembersResp::MergeFrom(const BatchUnTaggingMembersResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchUnTaggingMembersResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchUnTaggingMembersResp::CopyFrom(const BatchUnTaggingMembersResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchUnTaggingMembersResp::IsInitialized() const {

  return true;
}

void BatchUnTaggingMembersResp::Swap(BatchUnTaggingMembersResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchUnTaggingMembersResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchUnTaggingMembersResp_descriptor_;
  metadata.reflection = BatchUnTaggingMembersResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagsIdListReq::kAccessTokenFieldNumber;
const int GetTagsIdListReq::kOpenidFieldNumber;
#endif  // !_MSC_VER

GetTagsIdListReq::GetTagsIdListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetTagsIdListReq)
}

void GetTagsIdListReq::InitAsDefaultInstance() {
}

GetTagsIdListReq::GetTagsIdListReq(const GetTagsIdListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetTagsIdListReq)
}

void GetTagsIdListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagsIdListReq::~GetTagsIdListReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetTagsIdListReq)
  SharedDtor();
}

void GetTagsIdListReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void GetTagsIdListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagsIdListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagsIdListReq_descriptor_;
}

const GetTagsIdListReq& GetTagsIdListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetTagsIdListReq* GetTagsIdListReq::default_instance_ = NULL;

GetTagsIdListReq* GetTagsIdListReq::New() const {
  return new GetTagsIdListReq;
}

void GetTagsIdListReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagsIdListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetTagsIdListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetTagsIdListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetTagsIdListReq)
  return false;
#undef DO_
}

void GetTagsIdListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetTagsIdListReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetTagsIdListReq)
}

::google::protobuf::uint8* GetTagsIdListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetTagsIdListReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetTagsIdListReq)
  return target;
}

int GetTagsIdListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagsIdListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagsIdListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagsIdListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagsIdListReq::MergeFrom(const GetTagsIdListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagsIdListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagsIdListReq::CopyFrom(const GetTagsIdListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagsIdListReq::IsInitialized() const {

  return true;
}

void GetTagsIdListReq::Swap(GetTagsIdListReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagsIdListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagsIdListReq_descriptor_;
  metadata.reflection = GetTagsIdListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTagsIdListResp::kErrcodeFieldNumber;
const int GetTagsIdListResp::kErrmsgFieldNumber;
const int GetTagsIdListResp::kTagidListFieldNumber;
#endif  // !_MSC_VER

GetTagsIdListResp::GetTagsIdListResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetTagsIdListResp)
}

void GetTagsIdListResp::InitAsDefaultInstance() {
}

GetTagsIdListResp::GetTagsIdListResp(const GetTagsIdListResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetTagsIdListResp)
}

void GetTagsIdListResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTagsIdListResp::~GetTagsIdListResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetTagsIdListResp)
  SharedDtor();
}

void GetTagsIdListResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void GetTagsIdListResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTagsIdListResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTagsIdListResp_descriptor_;
}

const GetTagsIdListResp& GetTagsIdListResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetTagsIdListResp* GetTagsIdListResp::default_instance_ = NULL;

GetTagsIdListResp* GetTagsIdListResp::New() const {
  return new GetTagsIdListResp;
}

void GetTagsIdListResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  tagid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTagsIdListResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetTagsIdListResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tagid_list;
        break;
      }

      // repeated uint64 tagid_list = 3;
      case 3: {
        if (tag == 24) {
         parse_tagid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_tagid_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tagid_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tagid_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetTagsIdListResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetTagsIdListResp)
  return false;
#undef DO_
}

void GetTagsIdListResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetTagsIdListResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated uint64 tagid_list = 3;
  for (int i = 0; i < this->tagid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->tagid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetTagsIdListResp)
}

::google::protobuf::uint8* GetTagsIdListResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetTagsIdListResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated uint64 tagid_list = 3;
  for (int i = 0; i < this->tagid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->tagid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetTagsIdListResp)
  return target;
}

int GetTagsIdListResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated uint64 tagid_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tagid_list(i));
    }
    total_size += 1 * this->tagid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTagsIdListResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTagsIdListResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTagsIdListResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTagsIdListResp::MergeFrom(const GetTagsIdListResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagid_list_.MergeFrom(from.tagid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTagsIdListResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTagsIdListResp::CopyFrom(const GetTagsIdListResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTagsIdListResp::IsInitialized() const {

  return true;
}

void GetTagsIdListResp::Swap(GetTagsIdListResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    tagid_list_.Swap(&other->tagid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTagsIdListResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTagsIdListResp_descriptor_;
  metadata.reflection = GetTagsIdListResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoRemarkReq::kAccessTokenFieldNumber;
const int UpdateUserInfoRemarkReq::kOpenidFieldNumber;
const int UpdateUserInfoRemarkReq::kRemarkFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoRemarkReq::UpdateUserInfoRemarkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateUserInfoRemarkReq)
}

void UpdateUserInfoRemarkReq::InitAsDefaultInstance() {
}

UpdateUserInfoRemarkReq::UpdateUserInfoRemarkReq(const UpdateUserInfoRemarkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateUserInfoRemarkReq)
}

void UpdateUserInfoRemarkReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoRemarkReq::~UpdateUserInfoRemarkReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateUserInfoRemarkReq)
  SharedDtor();
}

void UpdateUserInfoRemarkReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserInfoRemarkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfoRemarkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfoRemarkReq_descriptor_;
}

const UpdateUserInfoRemarkReq& UpdateUserInfoRemarkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateUserInfoRemarkReq* UpdateUserInfoRemarkReq::default_instance_ = NULL;

UpdateUserInfoRemarkReq* UpdateUserInfoRemarkReq::New() const {
  return new UpdateUserInfoRemarkReq;
}

void UpdateUserInfoRemarkReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfoRemarkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateUserInfoRemarkReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_remark;
        break;
      }

      // optional string remark = 3;
      case 3: {
        if (tag == 26) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateUserInfoRemarkReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateUserInfoRemarkReq)
  return false;
#undef DO_
}

void UpdateUserInfoRemarkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateUserInfoRemarkReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateUserInfoRemarkReq)
}

::google::protobuf::uint8* UpdateUserInfoRemarkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateUserInfoRemarkReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional string remark = 3;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateUserInfoRemarkReq)
  return target;
}

int UpdateUserInfoRemarkReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string remark = 3;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoRemarkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfoRemarkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfoRemarkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfoRemarkReq::MergeFrom(const UpdateUserInfoRemarkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfoRemarkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfoRemarkReq::CopyFrom(const UpdateUserInfoRemarkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoRemarkReq::IsInitialized() const {

  return true;
}

void UpdateUserInfoRemarkReq::Swap(UpdateUserInfoRemarkReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(openid_, other->openid_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfoRemarkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfoRemarkReq_descriptor_;
  metadata.reflection = UpdateUserInfoRemarkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserInfoRemarkResp::kErrcodeFieldNumber;
const int UpdateUserInfoRemarkResp::kErrmsgFieldNumber;
#endif  // !_MSC_VER

UpdateUserInfoRemarkResp::UpdateUserInfoRemarkResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UpdateUserInfoRemarkResp)
}

void UpdateUserInfoRemarkResp::InitAsDefaultInstance() {
}

UpdateUserInfoRemarkResp::UpdateUserInfoRemarkResp(const UpdateUserInfoRemarkResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UpdateUserInfoRemarkResp)
}

void UpdateUserInfoRemarkResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserInfoRemarkResp::~UpdateUserInfoRemarkResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UpdateUserInfoRemarkResp)
  SharedDtor();
}

void UpdateUserInfoRemarkResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void UpdateUserInfoRemarkResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserInfoRemarkResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserInfoRemarkResp_descriptor_;
}

const UpdateUserInfoRemarkResp& UpdateUserInfoRemarkResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UpdateUserInfoRemarkResp* UpdateUserInfoRemarkResp::default_instance_ = NULL;

UpdateUserInfoRemarkResp* UpdateUserInfoRemarkResp::New() const {
  return new UpdateUserInfoRemarkResp;
}

void UpdateUserInfoRemarkResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserInfoRemarkResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UpdateUserInfoRemarkResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UpdateUserInfoRemarkResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UpdateUserInfoRemarkResp)
  return false;
#undef DO_
}

void UpdateUserInfoRemarkResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UpdateUserInfoRemarkResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UpdateUserInfoRemarkResp)
}

::google::protobuf::uint8* UpdateUserInfoRemarkResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UpdateUserInfoRemarkResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UpdateUserInfoRemarkResp)
  return target;
}

int UpdateUserInfoRemarkResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserInfoRemarkResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserInfoRemarkResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserInfoRemarkResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserInfoRemarkResp::MergeFrom(const UpdateUserInfoRemarkResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserInfoRemarkResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserInfoRemarkResp::CopyFrom(const UpdateUserInfoRemarkResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserInfoRemarkResp::IsInitialized() const {

  return true;
}

void UpdateUserInfoRemarkResp::Swap(UpdateUserInfoRemarkResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserInfoRemarkResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserInfoRemarkResp_descriptor_;
  metadata.reflection = UpdateUserInfoRemarkResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoReq::kAccessTokenFieldNumber;
const int UserInfoReq::kOpenidFieldNumber;
const int UserInfoReq::kLangFieldNumber;
#endif  // !_MSC_VER

UserInfoReq::UserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UserInfoReq)
}

void UserInfoReq::InitAsDefaultInstance() {
}

UserInfoReq::UserInfoReq(const UserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UserInfoReq)
}

void UserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoReq::~UserInfoReq() {
  // @@protoc_insertion_point(destructor:mpcomm.UserInfoReq)
  SharedDtor();
}

void UserInfoReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoReq_descriptor_;
}

const UserInfoReq& UserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UserInfoReq* UserInfoReq::default_instance_ = NULL;

UserInfoReq* UserInfoReq::New() const {
  return new UserInfoReq;
}

void UserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lang;
        break;
      }

      // optional string lang = 3;
      case 3: {
        if (tag == 26) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UserInfoReq)
  return false;
#undef DO_
}

void UserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UserInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UserInfoReq)
}

::google::protobuf::uint8* UserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UserInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional string lang = 3;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UserInfoReq)
  return target;
}

int UserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string lang = 3;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoReq::MergeFrom(const UserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoReq::CopyFrom(const UserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoReq::IsInitialized() const {

  return true;
}

void UserInfoReq::Swap(UserInfoReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(openid_, other->openid_);
    std::swap(lang_, other->lang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoReq_descriptor_;
  metadata.reflection = UserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoResp::kErrcodeFieldNumber;
const int UserInfoResp::kErrmsgFieldNumber;
const int UserInfoResp::kSubscribeFieldNumber;
const int UserInfoResp::kOpenidFieldNumber;
const int UserInfoResp::kNicknameFieldNumber;
const int UserInfoResp::kSexFieldNumber;
const int UserInfoResp::kLanguageFieldNumber;
const int UserInfoResp::kCityFieldNumber;
const int UserInfoResp::kProvinceFieldNumber;
const int UserInfoResp::kCountryFieldNumber;
const int UserInfoResp::kHeadimgurlFieldNumber;
const int UserInfoResp::kSubscribeTimeFieldNumber;
const int UserInfoResp::kUnionidFieldNumber;
const int UserInfoResp::kRemarkFieldNumber;
const int UserInfoResp::kGroupidFieldNumber;
const int UserInfoResp::kTagidListFieldNumber;
#endif  // !_MSC_VER

UserInfoResp::UserInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UserInfoResp)
}

void UserInfoResp::InitAsDefaultInstance() {
}

UserInfoResp::UserInfoResp(const UserInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UserInfoResp)
}

void UserInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_ = GOOGLE_ULONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = GOOGLE_ULONGLONG(0);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_time_ = GOOGLE_ULONGLONG(0);
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoResp::~UserInfoResp() {
  // @@protoc_insertion_point(destructor:mpcomm.UserInfoResp)
  SharedDtor();
}

void UserInfoResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (headimgurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headimgurl_;
  }
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unionid_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoResp_descriptor_;
}

const UserInfoResp& UserInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UserInfoResp* UserInfoResp::default_instance_ = NULL;

UserInfoResp* UserInfoResp::New() const {
  return new UserInfoResp;
}

void UserInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    subscribe_ = GOOGLE_ULONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    sex_ = GOOGLE_ULONGLONG(0);
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_headimgurl()) {
      if (headimgurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headimgurl_->clear();
      }
    }
    subscribe_time_ = GOOGLE_ULONGLONG(0);
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unionid_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  tagid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UserInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subscribe;
        break;
      }

      // optional uint64 subscribe = 3;
      case 3: {
        if (tag == 24) {
         parse_subscribe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_openid;
        break;
      }

      // optional string openid = 4;
      case 4: {
        if (tag == 34) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nickname;
        break;
      }

      // optional string nickname = 5;
      case 5: {
        if (tag == 42) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint64 sex = 6;
      case 6: {
        if (tag == 48) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_language;
        break;
      }

      // optional string language = 7;
      case 7: {
        if (tag == 58) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_city;
        break;
      }

      // optional string city = 8;
      case 8: {
        if (tag == 66) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_province;
        break;
      }

      // optional string province = 9;
      case 9: {
        if (tag == 74) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_country;
        break;
      }

      // optional string country = 10;
      case 10: {
        if (tag == 82) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_headimgurl;
        break;
      }

      // optional string headimgurl = 11;
      case 11: {
        if (tag == 90) {
         parse_headimgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headimgurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_subscribe_time;
        break;
      }

      // optional uint64 subscribe_time = 12;
      case 12: {
        if (tag == 96) {
         parse_subscribe_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscribe_time_)));
          set_has_subscribe_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_unionid;
        break;
      }

      // optional string unionid = 13;
      case 13: {
        if (tag == 106) {
         parse_unionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_remark;
        break;
      }

      // optional string remark = 14;
      case 14: {
        if (tag == 114) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 15;
      case 15: {
        if (tag == 120) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_tagid_list;
        break;
      }

      // repeated uint64 tagid_list = 16;
      case 16: {
        if (tag == 128) {
         parse_tagid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 128, input, this->mutable_tagid_list())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tagid_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_tagid_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UserInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UserInfoResp)
  return false;
#undef DO_
}

void UserInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UserInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 subscribe = 3;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->subscribe(), output);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->openid(), output);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nickname(), output);
  }

  // optional uint64 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sex(), output);
  }

  // optional string language = 7;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->language(), output);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->city(), output);
  }

  // optional string province = 9;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->province(), output);
  }

  // optional string country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->country(), output);
  }

  // optional string headimgurl = 11;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headimgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->headimgurl(), output);
  }

  // optional uint64 subscribe_time = 12;
  if (has_subscribe_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->subscribe_time(), output);
  }

  // optional string unionid = 13;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->unionid(), output);
  }

  // optional string remark = 14;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->remark(), output);
  }

  // optional uint64 groupid = 15;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->groupid(), output);
  }

  // repeated uint64 tagid_list = 16;
  for (int i = 0; i < this->tagid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      16, this->tagid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UserInfoResp)
}

::google::protobuf::uint8* UserInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UserInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 subscribe = 3;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->subscribe(), target);
  }

  // optional string openid = 4;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->openid(), target);
  }

  // optional string nickname = 5;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nickname(), target);
  }

  // optional uint64 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sex(), target);
  }

  // optional string language = 7;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->language(), target);
  }

  // optional string city = 8;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->city(), target);
  }

  // optional string province = 9;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->province(), target);
  }

  // optional string country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->country(), target);
  }

  // optional string headimgurl = 11;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headimgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->headimgurl(), target);
  }

  // optional uint64 subscribe_time = 12;
  if (has_subscribe_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->subscribe_time(), target);
  }

  // optional string unionid = 13;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->unionid(), target);
  }

  // optional string remark = 14;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->remark(), target);
  }

  // optional uint64 groupid = 15;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->groupid(), target);
  }

  // repeated uint64 tagid_list = 16;
  for (int i = 0; i < this->tagid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(16, this->tagid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UserInfoResp)
  return target;
}

int UserInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 subscribe = 3;
    if (has_subscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscribe());
    }

    // optional string openid = 4;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string nickname = 5;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint64 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sex());
    }

    // optional string language = 7;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string city = 8;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string province = 9;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string country = 10;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string headimgurl = 11;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // optional uint64 subscribe_time = 12;
    if (has_subscribe_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscribe_time());
    }

    // optional string unionid = 13;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

    // optional string remark = 14;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint64 groupid = 15;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated uint64 tagid_list = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tagid_list(i));
    }
    total_size += 2 * this->tagid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoResp::MergeFrom(const UserInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagid_list_.MergeFrom(from.tagid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_headimgurl()) {
      set_headimgurl(from.headimgurl());
    }
    if (from.has_subscribe_time()) {
      set_subscribe_time(from.subscribe_time());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResp::CopyFrom(const UserInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResp::IsInitialized() const {

  return true;
}

void UserInfoResp::Swap(UserInfoResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(subscribe_, other->subscribe_);
    std::swap(openid_, other->openid_);
    std::swap(nickname_, other->nickname_);
    std::swap(sex_, other->sex_);
    std::swap(language_, other->language_);
    std::swap(city_, other->city_);
    std::swap(province_, other->province_);
    std::swap(country_, other->country_);
    std::swap(headimgurl_, other->headimgurl_);
    std::swap(subscribe_time_, other->subscribe_time_);
    std::swap(unionid_, other->unionid_);
    std::swap(remark_, other->remark_);
    std::swap(groupid_, other->groupid_);
    tagid_list_.Swap(&other->tagid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoResp_descriptor_;
  metadata.reflection = UserInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetUserItem::kOpenidFieldNumber;
const int BatchGetUserItem::kLangFieldNumber;
#endif  // !_MSC_VER

BatchGetUserItem::BatchGetUserItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchGetUserItem)
}

void BatchGetUserItem::InitAsDefaultInstance() {
}

BatchGetUserItem::BatchGetUserItem(const BatchGetUserItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchGetUserItem)
}

void BatchGetUserItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetUserItem::~BatchGetUserItem() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchGetUserItem)
  SharedDtor();
}

void BatchGetUserItem::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_;
  }
  if (this != default_instance_) {
  }
}

void BatchGetUserItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetUserItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetUserItem_descriptor_;
}

const BatchGetUserItem& BatchGetUserItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchGetUserItem* BatchGetUserItem::default_instance_ = NULL;

BatchGetUserItem* BatchGetUserItem::New() const {
  return new BatchGetUserItem;
}

void BatchGetUserItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_lang()) {
      if (lang_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetUserItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchGetUserItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string openid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lang;
        break;
      }

      // optional string lang = 2;
      case 2: {
        if (tag == 18) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchGetUserItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchGetUserItem)
  return false;
#undef DO_
}

void BatchGetUserItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchGetUserItem)
  // optional string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->openid(), output);
  }

  // optional string lang = 2;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchGetUserItem)
}

::google::protobuf::uint8* BatchGetUserItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchGetUserItem)
  // optional string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional string lang = 2;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchGetUserItem)
  return target;
}

int BatchGetUserItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string lang = 2;
    if (has_lang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetUserItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetUserItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetUserItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetUserItem::MergeFrom(const BatchGetUserItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_lang()) {
      set_lang(from.lang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetUserItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetUserItem::CopyFrom(const BatchGetUserItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetUserItem::IsInitialized() const {

  return true;
}

void BatchGetUserItem::Swap(BatchGetUserItem* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(lang_, other->lang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetUserItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetUserItem_descriptor_;
  metadata.reflection = BatchGetUserItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetUserInfoReq::kAccessTokenFieldNumber;
const int BatchGetUserInfoReq::kUserListFieldNumber;
#endif  // !_MSC_VER

BatchGetUserInfoReq::BatchGetUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchGetUserInfoReq)
}

void BatchGetUserInfoReq::InitAsDefaultInstance() {
}

BatchGetUserInfoReq::BatchGetUserInfoReq(const BatchGetUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchGetUserInfoReq)
}

void BatchGetUserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetUserInfoReq::~BatchGetUserInfoReq() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchGetUserInfoReq)
  SharedDtor();
}

void BatchGetUserInfoReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void BatchGetUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetUserInfoReq_descriptor_;
}

const BatchGetUserInfoReq& BatchGetUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchGetUserInfoReq* BatchGetUserInfoReq::default_instance_ = NULL;

BatchGetUserInfoReq* BatchGetUserInfoReq::New() const {
  return new BatchGetUserInfoReq;
}

void BatchGetUserInfoReq::Clear() {
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchGetUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        break;
      }

      // repeated .mpcomm.BatchGetUserItem user_list = 2;
      case 2: {
        if (tag == 18) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchGetUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchGetUserInfoReq)
  return false;
#undef DO_
}

void BatchGetUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchGetUserInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // repeated .mpcomm.BatchGetUserItem user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchGetUserInfoReq)
}

::google::protobuf::uint8* BatchGetUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchGetUserInfoReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // repeated .mpcomm.BatchGetUserItem user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchGetUserInfoReq)
  return target;
}

int BatchGetUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  // repeated .mpcomm.BatchGetUserItem user_list = 2;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetUserInfoReq::MergeFrom(const BatchGetUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetUserInfoReq::CopyFrom(const BatchGetUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetUserInfoReq::IsInitialized() const {

  return true;
}

void BatchGetUserInfoReq::Swap(BatchGetUserInfoReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    user_list_.Swap(&other->user_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetUserInfoReq_descriptor_;
  metadata.reflection = BatchGetUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoItem::kSubscribeFieldNumber;
const int UserInfoItem::kOpenidFieldNumber;
const int UserInfoItem::kNicknameFieldNumber;
const int UserInfoItem::kSexFieldNumber;
const int UserInfoItem::kLanguageFieldNumber;
const int UserInfoItem::kCityFieldNumber;
const int UserInfoItem::kProvinceFieldNumber;
const int UserInfoItem::kCountryFieldNumber;
const int UserInfoItem::kHeadimgurlFieldNumber;
const int UserInfoItem::kSubscribeTimeFieldNumber;
const int UserInfoItem::kUnionidFieldNumber;
const int UserInfoItem::kRemarkFieldNumber;
const int UserInfoItem::kGroupidFieldNumber;
const int UserInfoItem::kTagidListFieldNumber;
#endif  // !_MSC_VER

UserInfoItem::UserInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UserInfoItem)
}

void UserInfoItem::InitAsDefaultInstance() {
}

UserInfoItem::UserInfoItem(const UserInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UserInfoItem)
}

void UserInfoItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  subscribe_ = GOOGLE_ULONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = GOOGLE_ULONGLONG(0);
  language_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headimgurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_time_ = GOOGLE_ULONGLONG(0);
  unionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoItem::~UserInfoItem() {
  // @@protoc_insertion_point(destructor:mpcomm.UserInfoItem)
  SharedDtor();
}

void UserInfoItem::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete openid_;
  }
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete language_;
  }
  if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (headimgurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete headimgurl_;
  }
  if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unionid_;
  }
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoItem_descriptor_;
}

const UserInfoItem& UserInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UserInfoItem* UserInfoItem::default_instance_ = NULL;

UserInfoItem* UserInfoItem::New() const {
  return new UserInfoItem;
}

void UserInfoItem::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    subscribe_ = GOOGLE_ULONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        openid_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    sex_ = GOOGLE_ULONGLONG(0);
    if (has_language()) {
      if (language_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        language_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_province()) {
      if (province_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_headimgurl()) {
      if (headimgurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        headimgurl_->clear();
      }
    }
    subscribe_time_ = GOOGLE_ULONGLONG(0);
    if (has_unionid()) {
      if (unionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unionid_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  tagid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UserInfoItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 subscribe = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscribe_)));
          set_has_subscribe();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (tag == 18) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint64 sex = 4;
      case 4: {
        if (tag == 32) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_language;
        break;
      }

      // optional string language = 5;
      case 5: {
        if (tag == 42) {
         parse_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language().data(), this->language().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "language");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_city;
        break;
      }

      // optional string city = 6;
      case 6: {
        if (tag == 50) {
         parse_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_province;
        break;
      }

      // optional string province = 7;
      case 7: {
        if (tag == 58) {
         parse_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_country;
        break;
      }

      // optional string country = 8;
      case 8: {
        if (tag == 66) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_headimgurl;
        break;
      }

      // optional string headimgurl = 9;
      case 9: {
        if (tag == 74) {
         parse_headimgurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimgurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headimgurl().data(), this->headimgurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "headimgurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_subscribe_time;
        break;
      }

      // optional uint64 subscribe_time = 10;
      case 10: {
        if (tag == 80) {
         parse_subscribe_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subscribe_time_)));
          set_has_subscribe_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_unionid;
        break;
      }

      // optional string unionid = 11;
      case 11: {
        if (tag == 90) {
         parse_unionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unionid().data(), this->unionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "unionid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_remark;
        break;
      }

      // optional string remark = 12;
      case 12: {
        if (tag == 98) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 13;
      case 13: {
        if (tag == 104) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tagid_list;
        break;
      }

      // repeated uint64 tagid_list = 14;
      case 14: {
        if (tag == 112) {
         parse_tagid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 112, input, this->mutable_tagid_list())));
        } else if (tag == 114) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tagid_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_tagid_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UserInfoItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UserInfoItem)
  return false;
#undef DO_
}

void UserInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UserInfoItem)
  // optional uint64 subscribe = 1;
  if (has_subscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subscribe(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->openid(), output);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional uint64 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sex(), output);
  }

  // optional string language = 5;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->language(), output);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->city(), output);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->province(), output);
  }

  // optional string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // optional string headimgurl = 9;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headimgurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->headimgurl(), output);
  }

  // optional uint64 subscribe_time = 10;
  if (has_subscribe_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->subscribe_time(), output);
  }

  // optional string unionid = 11;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->unionid(), output);
  }

  // optional string remark = 12;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->remark(), output);
  }

  // optional uint64 groupid = 13;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->groupid(), output);
  }

  // repeated uint64 tagid_list = 14;
  for (int i = 0; i < this->tagid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      14, this->tagid_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UserInfoItem)
}

::google::protobuf::uint8* UserInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UserInfoItem)
  // optional uint64 subscribe = 1;
  if (has_subscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subscribe(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional string nickname = 3;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional uint64 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sex(), target);
  }

  // optional string language = 5;
  if (has_language()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language().data(), this->language().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->language(), target);
  }

  // optional string city = 6;
  if (has_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->city(), target);
  }

  // optional string province = 7;
  if (has_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->province(), target);
  }

  // optional string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // optional string headimgurl = 9;
  if (has_headimgurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headimgurl().data(), this->headimgurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "headimgurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->headimgurl(), target);
  }

  // optional uint64 subscribe_time = 10;
  if (has_subscribe_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->subscribe_time(), target);
  }

  // optional string unionid = 11;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unionid().data(), this->unionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "unionid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->unionid(), target);
  }

  // optional string remark = 12;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->remark(), target);
  }

  // optional uint64 groupid = 13;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->groupid(), target);
  }

  // repeated uint64 tagid_list = 14;
  for (int i = 0; i < this->tagid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(14, this->tagid_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UserInfoItem)
  return target;
}

int UserInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 subscribe = 1;
    if (has_subscribe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscribe());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string nickname = 3;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional uint64 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sex());
    }

    // optional string language = 5;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language());
    }

    // optional string city = 6;
    if (has_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // optional string province = 7;
    if (has_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // optional string country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string headimgurl = 9;
    if (has_headimgurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimgurl());
    }

    // optional uint64 subscribe_time = 10;
    if (has_subscribe_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subscribe_time());
    }

    // optional string unionid = 11;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unionid());
    }

    // optional string remark = 12;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

    // optional uint64 groupid = 13;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated uint64 tagid_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->tagid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tagid_list(i));
    }
    total_size += 1 * this->tagid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoItem::MergeFrom(const UserInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  tagid_list_.MergeFrom(from.tagid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subscribe()) {
      set_subscribe(from.subscribe());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headimgurl()) {
      set_headimgurl(from.headimgurl());
    }
    if (from.has_subscribe_time()) {
      set_subscribe_time(from.subscribe_time());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoItem::CopyFrom(const UserInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoItem::IsInitialized() const {

  return true;
}

void UserInfoItem::Swap(UserInfoItem* other) {
  if (other != this) {
    std::swap(subscribe_, other->subscribe_);
    std::swap(openid_, other->openid_);
    std::swap(nickname_, other->nickname_);
    std::swap(sex_, other->sex_);
    std::swap(language_, other->language_);
    std::swap(city_, other->city_);
    std::swap(province_, other->province_);
    std::swap(country_, other->country_);
    std::swap(headimgurl_, other->headimgurl_);
    std::swap(subscribe_time_, other->subscribe_time_);
    std::swap(unionid_, other->unionid_);
    std::swap(remark_, other->remark_);
    std::swap(groupid_, other->groupid_);
    tagid_list_.Swap(&other->tagid_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoItem_descriptor_;
  metadata.reflection = UserInfoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetUserInfoResp::kErrcodeFieldNumber;
const int BatchGetUserInfoResp::kErrmsgFieldNumber;
const int BatchGetUserInfoResp::kUserInfoListFieldNumber;
#endif  // !_MSC_VER

BatchGetUserInfoResp::BatchGetUserInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.BatchGetUserInfoResp)
}

void BatchGetUserInfoResp::InitAsDefaultInstance() {
}

BatchGetUserInfoResp::BatchGetUserInfoResp(const BatchGetUserInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.BatchGetUserInfoResp)
}

void BatchGetUserInfoResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetUserInfoResp::~BatchGetUserInfoResp() {
  // @@protoc_insertion_point(destructor:mpcomm.BatchGetUserInfoResp)
  SharedDtor();
}

void BatchGetUserInfoResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void BatchGetUserInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetUserInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetUserInfoResp_descriptor_;
}

const BatchGetUserInfoResp& BatchGetUserInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

BatchGetUserInfoResp* BatchGetUserInfoResp::default_instance_ = NULL;

BatchGetUserInfoResp* BatchGetUserInfoResp::New() const {
  return new BatchGetUserInfoResp;
}

void BatchGetUserInfoResp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }
  user_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetUserInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.BatchGetUserInfoResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info_list;
        break;
      }

      // repeated .mpcomm.UserInfoItem user_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_info_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.BatchGetUserInfoResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.BatchGetUserInfoResp)
  return false;
#undef DO_
}

void BatchGetUserInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.BatchGetUserInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // repeated .mpcomm.UserInfoItem user_info_list = 3;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.BatchGetUserInfoResp)
}

::google::protobuf::uint8* BatchGetUserInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.BatchGetUserInfoResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // repeated .mpcomm.UserInfoItem user_info_list = 3;
  for (int i = 0; i < this->user_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.BatchGetUserInfoResp)
  return target;
}

int BatchGetUserInfoResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  // repeated .mpcomm.UserInfoItem user_info_list = 3;
  total_size += 1 * this->user_info_list_size();
  for (int i = 0; i < this->user_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetUserInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetUserInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetUserInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetUserInfoResp::MergeFrom(const BatchGetUserInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_info_list_.MergeFrom(from.user_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetUserInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetUserInfoResp::CopyFrom(const BatchGetUserInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetUserInfoResp::IsInitialized() const {

  return true;
}

void BatchGetUserInfoResp::Swap(BatchGetUserInfoResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    user_info_list_.Swap(&other->user_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetUserInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetUserInfoResp_descriptor_;
  metadata.reflection = BatchGetUserInfoResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserReq::kAccessTokenFieldNumber;
const int GetUserReq::kNextOpenidFieldNumber;
#endif  // !_MSC_VER

GetUserReq::GetUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetUserReq)
}

void GetUserReq::InitAsDefaultInstance() {
}

GetUserReq::GetUserReq(const GetUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetUserReq)
}

void GetUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserReq::~GetUserReq() {
  // @@protoc_insertion_point(destructor:mpcomm.GetUserReq)
  SharedDtor();
}

void GetUserReq::SharedDtor() {
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete next_openid_;
  }
  if (this != default_instance_) {
  }
}

void GetUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserReq_descriptor_;
}

const GetUserReq& GetUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetUserReq* GetUserReq::default_instance_ = NULL;

GetUserReq* GetUserReq::New() const {
  return new GetUserReq;
}

void GetUserReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_access_token()) {
      if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        access_token_->clear();
      }
    }
    if (has_next_openid()) {
      if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        next_openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_next_openid;
        break;
      }

      // optional string next_openid = 2;
      case 2: {
        if (tag == 18) {
         parse_next_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next_openid().data(), this->next_openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "next_openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetUserReq)
  return false;
#undef DO_
}

void GetUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetUserReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string next_openid = 2;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetUserReq)
}

::google::protobuf::uint8* GetUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetUserReq)
  // optional string access_token = 1;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string next_openid = 2;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetUserReq)
  return target;
}

int GetUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string access_token = 1;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string next_openid = 2;
    if (has_next_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserReq::MergeFrom(const GetUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
    if (from.has_next_openid()) {
      set_next_openid(from.next_openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserReq::CopyFrom(const GetUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserReq::IsInitialized() const {

  return true;
}

void GetUserReq::Swap(GetUserReq* other) {
  if (other != this) {
    std::swap(access_token_, other->access_token_);
    std::swap(next_openid_, other->next_openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserReq_descriptor_;
  metadata.reflection = GetUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserList::kOpenidFieldNumber;
#endif  // !_MSC_VER

UserList::UserList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.UserList)
}

void UserList::InitAsDefaultInstance() {
}

UserList::UserList(const UserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.UserList)
}

void UserList::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:mpcomm.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserList_descriptor_;
}

const UserList& UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

UserList* UserList::default_instance_ = NULL;

UserList* UserList::New() const {
  return new UserList;
}

void UserList::Clear() {
  openid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.UserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string openid = 1;
      case 1: {
        if (tag == 10) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->openid(this->openid_size() - 1).data(),
            this->openid(this->openid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_openid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.UserList)
  return false;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.UserList)
  // repeated string openid = 1;
  for (int i = 0; i < this->openid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->openid(i).data(), this->openid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "openid");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.UserList)
}

::google::protobuf::uint8* UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.UserList)
  // repeated string openid = 1;
  for (int i = 0; i < this->openid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->openid(i).data(), this->openid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openid");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->openid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.UserList)
  return target;
}

int UserList::ByteSize() const {
  int total_size = 0;

  // repeated string openid = 1;
  total_size += 1 * this->openid_size();
  for (int i = 0; i < this->openid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openid(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserList::MergeFrom(const UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  openid_.MergeFrom(from.openid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserList::CopyFrom(const UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {

  return true;
}

void UserList::Swap(UserList* other) {
  if (other != this) {
    openid_.Swap(&other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserList_descriptor_;
  metadata.reflection = UserList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserResp::kErrcodeFieldNumber;
const int GetUserResp::kErrmsgFieldNumber;
const int GetUserResp::kTotalFieldNumber;
const int GetUserResp::kCountFieldNumber;
const int GetUserResp::kDataFieldNumber;
const int GetUserResp::kNextOpenidFieldNumber;
#endif  // !_MSC_VER

GetUserResp::GetUserResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mpcomm.GetUserResp)
}

void GetUserResp::InitAsDefaultInstance() {
  data_ = const_cast< ::mpcomm::UserList*>(&::mpcomm::UserList::default_instance());
}

GetUserResp::GetUserResp(const GetUserResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mpcomm.GetUserResp)
}

void GetUserResp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errcode_ = GOOGLE_LONGLONG(0);
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_ = GOOGLE_ULONGLONG(0);
  count_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  next_openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserResp::~GetUserResp() {
  // @@protoc_insertion_point(destructor:mpcomm.GetUserResp)
  SharedDtor();
}

void GetUserResp::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete next_openid_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void GetUserResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserResp_descriptor_;
}

const GetUserResp& GetUserResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mpmsg_2eproto();
  return *default_instance_;
}

GetUserResp* GetUserResp::default_instance_ = NULL;

GetUserResp* GetUserResp::New() const {
  return new GetUserResp;
}

void GetUserResp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetUserResp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(total_, count_);
    errcode_ = GOOGLE_LONGLONG(0);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::mpcomm::UserList::Clear();
    }
    if (has_next_openid()) {
      if (next_openid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        next_openid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mpcomm.GetUserResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 errcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // optional uint64 total = 3;
      case 3: {
        if (tag == 24) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint64 count = 4;
      case 4: {
        if (tag == 32) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .mpcomm.UserList data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_next_openid;
        break;
      }

      // optional string next_openid = 6;
      case 6: {
        if (tag == 50) {
         parse_next_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->next_openid().data(), this->next_openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "next_openid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mpcomm.GetUserResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mpcomm.GetUserResp)
  return false;
#undef DO_
}

void GetUserResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mpcomm.GetUserResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->errcode(), output);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // optional uint64 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total(), output);
  }

  // optional uint64 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->count(), output);
  }

  // optional .mpcomm.UserList data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  // optional string next_openid = 6;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->next_openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mpcomm.GetUserResp)
}

::google::protobuf::uint8* GetUserResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mpcomm.GetUserResp)
  // optional int64 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->errcode(), target);
  }

  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // optional uint64 total = 3;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->total(), target);
  }

  // optional uint64 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->count(), target);
  }

  // optional .mpcomm.UserList data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  // optional string next_openid = 6;
  if (has_next_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->next_openid().data(), this->next_openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "next_openid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->next_openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mpcomm.GetUserResp)
  return target;
}

int GetUserResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->errcode());
    }

    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional uint64 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->total());
    }

    // optional uint64 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

    // optional .mpcomm.UserList data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional string next_openid = 6;
    if (has_next_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserResp::MergeFrom(const GetUserResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_data()) {
      mutable_data()->::mpcomm::UserList::MergeFrom(from.data());
    }
    if (from.has_next_openid()) {
      set_next_openid(from.next_openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserResp::CopyFrom(const GetUserResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserResp::IsInitialized() const {

  return true;
}

void GetUserResp::Swap(GetUserResp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(total_, other->total_);
    std::swap(count_, other->count_);
    std::swap(data_, other->data_);
    std::swap(next_openid_, other->next_openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserResp_descriptor_;
  metadata.reflection = GetUserResp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mpcomm

// @@protoc_insertion_point(global_scope)
